// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.1

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type QuotesHTTPServer interface {
	Account(context.Context, *QuotesAccountRequest) (*QuotesReply, error)
	Company(context.Context, *QuotesCompanyRequest) (*QuotesReply, error)
	Country(context.Context, *QuotesCountryRequest) (*QuotesReply, error)
	Currency(context.Context, *QuotesCurrencyRequest) (*QuotesReply, error)
	Exchange(context.Context, *QuotesExchangeRequest) (*QuotesReply, error)
	Health(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	Index(context.Context, *QuotesIndexRequest) (*QuotesReply, error)
	Industry(context.Context, *QuotesIndustryRequest) (*QuotesReply, error)
}

func RegisterQuotesHTTPServer(s *http.Server, srv QuotesHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/quotes/company", _Quotes_Company0_HTTP_Handler(srv))
	r.POST("/v1/quotes/currency", _Quotes_Currency0_HTTP_Handler(srv))
	r.POST("/v1/quotes/{country}/industry", _Quotes_Industry0_HTTP_Handler(srv))
	r.POST("/v1/quotes/exchange", _Quotes_Exchange0_HTTP_Handler(srv))
	r.POST("/v1/quotes/country", _Quotes_Country0_HTTP_Handler(srv))
	r.POST("/v1/quotes/index", _Quotes_Index0_HTTP_Handler(srv))
	r.POST("/v1/quotes/account", _Quotes_Account0_HTTP_Handler(srv))
	r.GET("/healthz", _Quotes_Health3_HTTP_Handler(srv))
}

func _Quotes_Company0_HTTP_Handler(srv QuotesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in QuotesCompanyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/quotes.v1.Quotes/Company")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Company(ctx, req.(*QuotesCompanyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*QuotesReply)
		return ctx.Result(200, reply)
	}
}

func _Quotes_Currency0_HTTP_Handler(srv QuotesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in QuotesCurrencyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/quotes.v1.Quotes/Currency")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Currency(ctx, req.(*QuotesCurrencyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*QuotesReply)
		return ctx.Result(200, reply)
	}
}

func _Quotes_Industry0_HTTP_Handler(srv QuotesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in QuotesIndustryRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/quotes.v1.Quotes/Industry")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Industry(ctx, req.(*QuotesIndustryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*QuotesReply)
		return ctx.Result(200, reply)
	}
}

func _Quotes_Exchange0_HTTP_Handler(srv QuotesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in QuotesExchangeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/quotes.v1.Quotes/Exchange")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Exchange(ctx, req.(*QuotesExchangeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*QuotesReply)
		return ctx.Result(200, reply)
	}
}

func _Quotes_Country0_HTTP_Handler(srv QuotesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in QuotesCountryRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/quotes.v1.Quotes/Country")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Country(ctx, req.(*QuotesCountryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*QuotesReply)
		return ctx.Result(200, reply)
	}
}

func _Quotes_Index0_HTTP_Handler(srv QuotesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in QuotesIndexRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/quotes.v1.Quotes/Index")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Index(ctx, req.(*QuotesIndexRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*QuotesReply)
		return ctx.Result(200, reply)
	}
}

func _Quotes_Account0_HTTP_Handler(srv QuotesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in QuotesAccountRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/quotes.v1.Quotes/Account")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Account(ctx, req.(*QuotesAccountRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*QuotesReply)
		return ctx.Result(200, reply)
	}
}

func _Quotes_Health3_HTTP_Handler(srv QuotesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/quotes.v1.Quotes/Health")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Health(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type QuotesHTTPClient interface {
	Account(ctx context.Context, req *QuotesAccountRequest, opts ...http.CallOption) (rsp *QuotesReply, err error)
	Company(ctx context.Context, req *QuotesCompanyRequest, opts ...http.CallOption) (rsp *QuotesReply, err error)
	Country(ctx context.Context, req *QuotesCountryRequest, opts ...http.CallOption) (rsp *QuotesReply, err error)
	Currency(ctx context.Context, req *QuotesCurrencyRequest, opts ...http.CallOption) (rsp *QuotesReply, err error)
	Exchange(ctx context.Context, req *QuotesExchangeRequest, opts ...http.CallOption) (rsp *QuotesReply, err error)
	Health(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	Index(ctx context.Context, req *QuotesIndexRequest, opts ...http.CallOption) (rsp *QuotesReply, err error)
	Industry(ctx context.Context, req *QuotesIndustryRequest, opts ...http.CallOption) (rsp *QuotesReply, err error)
}

type QuotesHTTPClientImpl struct {
	cc *http.Client
}

func NewQuotesHTTPClient(client *http.Client) QuotesHTTPClient {
	return &QuotesHTTPClientImpl{client}
}

func (c *QuotesHTTPClientImpl) Account(ctx context.Context, in *QuotesAccountRequest, opts ...http.CallOption) (*QuotesReply, error) {
	var out QuotesReply
	pattern := "/v1/quotes/account"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/quotes.v1.Quotes/Account"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *QuotesHTTPClientImpl) Company(ctx context.Context, in *QuotesCompanyRequest, opts ...http.CallOption) (*QuotesReply, error) {
	var out QuotesReply
	pattern := "/v1/quotes/company"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/quotes.v1.Quotes/Company"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *QuotesHTTPClientImpl) Country(ctx context.Context, in *QuotesCountryRequest, opts ...http.CallOption) (*QuotesReply, error) {
	var out QuotesReply
	pattern := "/v1/quotes/country"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/quotes.v1.Quotes/Country"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *QuotesHTTPClientImpl) Currency(ctx context.Context, in *QuotesCurrencyRequest, opts ...http.CallOption) (*QuotesReply, error) {
	var out QuotesReply
	pattern := "/v1/quotes/currency"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/quotes.v1.Quotes/Currency"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *QuotesHTTPClientImpl) Exchange(ctx context.Context, in *QuotesExchangeRequest, opts ...http.CallOption) (*QuotesReply, error) {
	var out QuotesReply
	pattern := "/v1/quotes/exchange"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/quotes.v1.Quotes/Exchange"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *QuotesHTTPClientImpl) Health(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/healthz"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/quotes.v1.Quotes/Health"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *QuotesHTTPClientImpl) Index(ctx context.Context, in *QuotesIndexRequest, opts ...http.CallOption) (*QuotesReply, error) {
	var out QuotesReply
	pattern := "/v1/quotes/index"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/quotes.v1.Quotes/Index"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *QuotesHTTPClientImpl) Industry(ctx context.Context, in *QuotesIndustryRequest, opts ...http.CallOption) (*QuotesReply, error) {
	var out QuotesReply
	pattern := "/v1/quotes/{country}/industry"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/quotes.v1.Quotes/Industry"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
