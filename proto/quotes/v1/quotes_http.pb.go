// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.1

package quotes_v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type QuotesHTTPServer interface {
	Delete(context.Context, *QuoteDeleteRequest) (*QuoteDeleteReply, error)
	Last(context.Context, *QuoteLastRequest) (*QuoteLastReply, error)
	Search(context.Context, *QuoteRequest) (*QuoteReply, error)
}

func RegisterQuotesHTTPServer(s *http.Server, srv QuotesHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/quotes/{exchange}/{ticker}", _Quotes_Last0_HTTP_Handler(srv))
	r.POST("/v1/quotes", _Quotes_Search1_HTTP_Handler(srv))
	r.DELETE("/v1/quotes", _Quotes_Delete0_HTTP_Handler(srv))
}

func _Quotes_Last0_HTTP_Handler(srv QuotesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in QuoteLastRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/quotes.v1.Quotes/Last")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Last(ctx, req.(*QuoteLastRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*QuoteLastReply)
		return ctx.Result(200, reply)
	}
}

func _Quotes_Search1_HTTP_Handler(srv QuotesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in QuoteRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/quotes.v1.Quotes/Search")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Search(ctx, req.(*QuoteRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*QuoteReply)
		return ctx.Result(200, reply)
	}
}

func _Quotes_Delete0_HTTP_Handler(srv QuotesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in QuoteDeleteRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/quotes.v1.Quotes/Delete")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Delete(ctx, req.(*QuoteDeleteRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*QuoteDeleteReply)
		return ctx.Result(200, reply)
	}
}

type QuotesHTTPClient interface {
	Delete(ctx context.Context, req *QuoteDeleteRequest, opts ...http.CallOption) (rsp *QuoteDeleteReply, err error)
	Last(ctx context.Context, req *QuoteLastRequest, opts ...http.CallOption) (rsp *QuoteLastReply, err error)
	Search(ctx context.Context, req *QuoteRequest, opts ...http.CallOption) (rsp *QuoteReply, err error)
}

type QuotesHTTPClientImpl struct {
	cc *http.Client
}

func NewQuotesHTTPClient(client *http.Client) QuotesHTTPClient {
	return &QuotesHTTPClientImpl{client}
}

func (c *QuotesHTTPClientImpl) Delete(ctx context.Context, in *QuoteDeleteRequest, opts ...http.CallOption) (*QuoteDeleteReply, error) {
	var out QuoteDeleteReply
	pattern := "/v1/quotes"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/quotes.v1.Quotes/Delete"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *QuotesHTTPClientImpl) Last(ctx context.Context, in *QuoteLastRequest, opts ...http.CallOption) (*QuoteLastReply, error) {
	var out QuoteLastReply
	pattern := "/v1/quotes/{exchange}/{ticker}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/quotes.v1.Quotes/Last"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *QuotesHTTPClientImpl) Search(ctx context.Context, in *QuoteRequest, opts ...http.CallOption) (*QuoteReply, error) {
	var out QuoteReply
	pattern := "/v1/quotes"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/quotes.v1.Quotes/Search"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
