// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.1

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type QuotesHTTPServer interface {
	Account(context.Context, *QuotesAccountPeriodRequest) (*QuotesReply, error)
	AccountTimestamp(context.Context, *QuotesAccountTimestampRequest) (*QuotesReply, error)
	Company(context.Context, *QuotesCompanyPeriodRequest) (*QuotesReply, error)
	CompanyTimestamp(context.Context, *QuotesCompanyTimestampRequest) (*QuotesReply, error)
	Country(context.Context, *QuotesCountryPeriodRequest) (*QuotesReply, error)
	CountryTimestamp(context.Context, *QuotesCountryTimestampRequest) (*QuotesReply, error)
	Currency(context.Context, *QuotesCurrencyPeriodRequest) (*QuotesReply, error)
	CurrencyTimestamp(context.Context, *QuotesCurrencyTimestampRequest) (*QuotesReply, error)
	Exchange(context.Context, *QuotesExchangePeriodRequest) (*QuotesReply, error)
	ExchangeTimestamp(context.Context, *QuotesExchangeTimestampRequest) (*QuotesReply, error)
	Health(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	Index(context.Context, *QuotesIndexPeriodRequest) (*QuotesReply, error)
	IndexTimestamp(context.Context, *QuotesIndexTimestampRequest) (*QuotesReply, error)
	Industry(context.Context, *QuotesIndustryPeriodRequest) (*QuotesReply, error)
	IndustryTimestamp(context.Context, *QuotesIndustryTimestampRequest) (*QuotesReply, error)
}

func RegisterQuotesHTTPServer(s *http.Server, srv QuotesHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/quotes/company", _Quotes_Company1_HTTP_Handler(srv))
	r.POST("/v1/quotes/company/ts", _Quotes_CompanyTimestamp0_HTTP_Handler(srv))
	r.POST("/v1/quotes/currency", _Quotes_Currency1_HTTP_Handler(srv))
	r.POST("/v1/quotes/currency/ts", _Quotes_CurrencyTimestamp0_HTTP_Handler(srv))
	r.POST("/v1/quotes/{exchange}/industry", _Quotes_Industry1_HTTP_Handler(srv))
	r.POST("/v1/quotes/{exchange}/industry/ts", _Quotes_IndustryTimestamp0_HTTP_Handler(srv))
	r.POST("/v1/quotes/exchange", _Quotes_Exchange1_HTTP_Handler(srv))
	r.POST("/v1/quotes/exchange/ts", _Quotes_ExchangeTimestamp0_HTTP_Handler(srv))
	r.POST("/v1/quotes/country", _Quotes_Country1_HTTP_Handler(srv))
	r.POST("/v1/quotes/country/ts", _Quotes_CountryTimestamp0_HTTP_Handler(srv))
	r.POST("/v1/quotes/index", _Quotes_Index1_HTTP_Handler(srv))
	r.POST("/v1/quotes/index/ts", _Quotes_IndexTimestamp0_HTTP_Handler(srv))
	r.POST("/v1/quotes/account", _Quotes_Account1_HTTP_Handler(srv))
	r.POST("/v1/quotes/account/ts", _Quotes_AccountTimestamp0_HTTP_Handler(srv))
	r.GET("/healthz", _Quotes_Health2_HTTP_Handler(srv))
}

func _Quotes_Company1_HTTP_Handler(srv QuotesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in QuotesCompanyPeriodRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/quotes.v1.Quotes/Company")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Company(ctx, req.(*QuotesCompanyPeriodRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*QuotesReply)
		return ctx.Result(200, reply)
	}
}

func _Quotes_CompanyTimestamp0_HTTP_Handler(srv QuotesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in QuotesCompanyTimestampRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/quotes.v1.Quotes/CompanyTimestamp")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CompanyTimestamp(ctx, req.(*QuotesCompanyTimestampRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*QuotesReply)
		return ctx.Result(200, reply)
	}
}

func _Quotes_Currency1_HTTP_Handler(srv QuotesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in QuotesCurrencyPeriodRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/quotes.v1.Quotes/Currency")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Currency(ctx, req.(*QuotesCurrencyPeriodRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*QuotesReply)
		return ctx.Result(200, reply)
	}
}

func _Quotes_CurrencyTimestamp0_HTTP_Handler(srv QuotesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in QuotesCurrencyTimestampRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/quotes.v1.Quotes/CurrencyTimestamp")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CurrencyTimestamp(ctx, req.(*QuotesCurrencyTimestampRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*QuotesReply)
		return ctx.Result(200, reply)
	}
}

func _Quotes_Industry1_HTTP_Handler(srv QuotesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in QuotesIndustryPeriodRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/quotes.v1.Quotes/Industry")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Industry(ctx, req.(*QuotesIndustryPeriodRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*QuotesReply)
		return ctx.Result(200, reply)
	}
}

func _Quotes_IndustryTimestamp0_HTTP_Handler(srv QuotesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in QuotesIndustryTimestampRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/quotes.v1.Quotes/IndustryTimestamp")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.IndustryTimestamp(ctx, req.(*QuotesIndustryTimestampRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*QuotesReply)
		return ctx.Result(200, reply)
	}
}

func _Quotes_Exchange1_HTTP_Handler(srv QuotesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in QuotesExchangePeriodRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/quotes.v1.Quotes/Exchange")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Exchange(ctx, req.(*QuotesExchangePeriodRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*QuotesReply)
		return ctx.Result(200, reply)
	}
}

func _Quotes_ExchangeTimestamp0_HTTP_Handler(srv QuotesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in QuotesExchangeTimestampRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/quotes.v1.Quotes/ExchangeTimestamp")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ExchangeTimestamp(ctx, req.(*QuotesExchangeTimestampRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*QuotesReply)
		return ctx.Result(200, reply)
	}
}

func _Quotes_Country1_HTTP_Handler(srv QuotesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in QuotesCountryPeriodRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/quotes.v1.Quotes/Country")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Country(ctx, req.(*QuotesCountryPeriodRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*QuotesReply)
		return ctx.Result(200, reply)
	}
}

func _Quotes_CountryTimestamp0_HTTP_Handler(srv QuotesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in QuotesCountryTimestampRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/quotes.v1.Quotes/CountryTimestamp")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CountryTimestamp(ctx, req.(*QuotesCountryTimestampRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*QuotesReply)
		return ctx.Result(200, reply)
	}
}

func _Quotes_Index1_HTTP_Handler(srv QuotesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in QuotesIndexPeriodRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/quotes.v1.Quotes/Index")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Index(ctx, req.(*QuotesIndexPeriodRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*QuotesReply)
		return ctx.Result(200, reply)
	}
}

func _Quotes_IndexTimestamp0_HTTP_Handler(srv QuotesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in QuotesIndexTimestampRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/quotes.v1.Quotes/IndexTimestamp")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.IndexTimestamp(ctx, req.(*QuotesIndexTimestampRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*QuotesReply)
		return ctx.Result(200, reply)
	}
}

func _Quotes_Account1_HTTP_Handler(srv QuotesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in QuotesAccountPeriodRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/quotes.v1.Quotes/Account")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Account(ctx, req.(*QuotesAccountPeriodRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*QuotesReply)
		return ctx.Result(200, reply)
	}
}

func _Quotes_AccountTimestamp0_HTTP_Handler(srv QuotesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in QuotesAccountTimestampRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/quotes.v1.Quotes/AccountTimestamp")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AccountTimestamp(ctx, req.(*QuotesAccountTimestampRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*QuotesReply)
		return ctx.Result(200, reply)
	}
}

func _Quotes_Health2_HTTP_Handler(srv QuotesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/quotes.v1.Quotes/Health")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Health(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type QuotesHTTPClient interface {
	Account(ctx context.Context, req *QuotesAccountPeriodRequest, opts ...http.CallOption) (rsp *QuotesReply, err error)
	AccountTimestamp(ctx context.Context, req *QuotesAccountTimestampRequest, opts ...http.CallOption) (rsp *QuotesReply, err error)
	Company(ctx context.Context, req *QuotesCompanyPeriodRequest, opts ...http.CallOption) (rsp *QuotesReply, err error)
	CompanyTimestamp(ctx context.Context, req *QuotesCompanyTimestampRequest, opts ...http.CallOption) (rsp *QuotesReply, err error)
	Country(ctx context.Context, req *QuotesCountryPeriodRequest, opts ...http.CallOption) (rsp *QuotesReply, err error)
	CountryTimestamp(ctx context.Context, req *QuotesCountryTimestampRequest, opts ...http.CallOption) (rsp *QuotesReply, err error)
	Currency(ctx context.Context, req *QuotesCurrencyPeriodRequest, opts ...http.CallOption) (rsp *QuotesReply, err error)
	CurrencyTimestamp(ctx context.Context, req *QuotesCurrencyTimestampRequest, opts ...http.CallOption) (rsp *QuotesReply, err error)
	Exchange(ctx context.Context, req *QuotesExchangePeriodRequest, opts ...http.CallOption) (rsp *QuotesReply, err error)
	ExchangeTimestamp(ctx context.Context, req *QuotesExchangeTimestampRequest, opts ...http.CallOption) (rsp *QuotesReply, err error)
	Health(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	Index(ctx context.Context, req *QuotesIndexPeriodRequest, opts ...http.CallOption) (rsp *QuotesReply, err error)
	IndexTimestamp(ctx context.Context, req *QuotesIndexTimestampRequest, opts ...http.CallOption) (rsp *QuotesReply, err error)
	Industry(ctx context.Context, req *QuotesIndustryPeriodRequest, opts ...http.CallOption) (rsp *QuotesReply, err error)
	IndustryTimestamp(ctx context.Context, req *QuotesIndustryTimestampRequest, opts ...http.CallOption) (rsp *QuotesReply, err error)
}

type QuotesHTTPClientImpl struct {
	cc *http.Client
}

func NewQuotesHTTPClient(client *http.Client) QuotesHTTPClient {
	return &QuotesHTTPClientImpl{client}
}

func (c *QuotesHTTPClientImpl) Account(ctx context.Context, in *QuotesAccountPeriodRequest, opts ...http.CallOption) (*QuotesReply, error) {
	var out QuotesReply
	pattern := "/v1/quotes/account"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/quotes.v1.Quotes/Account"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *QuotesHTTPClientImpl) AccountTimestamp(ctx context.Context, in *QuotesAccountTimestampRequest, opts ...http.CallOption) (*QuotesReply, error) {
	var out QuotesReply
	pattern := "/v1/quotes/account/ts"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/quotes.v1.Quotes/AccountTimestamp"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *QuotesHTTPClientImpl) Company(ctx context.Context, in *QuotesCompanyPeriodRequest, opts ...http.CallOption) (*QuotesReply, error) {
	var out QuotesReply
	pattern := "/v1/quotes/company"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/quotes.v1.Quotes/Company"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *QuotesHTTPClientImpl) CompanyTimestamp(ctx context.Context, in *QuotesCompanyTimestampRequest, opts ...http.CallOption) (*QuotesReply, error) {
	var out QuotesReply
	pattern := "/v1/quotes/company/ts"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/quotes.v1.Quotes/CompanyTimestamp"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *QuotesHTTPClientImpl) Country(ctx context.Context, in *QuotesCountryPeriodRequest, opts ...http.CallOption) (*QuotesReply, error) {
	var out QuotesReply
	pattern := "/v1/quotes/country"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/quotes.v1.Quotes/Country"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *QuotesHTTPClientImpl) CountryTimestamp(ctx context.Context, in *QuotesCountryTimestampRequest, opts ...http.CallOption) (*QuotesReply, error) {
	var out QuotesReply
	pattern := "/v1/quotes/country/ts"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/quotes.v1.Quotes/CountryTimestamp"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *QuotesHTTPClientImpl) Currency(ctx context.Context, in *QuotesCurrencyPeriodRequest, opts ...http.CallOption) (*QuotesReply, error) {
	var out QuotesReply
	pattern := "/v1/quotes/currency"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/quotes.v1.Quotes/Currency"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *QuotesHTTPClientImpl) CurrencyTimestamp(ctx context.Context, in *QuotesCurrencyTimestampRequest, opts ...http.CallOption) (*QuotesReply, error) {
	var out QuotesReply
	pattern := "/v1/quotes/currency/ts"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/quotes.v1.Quotes/CurrencyTimestamp"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *QuotesHTTPClientImpl) Exchange(ctx context.Context, in *QuotesExchangePeriodRequest, opts ...http.CallOption) (*QuotesReply, error) {
	var out QuotesReply
	pattern := "/v1/quotes/exchange"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/quotes.v1.Quotes/Exchange"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *QuotesHTTPClientImpl) ExchangeTimestamp(ctx context.Context, in *QuotesExchangeTimestampRequest, opts ...http.CallOption) (*QuotesReply, error) {
	var out QuotesReply
	pattern := "/v1/quotes/exchange/ts"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/quotes.v1.Quotes/ExchangeTimestamp"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *QuotesHTTPClientImpl) Health(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/healthz"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/quotes.v1.Quotes/Health"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *QuotesHTTPClientImpl) Index(ctx context.Context, in *QuotesIndexPeriodRequest, opts ...http.CallOption) (*QuotesReply, error) {
	var out QuotesReply
	pattern := "/v1/quotes/index"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/quotes.v1.Quotes/Index"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *QuotesHTTPClientImpl) IndexTimestamp(ctx context.Context, in *QuotesIndexTimestampRequest, opts ...http.CallOption) (*QuotesReply, error) {
	var out QuotesReply
	pattern := "/v1/quotes/index/ts"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/quotes.v1.Quotes/IndexTimestamp"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *QuotesHTTPClientImpl) Industry(ctx context.Context, in *QuotesIndustryPeriodRequest, opts ...http.CallOption) (*QuotesReply, error) {
	var out QuotesReply
	pattern := "/v1/quotes/{exchange}/industry"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/quotes.v1.Quotes/Industry"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *QuotesHTTPClientImpl) IndustryTimestamp(ctx context.Context, in *QuotesIndustryTimestampRequest, opts ...http.CallOption) (*QuotesReply, error) {
	var out QuotesReply
	pattern := "/v1/quotes/{exchange}/industry/ts"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/quotes.v1.Quotes/IndustryTimestamp"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
