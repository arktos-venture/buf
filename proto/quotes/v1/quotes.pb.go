// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: proto/quotes/v1/quotes.proto

package v1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Indicator int32

const (
	Indicator_Macd      Indicator = 0
	Indicator_Rsi       Indicator = 1
	Indicator_Obv       Indicator = 2
	Indicator_Adx       Indicator = 3
	Indicator_Beta      Indicator = 4
	Indicator_Atr       Indicator = 5
	Indicator_Bband     Indicator = 6
	Indicator_Ema       Indicator = 7
	Indicator_LinearReg Indicator = 8
	Indicator_WillR     Indicator = 9
	Indicator_StdDev    Indicator = 10
	Indicator_Sma10     Indicator = 11
	Indicator_Sma20     Indicator = 12
	Indicator_Sma50     Indicator = 13
	Indicator_Sma100    Indicator = 14
	Indicator_Sma200    Indicator = 15
)

// Enum value maps for Indicator.
var (
	Indicator_name = map[int32]string{
		0:  "Macd",
		1:  "Rsi",
		2:  "Obv",
		3:  "Adx",
		4:  "Beta",
		5:  "Atr",
		6:  "Bband",
		7:  "Ema",
		8:  "LinearReg",
		9:  "WillR",
		10: "StdDev",
		11: "Sma10",
		12: "Sma20",
		13: "Sma50",
		14: "Sma100",
		15: "Sma200",
	}
	Indicator_value = map[string]int32{
		"Macd":      0,
		"Rsi":       1,
		"Obv":       2,
		"Adx":       3,
		"Beta":      4,
		"Atr":       5,
		"Bband":     6,
		"Ema":       7,
		"LinearReg": 8,
		"WillR":     9,
		"StdDev":    10,
		"Sma10":     11,
		"Sma20":     12,
		"Sma50":     13,
		"Sma100":    14,
		"Sma200":    15,
	}
)

func (x Indicator) Enum() *Indicator {
	p := new(Indicator)
	*p = x
	return p
}

func (x Indicator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Indicator) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_quotes_v1_quotes_proto_enumTypes[0].Descriptor()
}

func (Indicator) Type() protoreflect.EnumType {
	return &file_proto_quotes_v1_quotes_proto_enumTypes[0]
}

func (x Indicator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Indicator.Descriptor instead.
func (Indicator) EnumDescriptor() ([]byte, []int) {
	return file_proto_quotes_v1_quotes_proto_rawDescGZIP(), []int{0}
}

type Date_Interval int32

const (
	Date_d Date_Interval = 0
	Date_w Date_Interval = 1
	Date_m Date_Interval = 2
)

// Enum value maps for Date_Interval.
var (
	Date_Interval_name = map[int32]string{
		0: "d",
		1: "w",
		2: "m",
	}
	Date_Interval_value = map[string]int32{
		"d": 0,
		"w": 1,
		"m": 2,
	}
)

func (x Date_Interval) Enum() *Date_Interval {
	p := new(Date_Interval)
	*p = x
	return p
}

func (x Date_Interval) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Date_Interval) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_quotes_v1_quotes_proto_enumTypes[1].Descriptor()
}

func (Date_Interval) Type() protoreflect.EnumType {
	return &file_proto_quotes_v1_quotes_proto_enumTypes[1]
}

func (x Date_Interval) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Date_Interval.Descriptor instead.
func (Date_Interval) EnumDescriptor() ([]byte, []int) {
	return file_proto_quotes_v1_quotes_proto_rawDescGZIP(), []int{0, 0}
}

type Date struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interval Date_Interval `protobuf:"varint,4,opt,name=interval,proto3,enum=quotes.v1.Date_Interval" json:"interval,omitempty"`
	Period   string        `protobuf:"bytes,5,opt,name=period,proto3" json:"period,omitempty"`
}

func (x *Date) Reset() {
	*x = Date{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_quotes_v1_quotes_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Date) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Date) ProtoMessage() {}

func (x *Date) ProtoReflect() protoreflect.Message {
	mi := &file_proto_quotes_v1_quotes_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Date.ProtoReflect.Descriptor instead.
func (*Date) Descriptor() ([]byte, []int) {
	return file_proto_quotes_v1_quotes_proto_rawDescGZIP(), []int{0}
}

func (x *Date) GetInterval() Date_Interval {
	if x != nil {
		return x.Interval
	}
	return Date_d
}

func (x *Date) GetPeriod() string {
	if x != nil {
		return x.Period
	}
	return ""
}

type QuotesCompanyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticker     string      `protobuf:"bytes,1,opt,name=ticker,proto3" json:"ticker,omitempty"`
	Exchange   string      `protobuf:"bytes,2,opt,name=exchange,proto3" json:"exchange,omitempty"`
	Currency   string      `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`
	Indicators []Indicator `protobuf:"varint,4,rep,packed,name=indicators,proto3,enum=quotes.v1.Indicator" json:"indicators,omitempty"`
	Date       *Date       `protobuf:"bytes,5,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *QuotesCompanyRequest) Reset() {
	*x = QuotesCompanyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_quotes_v1_quotes_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuotesCompanyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuotesCompanyRequest) ProtoMessage() {}

func (x *QuotesCompanyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_quotes_v1_quotes_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuotesCompanyRequest.ProtoReflect.Descriptor instead.
func (*QuotesCompanyRequest) Descriptor() ([]byte, []int) {
	return file_proto_quotes_v1_quotes_proto_rawDescGZIP(), []int{1}
}

func (x *QuotesCompanyRequest) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *QuotesCompanyRequest) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *QuotesCompanyRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *QuotesCompanyRequest) GetIndicators() []Indicator {
	if x != nil {
		return x.Indicators
	}
	return nil
}

func (x *QuotesCompanyRequest) GetDate() *Date {
	if x != nil {
		return x.Date
	}
	return nil
}

type QuotesCurrencyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticker     string      `protobuf:"bytes,1,opt,name=ticker,proto3" json:"ticker,omitempty"`
	Indicators []Indicator `protobuf:"varint,2,rep,packed,name=indicators,proto3,enum=quotes.v1.Indicator" json:"indicators,omitempty"`
	Date       *Date       `protobuf:"bytes,3,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *QuotesCurrencyRequest) Reset() {
	*x = QuotesCurrencyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_quotes_v1_quotes_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuotesCurrencyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuotesCurrencyRequest) ProtoMessage() {}

func (x *QuotesCurrencyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_quotes_v1_quotes_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuotesCurrencyRequest.ProtoReflect.Descriptor instead.
func (*QuotesCurrencyRequest) Descriptor() ([]byte, []int) {
	return file_proto_quotes_v1_quotes_proto_rawDescGZIP(), []int{2}
}

func (x *QuotesCurrencyRequest) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *QuotesCurrencyRequest) GetIndicators() []Indicator {
	if x != nil {
		return x.Indicators
	}
	return nil
}

func (x *QuotesCurrencyRequest) GetDate() *Date {
	if x != nil {
		return x.Date
	}
	return nil
}

type QuotesIndustryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Country    string      `protobuf:"bytes,1,opt,name=country,proto3" json:"country,omitempty"`
	Industry   int64       `protobuf:"varint,2,opt,name=industry,proto3" json:"industry,omitempty"`
	Indicators []Indicator `protobuf:"varint,3,rep,packed,name=indicators,proto3,enum=quotes.v1.Indicator" json:"indicators,omitempty"`
	Date       *Date       `protobuf:"bytes,4,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *QuotesIndustryRequest) Reset() {
	*x = QuotesIndustryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_quotes_v1_quotes_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuotesIndustryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuotesIndustryRequest) ProtoMessage() {}

func (x *QuotesIndustryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_quotes_v1_quotes_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuotesIndustryRequest.ProtoReflect.Descriptor instead.
func (*QuotesIndustryRequest) Descriptor() ([]byte, []int) {
	return file_proto_quotes_v1_quotes_proto_rawDescGZIP(), []int{3}
}

func (x *QuotesIndustryRequest) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *QuotesIndustryRequest) GetIndustry() int64 {
	if x != nil {
		return x.Industry
	}
	return 0
}

func (x *QuotesIndustryRequest) GetIndicators() []Indicator {
	if x != nil {
		return x.Indicators
	}
	return nil
}

func (x *QuotesIndustryRequest) GetDate() *Date {
	if x != nil {
		return x.Date
	}
	return nil
}

type QuotesExchangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchange   string      `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange,omitempty"`
	Country    string      `protobuf:"bytes,2,opt,name=country,proto3" json:"country,omitempty"`
	Indicators []Indicator `protobuf:"varint,3,rep,packed,name=indicators,proto3,enum=quotes.v1.Indicator" json:"indicators,omitempty"`
	Date       *Date       `protobuf:"bytes,4,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *QuotesExchangeRequest) Reset() {
	*x = QuotesExchangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_quotes_v1_quotes_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuotesExchangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuotesExchangeRequest) ProtoMessage() {}

func (x *QuotesExchangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_quotes_v1_quotes_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuotesExchangeRequest.ProtoReflect.Descriptor instead.
func (*QuotesExchangeRequest) Descriptor() ([]byte, []int) {
	return file_proto_quotes_v1_quotes_proto_rawDescGZIP(), []int{4}
}

func (x *QuotesExchangeRequest) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *QuotesExchangeRequest) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *QuotesExchangeRequest) GetIndicators() []Indicator {
	if x != nil {
		return x.Indicators
	}
	return nil
}

func (x *QuotesExchangeRequest) GetDate() *Date {
	if x != nil {
		return x.Date
	}
	return nil
}

type QuotesCountryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Country    string      `protobuf:"bytes,1,opt,name=country,proto3" json:"country,omitempty"`
	Indicators []Indicator `protobuf:"varint,2,rep,packed,name=indicators,proto3,enum=quotes.v1.Indicator" json:"indicators,omitempty"`
	Date       *Date       `protobuf:"bytes,3,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *QuotesCountryRequest) Reset() {
	*x = QuotesCountryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_quotes_v1_quotes_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuotesCountryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuotesCountryRequest) ProtoMessage() {}

func (x *QuotesCountryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_quotes_v1_quotes_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuotesCountryRequest.ProtoReflect.Descriptor instead.
func (*QuotesCountryRequest) Descriptor() ([]byte, []int) {
	return file_proto_quotes_v1_quotes_proto_rawDescGZIP(), []int{5}
}

func (x *QuotesCountryRequest) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *QuotesCountryRequest) GetIndicators() []Indicator {
	if x != nil {
		return x.Indicators
	}
	return nil
}

func (x *QuotesCountryRequest) GetDate() *Date {
	if x != nil {
		return x.Date
	}
	return nil
}

type QuotesIndexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index      string      `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Indicators []Indicator `protobuf:"varint,2,rep,packed,name=indicators,proto3,enum=quotes.v1.Indicator" json:"indicators,omitempty"`
	Date       *Date       `protobuf:"bytes,3,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *QuotesIndexRequest) Reset() {
	*x = QuotesIndexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_quotes_v1_quotes_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuotesIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuotesIndexRequest) ProtoMessage() {}

func (x *QuotesIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_quotes_v1_quotes_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuotesIndexRequest.ProtoReflect.Descriptor instead.
func (*QuotesIndexRequest) Descriptor() ([]byte, []int) {
	return file_proto_quotes_v1_quotes_proto_rawDescGZIP(), []int{6}
}

func (x *QuotesIndexRequest) GetIndex() string {
	if x != nil {
		return x.Index
	}
	return ""
}

func (x *QuotesIndexRequest) GetIndicators() []Indicator {
	if x != nil {
		return x.Indicators
	}
	return nil
}

func (x *QuotesIndexRequest) GetDate() *Date {
	if x != nil {
		return x.Date
	}
	return nil
}

type QuotesAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account    string      `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Indicators []Indicator `protobuf:"varint,2,rep,packed,name=indicators,proto3,enum=quotes.v1.Indicator" json:"indicators,omitempty"`
	Date       *Date       `protobuf:"bytes,3,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *QuotesAccountRequest) Reset() {
	*x = QuotesAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_quotes_v1_quotes_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuotesAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuotesAccountRequest) ProtoMessage() {}

func (x *QuotesAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_quotes_v1_quotes_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuotesAccountRequest.ProtoReflect.Descriptor instead.
func (*QuotesAccountRequest) Descriptor() ([]byte, []int) {
	return file_proto_quotes_v1_quotes_proto_rawDescGZIP(), []int{7}
}

func (x *QuotesAccountRequest) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *QuotesAccountRequest) GetIndicators() []Indicator {
	if x != nil {
		return x.Indicators
	}
	return nil
}

func (x *QuotesAccountRequest) GetDate() *Date {
	if x != nil {
		return x.Date
	}
	return nil
}

type QuotesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Open       []float32               `protobuf:"fixed32,1,rep,packed,name=open,proto3" json:"open,omitempty"`
	Close      []float32               `protobuf:"fixed32,2,rep,packed,name=close,proto3" json:"close,omitempty"`
	Low        []float32               `protobuf:"fixed32,3,rep,packed,name=low,proto3" json:"low,omitempty"`
	High       []float32               `protobuf:"fixed32,4,rep,packed,name=high,proto3" json:"high,omitempty"`
	Volume     []float32               `protobuf:"fixed32,5,rep,packed,name=volume,proto3" json:"volume,omitempty"`
	Indicators *QuotesReply_Indicators `protobuf:"bytes,6,opt,name=indicators,proto3" json:"indicators,omitempty"`
	Date       []int64                 `protobuf:"varint,7,rep,packed,name=date,proto3" json:"date,omitempty"`
}

func (x *QuotesReply) Reset() {
	*x = QuotesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_quotes_v1_quotes_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuotesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuotesReply) ProtoMessage() {}

func (x *QuotesReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_quotes_v1_quotes_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuotesReply.ProtoReflect.Descriptor instead.
func (*QuotesReply) Descriptor() ([]byte, []int) {
	return file_proto_quotes_v1_quotes_proto_rawDescGZIP(), []int{8}
}

func (x *QuotesReply) GetOpen() []float32 {
	if x != nil {
		return x.Open
	}
	return nil
}

func (x *QuotesReply) GetClose() []float32 {
	if x != nil {
		return x.Close
	}
	return nil
}

func (x *QuotesReply) GetLow() []float32 {
	if x != nil {
		return x.Low
	}
	return nil
}

func (x *QuotesReply) GetHigh() []float32 {
	if x != nil {
		return x.High
	}
	return nil
}

func (x *QuotesReply) GetVolume() []float32 {
	if x != nil {
		return x.Volume
	}
	return nil
}

func (x *QuotesReply) GetIndicators() *QuotesReply_Indicators {
	if x != nil {
		return x.Indicators
	}
	return nil
}

func (x *QuotesReply) GetDate() []int64 {
	if x != nil {
		return x.Date
	}
	return nil
}

type QuotesReply_Indicators struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Macd      *QuotesReply_Indicators_Macd    `protobuf:"bytes,1,opt,name=macd,proto3" json:"macd,omitempty"`
	Rsi       []float32                       `protobuf:"fixed32,2,rep,packed,name=rsi,proto3" json:"rsi,omitempty"`
	Obv       []float32                       `protobuf:"fixed32,3,rep,packed,name=obv,proto3" json:"obv,omitempty"`
	Adx       []float32                       `protobuf:"fixed32,4,rep,packed,name=adx,proto3" json:"adx,omitempty"`
	Beta      []float32                       `protobuf:"fixed32,5,rep,packed,name=beta,proto3" json:"beta,omitempty"`
	Atr       []float32                       `protobuf:"fixed32,6,rep,packed,name=atr,proto3" json:"atr,omitempty"`
	Bband     []*QuotesReply_Indicators_Bband `protobuf:"bytes,7,rep,name=bband,proto3" json:"bband,omitempty"`
	Ema       []float32                       `protobuf:"fixed32,8,rep,packed,name=ema,proto3" json:"ema,omitempty"`
	Linearreg []float32                       `protobuf:"fixed32,9,rep,packed,name=linearreg,proto3" json:"linearreg,omitempty"`
	Willr     []float32                       `protobuf:"fixed32,10,rep,packed,name=willr,proto3" json:"willr,omitempty"`
	Stddev    []float32                       `protobuf:"fixed32,11,rep,packed,name=stddev,proto3" json:"stddev,omitempty"`
	Sma10     []float32                       `protobuf:"fixed32,12,rep,packed,name=sma10,proto3" json:"sma10,omitempty"`
	Sma20     []float32                       `protobuf:"fixed32,13,rep,packed,name=sma20,proto3" json:"sma20,omitempty"`
	Sma50     []float32                       `protobuf:"fixed32,14,rep,packed,name=sma50,proto3" json:"sma50,omitempty"`
	Sma100    []float32                       `protobuf:"fixed32,15,rep,packed,name=sma100,proto3" json:"sma100,omitempty"`
	Sma200    []float32                       `protobuf:"fixed32,16,rep,packed,name=sma200,proto3" json:"sma200,omitempty"`
}

func (x *QuotesReply_Indicators) Reset() {
	*x = QuotesReply_Indicators{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_quotes_v1_quotes_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuotesReply_Indicators) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuotesReply_Indicators) ProtoMessage() {}

func (x *QuotesReply_Indicators) ProtoReflect() protoreflect.Message {
	mi := &file_proto_quotes_v1_quotes_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuotesReply_Indicators.ProtoReflect.Descriptor instead.
func (*QuotesReply_Indicators) Descriptor() ([]byte, []int) {
	return file_proto_quotes_v1_quotes_proto_rawDescGZIP(), []int{8, 0}
}

func (x *QuotesReply_Indicators) GetMacd() *QuotesReply_Indicators_Macd {
	if x != nil {
		return x.Macd
	}
	return nil
}

func (x *QuotesReply_Indicators) GetRsi() []float32 {
	if x != nil {
		return x.Rsi
	}
	return nil
}

func (x *QuotesReply_Indicators) GetObv() []float32 {
	if x != nil {
		return x.Obv
	}
	return nil
}

func (x *QuotesReply_Indicators) GetAdx() []float32 {
	if x != nil {
		return x.Adx
	}
	return nil
}

func (x *QuotesReply_Indicators) GetBeta() []float32 {
	if x != nil {
		return x.Beta
	}
	return nil
}

func (x *QuotesReply_Indicators) GetAtr() []float32 {
	if x != nil {
		return x.Atr
	}
	return nil
}

func (x *QuotesReply_Indicators) GetBband() []*QuotesReply_Indicators_Bband {
	if x != nil {
		return x.Bband
	}
	return nil
}

func (x *QuotesReply_Indicators) GetEma() []float32 {
	if x != nil {
		return x.Ema
	}
	return nil
}

func (x *QuotesReply_Indicators) GetLinearreg() []float32 {
	if x != nil {
		return x.Linearreg
	}
	return nil
}

func (x *QuotesReply_Indicators) GetWillr() []float32 {
	if x != nil {
		return x.Willr
	}
	return nil
}

func (x *QuotesReply_Indicators) GetStddev() []float32 {
	if x != nil {
		return x.Stddev
	}
	return nil
}

func (x *QuotesReply_Indicators) GetSma10() []float32 {
	if x != nil {
		return x.Sma10
	}
	return nil
}

func (x *QuotesReply_Indicators) GetSma20() []float32 {
	if x != nil {
		return x.Sma20
	}
	return nil
}

func (x *QuotesReply_Indicators) GetSma50() []float32 {
	if x != nil {
		return x.Sma50
	}
	return nil
}

func (x *QuotesReply_Indicators) GetSma100() []float32 {
	if x != nil {
		return x.Sma100
	}
	return nil
}

func (x *QuotesReply_Indicators) GetSma200() []float32 {
	if x != nil {
		return x.Sma200
	}
	return nil
}

type QuotesReply_Indicators_Macd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value   []float32 `protobuf:"fixed32,1,rep,packed,name=value,proto3" json:"value,omitempty"`
	Signal  []float32 `protobuf:"fixed32,2,rep,packed,name=signal,proto3" json:"signal,omitempty"`
	History []float32 `protobuf:"fixed32,3,rep,packed,name=history,proto3" json:"history,omitempty"`
}

func (x *QuotesReply_Indicators_Macd) Reset() {
	*x = QuotesReply_Indicators_Macd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_quotes_v1_quotes_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuotesReply_Indicators_Macd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuotesReply_Indicators_Macd) ProtoMessage() {}

func (x *QuotesReply_Indicators_Macd) ProtoReflect() protoreflect.Message {
	mi := &file_proto_quotes_v1_quotes_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuotesReply_Indicators_Macd.ProtoReflect.Descriptor instead.
func (*QuotesReply_Indicators_Macd) Descriptor() ([]byte, []int) {
	return file_proto_quotes_v1_quotes_proto_rawDescGZIP(), []int{8, 0, 0}
}

func (x *QuotesReply_Indicators_Macd) GetValue() []float32 {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *QuotesReply_Indicators_Macd) GetSignal() []float32 {
	if x != nil {
		return x.Signal
	}
	return nil
}

func (x *QuotesReply_Indicators_Macd) GetHistory() []float32 {
	if x != nil {
		return x.History
	}
	return nil
}

type QuotesReply_Indicators_Bband struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Upper  []float32 `protobuf:"fixed32,1,rep,packed,name=upper,proto3" json:"upper,omitempty"`
	Middle []float32 `protobuf:"fixed32,2,rep,packed,name=middle,proto3" json:"middle,omitempty"`
	Lower  []float32 `protobuf:"fixed32,3,rep,packed,name=lower,proto3" json:"lower,omitempty"`
}

func (x *QuotesReply_Indicators_Bband) Reset() {
	*x = QuotesReply_Indicators_Bband{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_quotes_v1_quotes_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuotesReply_Indicators_Bband) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuotesReply_Indicators_Bband) ProtoMessage() {}

func (x *QuotesReply_Indicators_Bband) ProtoReflect() protoreflect.Message {
	mi := &file_proto_quotes_v1_quotes_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuotesReply_Indicators_Bband.ProtoReflect.Descriptor instead.
func (*QuotesReply_Indicators_Bband) Descriptor() ([]byte, []int) {
	return file_proto_quotes_v1_quotes_proto_rawDescGZIP(), []int{8, 0, 1}
}

func (x *QuotesReply_Indicators_Bband) GetUpper() []float32 {
	if x != nil {
		return x.Upper
	}
	return nil
}

func (x *QuotesReply_Indicators_Bband) GetMiddle() []float32 {
	if x != nil {
		return x.Middle
	}
	return nil
}

func (x *QuotesReply_Indicators_Bband) GetLower() []float32 {
	if x != nil {
		return x.Lower
	}
	return nil
}

var File_proto_quotes_v1_quotes_proto protoreflect.FileDescriptor

var file_proto_quotes_v1_quotes_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09,
	0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc7, 0x01,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x5e, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x46, 0xfa, 0x42, 0x43, 0x72, 0x41, 0x52, 0x04, 0x6c,
	0x61, 0x73, 0x74, 0x52, 0x02, 0x33, 0x64, 0x52, 0x02, 0x31, 0x77, 0x52, 0x02, 0x32, 0x77, 0x52,
	0x02, 0x31, 0x6d, 0x52, 0x02, 0x32, 0x6d, 0x52, 0x02, 0x33, 0x6d, 0x52, 0x02, 0x36, 0x6d, 0x52,
	0x02, 0x31, 0x79, 0x52, 0x02, 0x32, 0x79, 0x52, 0x02, 0x33, 0x79, 0x52, 0x02, 0x35, 0x79, 0x52,
	0x03, 0x31, 0x30, 0x79, 0x52, 0x03, 0x32, 0x30, 0x79, 0x52, 0x03, 0x33, 0x30, 0x79, 0x52, 0x06,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0x1f, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x05, 0x0a, 0x01, 0x64, 0x10, 0x00, 0x12, 0x05, 0x0a, 0x01, 0x77, 0x10, 0x01,
	0x12, 0x05, 0x0a, 0x01, 0x6d, 0x10, 0x02, 0x22, 0x9c, 0x02, 0x0a, 0x14, 0x51, 0x75, 0x6f, 0x74,
	0x65, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x08, 0x52, 0x06, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x12, 0x56, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a, 0xfa, 0x42, 0x37, 0x72, 0x35, 0x52, 0x06, 0x4e, 0x41,
	0x53, 0x44, 0x41, 0x51, 0x52, 0x04, 0x4e, 0x59, 0x53, 0x45, 0x52, 0x02, 0x54, 0x4f, 0x52, 0x03,
	0x4c, 0x53, 0x45, 0x52, 0x02, 0x50, 0x41, 0x52, 0x02, 0x42, 0x52, 0x52, 0x02, 0x41, 0x53, 0x52,
	0x02, 0x53, 0x47, 0x52, 0x03, 0x53, 0x48, 0x45, 0x52, 0x03, 0x53, 0x48, 0x47, 0x52, 0x02, 0x48,
	0x4b, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x72, 0x03, 0x98, 0x01, 0x03, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x3e, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x92, 0x01, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x73, 0x12, 0x23, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x65,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0x9f, 0x01, 0x0a, 0x15, 0x51, 0x75, 0x6f, 0x74, 0x65,
	0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x08, 0x52, 0x06, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x92, 0x01, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61,
	0x74, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0xcf, 0x01, 0x0a, 0x15, 0x51, 0x75, 0x6f,
	0x74, 0x65, 0x73, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x22, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x98, 0x01, 0x02, 0x52, 0x07, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2d, 0x0a, 0x08, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74,
	0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x11, 0xfa, 0x42, 0x0e, 0x22, 0x0c, 0x18,
	0xd2, 0x9a, 0xfe, 0xc0, 0x17, 0x28, 0x92, 0xa6, 0x80, 0xd5, 0x12, 0x52, 0x08, 0x69, 0x6e, 0x64,
	0x75, 0x73, 0x74, 0x72, 0x79, 0x12, 0x3e, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x71, 0x75, 0x6f, 0x74,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x69, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0xf8, 0x01, 0x0a, 0x15, 0x51,
	0x75, 0x6f, 0x74, 0x65, 0x73, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a, 0xfa, 0x42, 0x37, 0x72, 0x35, 0x52, 0x06, 0x4e,
	0x41, 0x53, 0x44, 0x41, 0x51, 0x52, 0x04, 0x4e, 0x59, 0x53, 0x45, 0x52, 0x02, 0x54, 0x4f, 0x52,
	0x03, 0x4c, 0x53, 0x45, 0x52, 0x02, 0x50, 0x41, 0x52, 0x02, 0x42, 0x52, 0x52, 0x02, 0x41, 0x53,
	0x52, 0x02, 0x53, 0x47, 0x52, 0x03, 0x53, 0x48, 0x45, 0x52, 0x03, 0x53, 0x48, 0x47, 0x52, 0x02,
	0x48, 0x4b, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x72, 0x03, 0x98, 0x01, 0x02, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x3e, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x92,
	0x01, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0x12, 0x23, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0x9f, 0x01, 0x0a, 0x14, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22,
	0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x98, 0x01, 0x02, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x3e, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x92, 0x01, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x12, 0x23, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74,
	0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x12, 0x51, 0x75, 0x6f, 0x74,
	0x65, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa,
	0x42, 0x06, 0x72, 0x04, 0x10, 0x03, 0x18, 0x20, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x3e, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01,
	0x02, 0x18, 0x01, 0x52, 0x0a, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12,
	0x23, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x22, 0xa0, 0x01, 0x0a, 0x14, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09,
	0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x03, 0x18, 0x10, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x92, 0x01, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x12, 0x23, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74,
	0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0x9f, 0x06, 0x0a, 0x0b, 0x51, 0x75, 0x6f, 0x74,
	0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x02, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x02, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x03, 0x28, 0x02, 0x52, 0x03,
	0x6c, 0x6f, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x02, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x02, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12,
	0x41, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x51, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x0a, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x1a, 0xd0, 0x04, 0x0a, 0x0a, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x3a, 0x0a, 0x04, 0x6d, 0x61, 0x63, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x51, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x4d, 0x61, 0x63, 0x64, 0x52, 0x04, 0x6d, 0x61, 0x63,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x73, 0x69, 0x18, 0x02, 0x20, 0x03, 0x28, 0x02, 0x52, 0x03,
	0x72, 0x73, 0x69, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x62, 0x76, 0x18, 0x03, 0x20, 0x03, 0x28, 0x02,
	0x52, 0x03, 0x6f, 0x62, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x64, 0x78, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x02, 0x52, 0x03, 0x61, 0x64, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x65, 0x74, 0x61, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x02, 0x52, 0x04, 0x62, 0x65, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x61,
	0x74, 0x72, 0x18, 0x06, 0x20, 0x03, 0x28, 0x02, 0x52, 0x03, 0x61, 0x74, 0x72, 0x12, 0x3d, 0x0a,
	0x05, 0x62, 0x62, 0x61, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x71,
	0x75, 0x6f, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2e,
	0x42, 0x62, 0x61, 0x6e, 0x64, 0x52, 0x05, 0x62, 0x62, 0x61, 0x6e, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x65, 0x6d, 0x61, 0x18, 0x08, 0x20, 0x03, 0x28, 0x02, 0x52, 0x03, 0x65, 0x6d, 0x61, 0x12, 0x1c,
	0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x72, 0x65, 0x67, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x02, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x72, 0x65, 0x67, 0x12, 0x14, 0x0a, 0x05,
	0x77, 0x69, 0x6c, 0x6c, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x02, 0x52, 0x05, 0x77, 0x69, 0x6c,
	0x6c, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x64, 0x65, 0x76, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x02, 0x52, 0x06, 0x73, 0x74, 0x64, 0x64, 0x65, 0x76, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6d,
	0x61, 0x31, 0x30, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x02, 0x52, 0x05, 0x73, 0x6d, 0x61, 0x31, 0x30,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x6d, 0x61, 0x32, 0x30, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x02, 0x52,
	0x05, 0x73, 0x6d, 0x61, 0x32, 0x30, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6d, 0x61, 0x35, 0x30, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x02, 0x52, 0x05, 0x73, 0x6d, 0x61, 0x35, 0x30, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x6d, 0x61, 0x31, 0x30, 0x30, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x02, 0x52, 0x06, 0x73, 0x6d,
	0x61, 0x31, 0x30, 0x30, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6d, 0x61, 0x32, 0x30, 0x30, 0x18, 0x10,
	0x20, 0x03, 0x28, 0x02, 0x52, 0x06, 0x73, 0x6d, 0x61, 0x32, 0x30, 0x30, 0x1a, 0x4e, 0x0a, 0x04,
	0x4d, 0x61, 0x63, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x02, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x02, 0x52, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x1a, 0x4b, 0x0a, 0x05,
	0x42, 0x62, 0x61, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x70, 0x70, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x02, 0x52, 0x05, 0x75, 0x70, 0x70, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x02, 0x52, 0x06, 0x6d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x02, 0x52, 0x05, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x2a, 0xb6, 0x01, 0x0a, 0x09, 0x49, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x61, 0x63, 0x64, 0x10,
	0x00, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x73, 0x69, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x62,
	0x76, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x64, 0x78, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04,
	0x42, 0x65, 0x74, 0x61, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x74, 0x72, 0x10, 0x05, 0x12,
	0x09, 0x0a, 0x05, 0x42, 0x62, 0x61, 0x6e, 0x64, 0x10, 0x06, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x6d,
	0x61, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x52, 0x65, 0x67,
	0x10, 0x08, 0x12, 0x09, 0x0a, 0x05, 0x57, 0x69, 0x6c, 0x6c, 0x52, 0x10, 0x09, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x74, 0x64, 0x44, 0x65, 0x76, 0x10, 0x0a, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x6d, 0x61,
	0x31, 0x30, 0x10, 0x0b, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x6d, 0x61, 0x32, 0x30, 0x10, 0x0c, 0x12,
	0x09, 0x0a, 0x05, 0x53, 0x6d, 0x61, 0x35, 0x30, 0x10, 0x0d, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x6d,
	0x61, 0x31, 0x30, 0x30, 0x10, 0x0e, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x6d, 0x61, 0x32, 0x30, 0x30,
	0x10, 0x0f, 0x32, 0x96, 0x06, 0x0a, 0x06, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x61, 0x0a,
	0x07, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x1f, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x71, 0x75, 0x6f, 0x74,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x71,
	0x75, 0x6f, 0x74, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x3a, 0x01, 0x2a,
	0x12, 0x64, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x20, 0x2e, 0x71,
	0x75, 0x6f, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x13,
	0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x3a, 0x01, 0x2a, 0x12, 0x6e, 0x0a, 0x08, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74,
	0x72, 0x79, 0x12, 0x20, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x51,
	0x75, 0x6f, 0x74, 0x65, 0x73, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x28, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x22, 0x22, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73,
	0x2f, 0x7b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x7d, 0x2f, 0x69, 0x6e, 0x64, 0x75, 0x73,
	0x74, 0x72, 0x79, 0x3a, 0x01, 0x2a, 0x12, 0x64, 0x0a, 0x08, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x20, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x51,
	0x75, 0x6f, 0x74, 0x65, 0x73, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x18, 0x22, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73,
	0x2f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x61, 0x0a, 0x07,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1f, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75,
	0x6f, 0x74, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x3a, 0x01, 0x2a, 0x12,
	0x5b, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x6f,
	0x74, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x3a, 0x01, 0x2a, 0x12, 0x61, 0x0a, 0x07,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75,
	0x6f, 0x74, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x01, 0x2a, 0x12,
	0x4a, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x10, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x0a, 0x12, 0x08, 0x2f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x7a, 0x42, 0x46, 0x0a, 0x18, 0x64,
	0x65, 0x76, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x71, 0x75,
	0x6f, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x0d, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x56, 0x31, 0x50, 0x01, 0x5a, 0x19, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x2f, 0x76, 0x31,
	0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_quotes_v1_quotes_proto_rawDescOnce sync.Once
	file_proto_quotes_v1_quotes_proto_rawDescData = file_proto_quotes_v1_quotes_proto_rawDesc
)

func file_proto_quotes_v1_quotes_proto_rawDescGZIP() []byte {
	file_proto_quotes_v1_quotes_proto_rawDescOnce.Do(func() {
		file_proto_quotes_v1_quotes_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_quotes_v1_quotes_proto_rawDescData)
	})
	return file_proto_quotes_v1_quotes_proto_rawDescData
}

var file_proto_quotes_v1_quotes_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_quotes_v1_quotes_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_proto_quotes_v1_quotes_proto_goTypes = []interface{}{
	(Indicator)(0),                       // 0: quotes.v1.Indicator
	(Date_Interval)(0),                   // 1: quotes.v1.Date.Interval
	(*Date)(nil),                         // 2: quotes.v1.Date
	(*QuotesCompanyRequest)(nil),         // 3: quotes.v1.QuotesCompanyRequest
	(*QuotesCurrencyRequest)(nil),        // 4: quotes.v1.QuotesCurrencyRequest
	(*QuotesIndustryRequest)(nil),        // 5: quotes.v1.QuotesIndustryRequest
	(*QuotesExchangeRequest)(nil),        // 6: quotes.v1.QuotesExchangeRequest
	(*QuotesCountryRequest)(nil),         // 7: quotes.v1.QuotesCountryRequest
	(*QuotesIndexRequest)(nil),           // 8: quotes.v1.QuotesIndexRequest
	(*QuotesAccountRequest)(nil),         // 9: quotes.v1.QuotesAccountRequest
	(*QuotesReply)(nil),                  // 10: quotes.v1.QuotesReply
	(*QuotesReply_Indicators)(nil),       // 11: quotes.v1.QuotesReply.Indicators
	(*QuotesReply_Indicators_Macd)(nil),  // 12: quotes.v1.QuotesReply.Indicators.Macd
	(*QuotesReply_Indicators_Bband)(nil), // 13: quotes.v1.QuotesReply.Indicators.Bband
	(*emptypb.Empty)(nil),                // 14: google.protobuf.Empty
}
var file_proto_quotes_v1_quotes_proto_depIdxs = []int32{
	1,  // 0: quotes.v1.Date.interval:type_name -> quotes.v1.Date.Interval
	0,  // 1: quotes.v1.QuotesCompanyRequest.indicators:type_name -> quotes.v1.Indicator
	2,  // 2: quotes.v1.QuotesCompanyRequest.date:type_name -> quotes.v1.Date
	0,  // 3: quotes.v1.QuotesCurrencyRequest.indicators:type_name -> quotes.v1.Indicator
	2,  // 4: quotes.v1.QuotesCurrencyRequest.date:type_name -> quotes.v1.Date
	0,  // 5: quotes.v1.QuotesIndustryRequest.indicators:type_name -> quotes.v1.Indicator
	2,  // 6: quotes.v1.QuotesIndustryRequest.date:type_name -> quotes.v1.Date
	0,  // 7: quotes.v1.QuotesExchangeRequest.indicators:type_name -> quotes.v1.Indicator
	2,  // 8: quotes.v1.QuotesExchangeRequest.date:type_name -> quotes.v1.Date
	0,  // 9: quotes.v1.QuotesCountryRequest.indicators:type_name -> quotes.v1.Indicator
	2,  // 10: quotes.v1.QuotesCountryRequest.date:type_name -> quotes.v1.Date
	0,  // 11: quotes.v1.QuotesIndexRequest.indicators:type_name -> quotes.v1.Indicator
	2,  // 12: quotes.v1.QuotesIndexRequest.date:type_name -> quotes.v1.Date
	0,  // 13: quotes.v1.QuotesAccountRequest.indicators:type_name -> quotes.v1.Indicator
	2,  // 14: quotes.v1.QuotesAccountRequest.date:type_name -> quotes.v1.Date
	11, // 15: quotes.v1.QuotesReply.indicators:type_name -> quotes.v1.QuotesReply.Indicators
	12, // 16: quotes.v1.QuotesReply.Indicators.macd:type_name -> quotes.v1.QuotesReply.Indicators.Macd
	13, // 17: quotes.v1.QuotesReply.Indicators.bband:type_name -> quotes.v1.QuotesReply.Indicators.Bband
	3,  // 18: quotes.v1.Quotes.Company:input_type -> quotes.v1.QuotesCompanyRequest
	4,  // 19: quotes.v1.Quotes.Currency:input_type -> quotes.v1.QuotesCurrencyRequest
	5,  // 20: quotes.v1.Quotes.Industry:input_type -> quotes.v1.QuotesIndustryRequest
	6,  // 21: quotes.v1.Quotes.Exchange:input_type -> quotes.v1.QuotesExchangeRequest
	7,  // 22: quotes.v1.Quotes.Country:input_type -> quotes.v1.QuotesCountryRequest
	8,  // 23: quotes.v1.Quotes.Index:input_type -> quotes.v1.QuotesIndexRequest
	9,  // 24: quotes.v1.Quotes.Account:input_type -> quotes.v1.QuotesAccountRequest
	14, // 25: quotes.v1.Quotes.Health:input_type -> google.protobuf.Empty
	10, // 26: quotes.v1.Quotes.Company:output_type -> quotes.v1.QuotesReply
	10, // 27: quotes.v1.Quotes.Currency:output_type -> quotes.v1.QuotesReply
	10, // 28: quotes.v1.Quotes.Industry:output_type -> quotes.v1.QuotesReply
	10, // 29: quotes.v1.Quotes.Exchange:output_type -> quotes.v1.QuotesReply
	10, // 30: quotes.v1.Quotes.Country:output_type -> quotes.v1.QuotesReply
	10, // 31: quotes.v1.Quotes.Index:output_type -> quotes.v1.QuotesReply
	10, // 32: quotes.v1.Quotes.Account:output_type -> quotes.v1.QuotesReply
	14, // 33: quotes.v1.Quotes.Health:output_type -> google.protobuf.Empty
	26, // [26:34] is the sub-list for method output_type
	18, // [18:26] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_proto_quotes_v1_quotes_proto_init() }
func file_proto_quotes_v1_quotes_proto_init() {
	if File_proto_quotes_v1_quotes_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_quotes_v1_quotes_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Date); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_quotes_v1_quotes_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuotesCompanyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_quotes_v1_quotes_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuotesCurrencyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_quotes_v1_quotes_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuotesIndustryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_quotes_v1_quotes_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuotesExchangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_quotes_v1_quotes_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuotesCountryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_quotes_v1_quotes_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuotesIndexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_quotes_v1_quotes_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuotesAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_quotes_v1_quotes_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuotesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_quotes_v1_quotes_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuotesReply_Indicators); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_quotes_v1_quotes_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuotesReply_Indicators_Macd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_quotes_v1_quotes_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuotesReply_Indicators_Bband); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_quotes_v1_quotes_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_quotes_v1_quotes_proto_goTypes,
		DependencyIndexes: file_proto_quotes_v1_quotes_proto_depIdxs,
		EnumInfos:         file_proto_quotes_v1_quotes_proto_enumTypes,
		MessageInfos:      file_proto_quotes_v1_quotes_proto_msgTypes,
	}.Build()
	File_proto_quotes_v1_quotes_proto = out.File
	file_proto_quotes_v1_quotes_proto_rawDesc = nil
	file_proto_quotes_v1_quotes_proto_goTypes = nil
	file_proto_quotes_v1_quotes_proto_depIdxs = nil
}
