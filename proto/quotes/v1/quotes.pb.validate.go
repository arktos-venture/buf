// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/quotes/v1/quotes.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Date with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Date) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Date with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in DateMultiError, or nil if none found.
func (m *Date) ValidateAll() error {
	return m.validate(true)
}

func (m *Date) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := Date_Interval_name[int32(m.GetInterval())]; !ok {
		err := DateValidationError{
			field:  "Interval",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _Date_Period_InLookup[m.GetPeriod()]; !ok {
		err := DateValidationError{
			field:  "Period",
			reason: "value must be in list [last 3d 1w 2w 1m 2m 3m 6m 1y 2y 3y 5y 10y 20y 30y]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DateMultiError(errors)
	}
	return nil
}

// DateMultiError is an error wrapping multiple validation errors returned by
// Date.ValidateAll() if the designated constraints aren't met.
type DateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DateMultiError) AllErrors() []error { return m }

// DateValidationError is the validation error returned by Date.Validate if the
// designated constraints aren't met.
type DateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DateValidationError) ErrorName() string { return "DateValidationError" }

// Error satisfies the builtin error interface
func (e DateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DateValidationError{}

var _Date_Period_InLookup = map[string]struct{}{
	"last": {},
	"3d":   {},
	"1w":   {},
	"2w":   {},
	"1m":   {},
	"2m":   {},
	"3m":   {},
	"6m":   {},
	"1y":   {},
	"2y":   {},
	"3y":   {},
	"5y":   {},
	"10y":  {},
	"20y":  {},
	"30y":  {},
}

// Validate checks the field values on QuotesCompanyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QuotesCompanyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuotesCompanyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QuotesCompanyRequestMultiError, or nil if none found.
func (m *QuotesCompanyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QuotesCompanyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetTicker()); l < 1 || l > 8 {
		err := QuotesCompanyRequestValidationError{
			field:  "Ticker",
			reason: "value length must be between 1 and 8 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _QuotesCompanyRequest_Exchange_InLookup[m.GetExchange()]; !ok {
		err := QuotesCompanyRequestValidationError{
			field:  "Exchange",
			reason: "value must be in list [NASDAQ NYSE TO LSE PA BR AS SG SHE SHG HK]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCurrency()) != 3 {
		err := QuotesCompanyRequestValidationError{
			field:  "Currency",
			reason: "value length must be 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if all {
		switch v := interface{}(m.GetDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QuotesCompanyRequestValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QuotesCompanyRequestValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QuotesCompanyRequestValidationError{
				field:  "Date",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QuotesCompanyRequestMultiError(errors)
	}
	return nil
}

// QuotesCompanyRequestMultiError is an error wrapping multiple validation
// errors returned by QuotesCompanyRequest.ValidateAll() if the designated
// constraints aren't met.
type QuotesCompanyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuotesCompanyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuotesCompanyRequestMultiError) AllErrors() []error { return m }

// QuotesCompanyRequestValidationError is the validation error returned by
// QuotesCompanyRequest.Validate if the designated constraints aren't met.
type QuotesCompanyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuotesCompanyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuotesCompanyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuotesCompanyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuotesCompanyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuotesCompanyRequestValidationError) ErrorName() string {
	return "QuotesCompanyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QuotesCompanyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuotesCompanyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuotesCompanyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuotesCompanyRequestValidationError{}

var _QuotesCompanyRequest_Exchange_InLookup = map[string]struct{}{
	"NASDAQ": {},
	"NYSE":   {},
	"TO":     {},
	"LSE":    {},
	"PA":     {},
	"BR":     {},
	"AS":     {},
	"SG":     {},
	"SHE":    {},
	"SHG":    {},
	"HK":     {},
}

// Validate checks the field values on QuotesCurrencyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QuotesCurrencyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuotesCurrencyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QuotesCurrencyRequestMultiError, or nil if none found.
func (m *QuotesCurrencyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QuotesCurrencyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetTicker()); l < 1 || l > 8 {
		err := QuotesCurrencyRequestValidationError{
			field:  "Ticker",
			reason: "value length must be between 1 and 8 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QuotesCurrencyRequestValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QuotesCurrencyRequestValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QuotesCurrencyRequestValidationError{
				field:  "Date",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QuotesCurrencyRequestMultiError(errors)
	}
	return nil
}

// QuotesCurrencyRequestMultiError is an error wrapping multiple validation
// errors returned by QuotesCurrencyRequest.ValidateAll() if the designated
// constraints aren't met.
type QuotesCurrencyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuotesCurrencyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuotesCurrencyRequestMultiError) AllErrors() []error { return m }

// QuotesCurrencyRequestValidationError is the validation error returned by
// QuotesCurrencyRequest.Validate if the designated constraints aren't met.
type QuotesCurrencyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuotesCurrencyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuotesCurrencyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuotesCurrencyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuotesCurrencyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuotesCurrencyRequestValidationError) ErrorName() string {
	return "QuotesCurrencyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QuotesCurrencyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuotesCurrencyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuotesCurrencyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuotesCurrencyRequestValidationError{}

// Validate checks the field values on QuotesIndustryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QuotesIndustryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuotesIndustryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QuotesIndustryRequestMultiError, or nil if none found.
func (m *QuotesIndustryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QuotesIndustryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetCountry()) != 2 {
		err := QuotesIndustryRequestValidationError{
			field:  "Country",
			reason: "value length must be 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if val := m.GetIndustry(); val < 5010101010 || val > 6310301010 {
		err := QuotesIndustryRequestValidationError{
			field:  "Industry",
			reason: "value must be inside range [5010101010, 6310301010]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QuotesIndustryRequestValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QuotesIndustryRequestValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QuotesIndustryRequestValidationError{
				field:  "Date",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QuotesIndustryRequestMultiError(errors)
	}
	return nil
}

// QuotesIndustryRequestMultiError is an error wrapping multiple validation
// errors returned by QuotesIndustryRequest.ValidateAll() if the designated
// constraints aren't met.
type QuotesIndustryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuotesIndustryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuotesIndustryRequestMultiError) AllErrors() []error { return m }

// QuotesIndustryRequestValidationError is the validation error returned by
// QuotesIndustryRequest.Validate if the designated constraints aren't met.
type QuotesIndustryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuotesIndustryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuotesIndustryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuotesIndustryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuotesIndustryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuotesIndustryRequestValidationError) ErrorName() string {
	return "QuotesIndustryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QuotesIndustryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuotesIndustryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuotesIndustryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuotesIndustryRequestValidationError{}

// Validate checks the field values on QuotesExchangeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QuotesExchangeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuotesExchangeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QuotesExchangeRequestMultiError, or nil if none found.
func (m *QuotesExchangeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QuotesExchangeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _QuotesExchangeRequest_Exchange_InLookup[m.GetExchange()]; !ok {
		err := QuotesExchangeRequestValidationError{
			field:  "Exchange",
			reason: "value must be in list [NASDAQ NYSE TO LSE PA BR AS SG SHE SHG HK]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCountry()) != 2 {
		err := QuotesExchangeRequestValidationError{
			field:  "Country",
			reason: "value length must be 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if all {
		switch v := interface{}(m.GetDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QuotesExchangeRequestValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QuotesExchangeRequestValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QuotesExchangeRequestValidationError{
				field:  "Date",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QuotesExchangeRequestMultiError(errors)
	}
	return nil
}

// QuotesExchangeRequestMultiError is an error wrapping multiple validation
// errors returned by QuotesExchangeRequest.ValidateAll() if the designated
// constraints aren't met.
type QuotesExchangeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuotesExchangeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuotesExchangeRequestMultiError) AllErrors() []error { return m }

// QuotesExchangeRequestValidationError is the validation error returned by
// QuotesExchangeRequest.Validate if the designated constraints aren't met.
type QuotesExchangeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuotesExchangeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuotesExchangeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuotesExchangeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuotesExchangeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuotesExchangeRequestValidationError) ErrorName() string {
	return "QuotesExchangeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QuotesExchangeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuotesExchangeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuotesExchangeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuotesExchangeRequestValidationError{}

var _QuotesExchangeRequest_Exchange_InLookup = map[string]struct{}{
	"NASDAQ": {},
	"NYSE":   {},
	"TO":     {},
	"LSE":    {},
	"PA":     {},
	"BR":     {},
	"AS":     {},
	"SG":     {},
	"SHE":    {},
	"SHG":    {},
	"HK":     {},
}

// Validate checks the field values on QuotesCountryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QuotesCountryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuotesCountryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QuotesCountryRequestMultiError, or nil if none found.
func (m *QuotesCountryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QuotesCountryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetCountry()) != 2 {
		err := QuotesCountryRequestValidationError{
			field:  "Country",
			reason: "value length must be 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if all {
		switch v := interface{}(m.GetDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QuotesCountryRequestValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QuotesCountryRequestValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QuotesCountryRequestValidationError{
				field:  "Date",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QuotesCountryRequestMultiError(errors)
	}
	return nil
}

// QuotesCountryRequestMultiError is an error wrapping multiple validation
// errors returned by QuotesCountryRequest.ValidateAll() if the designated
// constraints aren't met.
type QuotesCountryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuotesCountryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuotesCountryRequestMultiError) AllErrors() []error { return m }

// QuotesCountryRequestValidationError is the validation error returned by
// QuotesCountryRequest.Validate if the designated constraints aren't met.
type QuotesCountryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuotesCountryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuotesCountryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuotesCountryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuotesCountryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuotesCountryRequestValidationError) ErrorName() string {
	return "QuotesCountryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QuotesCountryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuotesCountryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuotesCountryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuotesCountryRequestValidationError{}

// Validate checks the field values on QuotesIndexRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QuotesIndexRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuotesIndexRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QuotesIndexRequestMultiError, or nil if none found.
func (m *QuotesIndexRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QuotesIndexRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetIndex()); l < 3 || l > 32 {
		err := QuotesIndexRequestValidationError{
			field:  "Index",
			reason: "value length must be between 3 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QuotesIndexRequestValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QuotesIndexRequestValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QuotesIndexRequestValidationError{
				field:  "Date",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QuotesIndexRequestMultiError(errors)
	}
	return nil
}

// QuotesIndexRequestMultiError is an error wrapping multiple validation errors
// returned by QuotesIndexRequest.ValidateAll() if the designated constraints
// aren't met.
type QuotesIndexRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuotesIndexRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuotesIndexRequestMultiError) AllErrors() []error { return m }

// QuotesIndexRequestValidationError is the validation error returned by
// QuotesIndexRequest.Validate if the designated constraints aren't met.
type QuotesIndexRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuotesIndexRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuotesIndexRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuotesIndexRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuotesIndexRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuotesIndexRequestValidationError) ErrorName() string {
	return "QuotesIndexRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QuotesIndexRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuotesIndexRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuotesIndexRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuotesIndexRequestValidationError{}

// Validate checks the field values on QuotesAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QuotesAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuotesAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QuotesAccountRequestMultiError, or nil if none found.
func (m *QuotesAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QuotesAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetAccount()); l < 3 || l > 16 {
		err := QuotesAccountRequestValidationError{
			field:  "Account",
			reason: "value length must be between 3 and 16 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QuotesAccountRequestValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QuotesAccountRequestValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QuotesAccountRequestValidationError{
				field:  "Date",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QuotesAccountRequestMultiError(errors)
	}
	return nil
}

// QuotesAccountRequestMultiError is an error wrapping multiple validation
// errors returned by QuotesAccountRequest.ValidateAll() if the designated
// constraints aren't met.
type QuotesAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuotesAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuotesAccountRequestMultiError) AllErrors() []error { return m }

// QuotesAccountRequestValidationError is the validation error returned by
// QuotesAccountRequest.Validate if the designated constraints aren't met.
type QuotesAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuotesAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuotesAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuotesAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuotesAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuotesAccountRequestValidationError) ErrorName() string {
	return "QuotesAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QuotesAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuotesAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuotesAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuotesAccountRequestValidationError{}

// Validate checks the field values on QuotesReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QuotesReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuotesReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QuotesReplyMultiError, or
// nil if none found.
func (m *QuotesReply) ValidateAll() error {
	return m.validate(true)
}

func (m *QuotesReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return QuotesReplyMultiError(errors)
	}
	return nil
}

// QuotesReplyMultiError is an error wrapping multiple validation errors
// returned by QuotesReply.ValidateAll() if the designated constraints aren't met.
type QuotesReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuotesReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuotesReplyMultiError) AllErrors() []error { return m }

// QuotesReplyValidationError is the validation error returned by
// QuotesReply.Validate if the designated constraints aren't met.
type QuotesReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuotesReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuotesReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuotesReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuotesReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuotesReplyValidationError) ErrorName() string { return "QuotesReplyValidationError" }

// Error satisfies the builtin error interface
func (e QuotesReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuotesReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuotesReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuotesReplyValidationError{}
