syntax = "proto3";

package quotes.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "validate/validate.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/arktos-venture/buf/proto/quotes/v1;quotes_v1";
option java_multiple_files = true;
option java_package = "dev.kratos.api.quotes.v1";
option java_outer_classname = "APIQuotesProtoV1";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
	info: {
    title: "Quotes APIs";
    description: "Quotes APIs";
    version: "1.0";
    contact: {
      name: "Arktos Venture project";
      url: "https://github.com/arktos-venture/buf";
      email: "oss@arktos-consulting.cloud";
    };
  };
	schemes: [HTTP, HTTPS];
	consumes: "application/json";
	produces: "application/json";
	security_definitions: {
	  security: {
			key: "bearer"
			value: {
		  		type: TYPE_API_KEY
		  		in: IN_HEADER
		  		name: "Authorization"
		  		description: "Authentication token, prefixed by Bearer: Bearer <token>"
			}
	  }
	}
	security: {
	  security_requirement: {
			key: "bearer"
	  }
	}
};

service Quotes {
  rpc Last (QuotesLastRequest) returns (QuotesLastReply)  {
    option (google.api.http) = {
      get: "/v1/quotes/{exchange}/{ticker}"
    };
  }

  rpc Search (QuotesRequest) returns (QuotesReply)  {
    option (google.api.http) = {
      post: "/v1/quotes"
      body: "*"
    };
  }
}

// 
// Request
// 

enum TSDB {
  Companies = 0;
  Forexes = 1;
  Indices = 2;
  Indexes = 3;
  Accounts = 4;
}

enum Interval {
  d = 0;
  w = 1;
  m = 2;
  y = 3;
}

enum Operator {
	Equal = 0;
	Greater = 1;
	GreaterEqual = 2;
	Less = 3;
	LessEqual = 4;
}

enum Argument {
	Ticker = 0;
	Exchange = 1;
  Time = 2;
}

message Filter {
	Operator operator = 1 [(validate.rules).enum = {defined_only: true}];
	Argument argument = 2 [(validate.rules).enum = {defined_only: true}];
	string value = 3;
}

message QuotesRequest {
  TSDB tsdb = 1 [(validate.rules).enum = {defined_only: true}];
  Interval interval = 2 [(validate.rules).enum = {defined_only: true}];
	repeated Filter filters = 3 [(validate.rules).repeated.min_items = 1, (validate.rules).repeated.max_items = 20];
}

message QuotesLastRequest {
  TSDB tsdb = 1 [(validate.rules).enum = {defined_only: true}];
	string exchange = 2;
	string ticker = 3;
}


// 
// Reply
// 

message QuotesReply {
	repeated float open = 1;
	repeated float close = 2;
	repeated float low = 3;
	repeated float high = 4;
	repeated float volume = 5;
	repeated google.protobuf.Timestamp created_at = 7;
}

message QuotesLastReply {
	float open = 1;
	float close = 2;
	float low = 3;
	float high = 4;
	float volume = 5;
	google.protobuf.Timestamp created_at = 7;
}