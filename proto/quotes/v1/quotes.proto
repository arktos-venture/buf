syntax = "proto3";

package quotes.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "validate/validate.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "proto/screener/v1/screener.proto";

option go_package = "github.com/arktos-venture/buf/proto/quotes/v1;quotes_v1";
option java_multiple_files = true;
option java_package = "dev.kratos.api.quotes.v1";
option java_outer_classname = "APIQuotesProtoV1";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
	info: {
		title: "Quotes APIs";
		description: "Quotes APIs";
		version: "1.0";
		contact: {
			name: "Arktos Venture project";
			url: "https://github.com/arktos-venture/buf";
			email: "oss@arktos-consulting.cloud";
		};
  	};
	schemes: [HTTP, HTTPS];
	consumes: "application/json";
	produces: "application/json";
	security_definitions: {
	  	security: {
			key: "bearer"
			value: {
		  		type: TYPE_API_KEY
		  		in: IN_HEADER
		  		name: "Authorization"
		  		description: "Authentication token, prefixed by Bearer: Bearer <token>"
			}
	  	}
	}
	security: {
	  	security_requirement: {
			key: "bearer"
	  	}
	}
};

service Quotes {
	// Public API
	// Get Last Quotes for one ticker
	rpc Last (QuoteLastRequest) returns (QuoteLastReply)  {
		option (google.api.http) = {
			get: "/v1/quotes/{exchange}/{ticker}"
		};
	}

	// Public API
	// Search Quotes by dates
	rpc Search (QuoteRequest) returns (QuoteReply)  {
		option (google.api.http) = {
			post: "/v1/quotes"
			body: "*"
		};
	}

	// Private API
	// Delete Quotes
	rpc Delete (QuoteDeleteRequest) returns (QuoteDelete)  {
		option (google.api.http) = {
			delete: "/v1/quotes"
		};
	}
}

// 
// Request
// 

enum TSDB {
	Companies = 0;
	Forexes = 1;
	Indices = 2;
	Indexes = 3;
	Accounts = 4;
}

enum Interval {
	d = 0;
	w = 1;
	m = 2;
	q = 3;
	y = 4;
}

message QuoteRequest {
  	TSDB tsdb = 1 [(validate.rules).enum = {defined_only: true}];
  	Interval interval = 2 [(validate.rules).enum = {defined_only: true}];
	repeated screener.v1.Filter filters = 3 [(validate.rules).repeated.min_items = 1, (validate.rules).repeated.max_items = 20];
}

message QuoteLastRequest {
  	TSDB tsdb = 1 [(validate.rules).enum = {defined_only: true}];
	string exchange = 2;
	string ticker = 3;
}

message QuoteDeleteRequest {
	TSDB tsdb = 1 [(validate.rules).enum = {defined_only: true}];
	repeated string exchanges = 2;
	repeated string tickers = 3;
}


// 
// Reply
// 

message QuoteReply {
	repeated float open = 1;
	repeated float close = 2;
	repeated float low = 3;
	repeated float high = 4;
	repeated float volume = 5;
	repeated google.protobuf.Timestamp created_at = 7;
}

message QuoteLastReply {
	float open = 1;
	float close = 2;
	float low = 3;
	float high = 4;
	float volume = 5;
	google.protobuf.Timestamp created_at = 7;
}

message QuoteDelete {
	int64 total = 1;
}