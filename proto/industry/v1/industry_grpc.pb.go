// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IndustryClient is the client API for Industry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IndustryClient interface {
	Get(ctx context.Context, in *IndustryRequest, opts ...grpc.CallOption) (*IndustryReply, error)
	List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*IndustryReply, error)
	Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type industryClient struct {
	cc grpc.ClientConnInterface
}

func NewIndustryClient(cc grpc.ClientConnInterface) IndustryClient {
	return &industryClient{cc}
}

func (c *industryClient) Get(ctx context.Context, in *IndustryRequest, opts ...grpc.CallOption) (*IndustryReply, error) {
	out := new(IndustryReply)
	err := c.cc.Invoke(ctx, "/industry.v1.Industry/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *industryClient) List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*IndustryReply, error) {
	out := new(IndustryReply)
	err := c.cc.Invoke(ctx, "/industry.v1.Industry/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *industryClient) Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/industry.v1.Industry/Health", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IndustryServer is the server API for Industry service.
// All implementations must embed UnimplementedIndustryServer
// for forward compatibility
type IndustryServer interface {
	Get(context.Context, *IndustryRequest) (*IndustryReply, error)
	List(context.Context, *emptypb.Empty) (*IndustryReply, error)
	Health(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedIndustryServer()
}

// UnimplementedIndustryServer must be embedded to have forward compatible implementations.
type UnimplementedIndustryServer struct {
}

func (UnimplementedIndustryServer) Get(context.Context, *IndustryRequest) (*IndustryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedIndustryServer) List(context.Context, *emptypb.Empty) (*IndustryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedIndustryServer) Health(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedIndustryServer) mustEmbedUnimplementedIndustryServer() {}

// UnsafeIndustryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IndustryServer will
// result in compilation errors.
type UnsafeIndustryServer interface {
	mustEmbedUnimplementedIndustryServer()
}

func RegisterIndustryServer(s grpc.ServiceRegistrar, srv IndustryServer) {
	s.RegisterService(&Industry_ServiceDesc, srv)
}

func _Industry_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndustryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndustryServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/industry.v1.Industry/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndustryServer).Get(ctx, req.(*IndustryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Industry_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndustryServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/industry.v1.Industry/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndustryServer).List(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Industry_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndustryServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/industry.v1.Industry/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndustryServer).Health(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Industry_ServiceDesc is the grpc.ServiceDesc for Industry service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Industry_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "industry.v1.Industry",
	HandlerType: (*IndustryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Industry_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Industry_List_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _Industry_Health_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/industry/v1/industry.proto",
}
