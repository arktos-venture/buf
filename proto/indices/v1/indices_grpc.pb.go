// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package indices_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IndicesClient is the client API for Indices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IndicesClient interface {
	// Public API
	// Get Indice properties
	Get(ctx context.Context, in *IndiceRequest, opts ...grpc.CallOption) (*IndiceReply, error)
	// Public API
	// List Indices available
	List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*IndiceShortReplies, error)
	// Private API
	// Create Indice properties
	Create(ctx context.Context, in *IndiceModifyRequest, opts ...grpc.CallOption) (*IndiceReply, error)
	// Private API
	// Update Indice properties
	Update(ctx context.Context, in *IndiceModifyRequest, opts ...grpc.CallOption) (*IndiceReply, error)
	// Private API
	// Delete Indices
	Delete(ctx context.Context, in *IndiceDeleteRequest, opts ...grpc.CallOption) (*IndiceDelete, error)
}

type indicesClient struct {
	cc grpc.ClientConnInterface
}

func NewIndicesClient(cc grpc.ClientConnInterface) IndicesClient {
	return &indicesClient{cc}
}

func (c *indicesClient) Get(ctx context.Context, in *IndiceRequest, opts ...grpc.CallOption) (*IndiceReply, error) {
	out := new(IndiceReply)
	err := c.cc.Invoke(ctx, "/indices.v1.Indices/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indicesClient) List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*IndiceShortReplies, error) {
	out := new(IndiceShortReplies)
	err := c.cc.Invoke(ctx, "/indices.v1.Indices/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indicesClient) Create(ctx context.Context, in *IndiceModifyRequest, opts ...grpc.CallOption) (*IndiceReply, error) {
	out := new(IndiceReply)
	err := c.cc.Invoke(ctx, "/indices.v1.Indices/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indicesClient) Update(ctx context.Context, in *IndiceModifyRequest, opts ...grpc.CallOption) (*IndiceReply, error) {
	out := new(IndiceReply)
	err := c.cc.Invoke(ctx, "/indices.v1.Indices/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indicesClient) Delete(ctx context.Context, in *IndiceDeleteRequest, opts ...grpc.CallOption) (*IndiceDelete, error) {
	out := new(IndiceDelete)
	err := c.cc.Invoke(ctx, "/indices.v1.Indices/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IndicesServer is the server API for Indices service.
// All implementations must embed UnimplementedIndicesServer
// for forward compatibility
type IndicesServer interface {
	// Public API
	// Get Indice properties
	Get(context.Context, *IndiceRequest) (*IndiceReply, error)
	// Public API
	// List Indices available
	List(context.Context, *emptypb.Empty) (*IndiceShortReplies, error)
	// Private API
	// Create Indice properties
	Create(context.Context, *IndiceModifyRequest) (*IndiceReply, error)
	// Private API
	// Update Indice properties
	Update(context.Context, *IndiceModifyRequest) (*IndiceReply, error)
	// Private API
	// Delete Indices
	Delete(context.Context, *IndiceDeleteRequest) (*IndiceDelete, error)
	mustEmbedUnimplementedIndicesServer()
}

// UnimplementedIndicesServer must be embedded to have forward compatible implementations.
type UnimplementedIndicesServer struct {
}

func (UnimplementedIndicesServer) Get(context.Context, *IndiceRequest) (*IndiceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedIndicesServer) List(context.Context, *emptypb.Empty) (*IndiceShortReplies, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedIndicesServer) Create(context.Context, *IndiceModifyRequest) (*IndiceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedIndicesServer) Update(context.Context, *IndiceModifyRequest) (*IndiceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedIndicesServer) Delete(context.Context, *IndiceDeleteRequest) (*IndiceDelete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedIndicesServer) mustEmbedUnimplementedIndicesServer() {}

// UnsafeIndicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IndicesServer will
// result in compilation errors.
type UnsafeIndicesServer interface {
	mustEmbedUnimplementedIndicesServer()
}

func RegisterIndicesServer(s grpc.ServiceRegistrar, srv IndicesServer) {
	s.RegisterService(&Indices_ServiceDesc, srv)
}

func _Indices_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndicesServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indices.v1.Indices/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndicesServer).Get(ctx, req.(*IndiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indices_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndicesServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indices.v1.Indices/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndicesServer).List(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indices_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndiceModifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndicesServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indices.v1.Indices/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndicesServer).Create(ctx, req.(*IndiceModifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indices_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndiceModifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndicesServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indices.v1.Indices/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndicesServer).Update(ctx, req.(*IndiceModifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indices_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndiceDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndicesServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indices.v1.Indices/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndicesServer).Delete(ctx, req.(*IndiceDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Indices_ServiceDesc is the grpc.ServiceDesc for Indices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Indices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "indices.v1.Indices",
	HandlerType: (*IndicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Indices_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Indices_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Indices_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Indices_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Indices_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/indices/v1/indices.proto",
}
