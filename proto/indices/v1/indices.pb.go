// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: proto/indices/v1/indices.proto

package v1Indices

import (
	v12 "github.com/arktos-venture/buf/proto/companies/v1"
	v11 "github.com/arktos-venture/buf/proto/quotes/v1"
	v1 "github.com/arktos-venture/buf/proto/screener/v1"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IndiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticker string `protobuf:"bytes,1,opt,name=ticker,proto3" json:"ticker,omitempty"`
}

func (x *IndiceRequest) Reset() {
	*x = IndiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_indices_v1_indices_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndiceRequest) ProtoMessage() {}

func (x *IndiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_indices_v1_indices_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndiceRequest.ProtoReflect.Descriptor instead.
func (*IndiceRequest) Descriptor() ([]byte, []int) {
	return file_proto_indices_v1_indices_proto_rawDescGZIP(), []int{0}
}

func (x *IndiceRequest) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

type IndiceSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchanges []string `protobuf:"bytes,1,rep,name=exchanges,proto3" json:"exchanges,omitempty"`
}

func (x *IndiceSearchRequest) Reset() {
	*x = IndiceSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_indices_v1_indices_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndiceSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndiceSearchRequest) ProtoMessage() {}

func (x *IndiceSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_indices_v1_indices_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndiceSearchRequest.ProtoReflect.Descriptor instead.
func (*IndiceSearchRequest) Descriptor() ([]byte, []int) {
	return file_proto_indices_v1_indices_proto_rawDescGZIP(), []int{1}
}

func (x *IndiceSearchRequest) GetExchanges() []string {
	if x != nil {
		return x.Exchanges
	}
	return nil
}

type IndiceModifyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticker      string   `protobuf:"bytes,1,opt,name=ticker,proto3" json:"ticker,omitempty"`
	Description string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Exchange    string   `protobuf:"bytes,3,opt,name=exchange,proto3" json:"exchange,omitempty"`
	Index       string   `protobuf:"bytes,4,opt,name=index,proto3" json:"index,omitempty"`
	Asset       v1.Asset `protobuf:"varint,5,opt,name=asset,proto3,enum=screener.v1.Asset" json:"asset,omitempty"`
}

func (x *IndiceModifyRequest) Reset() {
	*x = IndiceModifyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_indices_v1_indices_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndiceModifyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndiceModifyRequest) ProtoMessage() {}

func (x *IndiceModifyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_indices_v1_indices_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndiceModifyRequest.ProtoReflect.Descriptor instead.
func (*IndiceModifyRequest) Descriptor() ([]byte, []int) {
	return file_proto_indices_v1_indices_proto_rawDescGZIP(), []int{2}
}

func (x *IndiceModifyRequest) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *IndiceModifyRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *IndiceModifyRequest) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *IndiceModifyRequest) GetIndex() string {
	if x != nil {
		return x.Index
	}
	return ""
}

func (x *IndiceModifyRequest) GetAsset() v1.Asset {
	if x != nil {
		return x.Asset
	}
	return v1.Asset(0)
}

type IndiceDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tickers   []string `protobuf:"bytes,1,rep,name=tickers,proto3" json:"tickers,omitempty"`
	Exchanges []string `protobuf:"bytes,2,rep,name=exchanges,proto3" json:"exchanges,omitempty"`
}

func (x *IndiceDeleteRequest) Reset() {
	*x = IndiceDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_indices_v1_indices_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndiceDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndiceDeleteRequest) ProtoMessage() {}

func (x *IndiceDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_indices_v1_indices_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndiceDeleteRequest.ProtoReflect.Descriptor instead.
func (*IndiceDeleteRequest) Descriptor() ([]byte, []int) {
	return file_proto_indices_v1_indices_proto_rawDescGZIP(), []int{3}
}

func (x *IndiceDeleteRequest) GetTickers() []string {
	if x != nil {
		return x.Tickers
	}
	return nil
}

func (x *IndiceDeleteRequest) GetExchanges() []string {
	if x != nil {
		return x.Exchanges
	}
	return nil
}

type IndiceReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticker      string                       `protobuf:"bytes,1,opt,name=ticker,proto3" json:"ticker,omitempty"`
	Description string                       `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Exchange    string                       `protobuf:"bytes,3,opt,name=exchange,proto3" json:"exchange,omitempty"`
	Asset       v1.Asset                     `protobuf:"varint,4,opt,name=asset,proto3,enum=screener.v1.Asset" json:"asset,omitempty"`
	Quote       *v11.QuoteLastReply          `protobuf:"bytes,5,opt,name=quote,proto3" json:"quote,omitempty"`
	Companies   []*v12.CompanyReplies_Result `protobuf:"bytes,6,rep,name=companies,proto3" json:"companies,omitempty"`
	CreatedAt   *timestamppb.Timestamp       `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt   *timestamppb.Timestamp       `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *IndiceReply) Reset() {
	*x = IndiceReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_indices_v1_indices_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndiceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndiceReply) ProtoMessage() {}

func (x *IndiceReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_indices_v1_indices_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndiceReply.ProtoReflect.Descriptor instead.
func (*IndiceReply) Descriptor() ([]byte, []int) {
	return file_proto_indices_v1_indices_proto_rawDescGZIP(), []int{4}
}

func (x *IndiceReply) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *IndiceReply) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *IndiceReply) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *IndiceReply) GetAsset() v1.Asset {
	if x != nil {
		return x.Asset
	}
	return v1.Asset(0)
}

func (x *IndiceReply) GetQuote() *v11.QuoteLastReply {
	if x != nil {
		return x.Quote
	}
	return nil
}

func (x *IndiceReply) GetCompanies() []*v12.CompanyReplies_Result {
	if x != nil {
		return x.Companies
	}
	return nil
}

func (x *IndiceReply) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *IndiceReply) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type IndiceReplies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*IndiceReplies_Result `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Total   int64                   `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *IndiceReplies) Reset() {
	*x = IndiceReplies{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_indices_v1_indices_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndiceReplies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndiceReplies) ProtoMessage() {}

func (x *IndiceReplies) ProtoReflect() protoreflect.Message {
	mi := &file_proto_indices_v1_indices_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndiceReplies.ProtoReflect.Descriptor instead.
func (*IndiceReplies) Descriptor() ([]byte, []int) {
	return file_proto_indices_v1_indices_proto_rawDescGZIP(), []int{5}
}

func (x *IndiceReplies) GetResults() []*IndiceReplies_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *IndiceReplies) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type IndiceDelete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *IndiceDelete) Reset() {
	*x = IndiceDelete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_indices_v1_indices_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndiceDelete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndiceDelete) ProtoMessage() {}

func (x *IndiceDelete) ProtoReflect() protoreflect.Message {
	mi := &file_proto_indices_v1_indices_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndiceDelete.ProtoReflect.Descriptor instead.
func (*IndiceDelete) Descriptor() ([]byte, []int) {
	return file_proto_indices_v1_indices_proto_rawDescGZIP(), []int{6}
}

func (x *IndiceDelete) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type IndiceReplies_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticker      string   `protobuf:"bytes,1,opt,name=ticker,proto3" json:"ticker,omitempty"`
	Description string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Asset       v1.Asset `protobuf:"varint,3,opt,name=asset,proto3,enum=screener.v1.Asset" json:"asset,omitempty"`
}

func (x *IndiceReplies_Result) Reset() {
	*x = IndiceReplies_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_indices_v1_indices_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndiceReplies_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndiceReplies_Result) ProtoMessage() {}

func (x *IndiceReplies_Result) ProtoReflect() protoreflect.Message {
	mi := &file_proto_indices_v1_indices_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndiceReplies_Result.ProtoReflect.Descriptor instead.
func (*IndiceReplies_Result) Descriptor() ([]byte, []int) {
	return file_proto_indices_v1_indices_proto_rawDescGZIP(), []int{5, 0}
}

func (x *IndiceReplies_Result) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *IndiceReplies_Result) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *IndiceReplies_Result) GetAsset() v1.Asset {
	if x != nil {
		return x.Asset
	}
	return v1.Asset(0)
}

var File_proto_indices_v1_indices_proto protoreflect.FileDescriptor

var file_proto_indices_v1_indices_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0a, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e,
	0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x71, 0x75,
	0x6f, 0x74, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x69, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x32, 0x0a, 0x0d, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x06, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04,
	0x10, 0x02, 0x18, 0x10, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x22, 0x45, 0x0a, 0x13,
	0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x09, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x10, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01,
	0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x18, 0x01, 0x52, 0x09, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x22, 0xd7, 0x01, 0x0a, 0x13, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x06, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06,
	0x72, 0x04, 0x10, 0x01, 0x18, 0x10, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0x80, 0x04, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x08,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09,
	0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x10, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x32, 0x0a, 0x05, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x73, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x22, 0x71, 0x0a,
	0x13, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x07, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x10, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x00, 0xfa,
	0x42, 0x05, 0x92, 0x01, 0x02, 0x18, 0x01, 0x52, 0x07, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73,
	0x12, 0x2e, 0x0a, 0x09, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x10, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x00, 0xfa, 0x42, 0x05,
	0x92, 0x01, 0x02, 0x18, 0x01, 0x52, 0x09, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x22, 0xf7, 0x02, 0x0a, 0x0b, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x12, 0x2f, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74,
	0x65, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x05, 0x71, 0x75, 0x6f, 0x74,
	0x65, 0x12, 0x41, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x69, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xcf, 0x01, 0x0a, 0x0d, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x1a, 0x6c,
	0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x22, 0x24, 0x0a, 0x0c,
	0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x32, 0xd6, 0x03, 0x0a, 0x07, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x56,
	0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x19, 0x2e, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x17, 0x2e, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x64, 0x69, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x15, 0x12, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x2f, 0x7b, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x7d, 0x12, 0x59, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x12, 0x1f, 0x2e, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x64, 0x69, 0x63, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x19, 0x2e, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x22, 0x13, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x0d, 0x12, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65,
	0x73, 0x12, 0x5a, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x2e, 0x69, 0x6e,
	0x64, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x69,
	0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x22, 0x0b, 0x2f,
	0x76, 0x31, 0x2f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x62, 0x0a,
	0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x2e, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x69, 0x6e, 0x64, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x1a, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x69,
	0x6e, 0x64, 0x69, 0x63, 0x65, 0x2f, 0x7b, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x7d, 0x3a, 0x01,
	0x2a, 0x12, 0x58, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1f, 0x2e, 0x69, 0x6e,
	0x64, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x69,
	0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x2a, 0x0b,
	0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x42, 0x80, 0x03, 0x0a, 0x19,
	0x64, 0x65, 0x76, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69,
	0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x11, 0x41, 0x50, 0x49, 0x49, 0x6e,
	0x64, 0x69, 0x63, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x56, 0x31, 0x50, 0x01, 0x5a, 0x38,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x72, 0x6b, 0x74, 0x6f,
	0x73, 0x2d, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x62, 0x75, 0x66, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x76,
	0x31, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x92, 0x41, 0x92, 0x02, 0x12, 0x7f, 0x0a, 0x0c,
	0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x20, 0x41, 0x50, 0x49, 0x73, 0x12, 0x0c, 0x49, 0x6e,
	0x64, 0x69, 0x63, 0x65, 0x73, 0x20, 0x41, 0x50, 0x49, 0x73, 0x22, 0x5c, 0x0a, 0x16, 0x41, 0x72,
	0x6b, 0x74, 0x6f, 0x73, 0x20, 0x56, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x20, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x25, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x72, 0x6b, 0x74, 0x6f, 0x73, 0x2d,
	0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x62, 0x75, 0x66, 0x1a, 0x1b, 0x6f, 0x73, 0x73,
	0x40, 0x61, 0x72, 0x6b, 0x74, 0x6f, 0x73, 0x2d, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x32, 0x03, 0x31, 0x2e, 0x30, 0x2a, 0x02, 0x01,
	0x02, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a,
	0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x5a, 0x59, 0x0a, 0x57, 0x0a, 0x06, 0x62, 0x65, 0x61, 0x72, 0x65,
	0x72, 0x12, 0x4d, 0x08, 0x02, 0x12, 0x38, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2c, 0x20, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x3a,
	0x20, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x20, 0x3c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x3e, 0x1a,
	0x0d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x02,
	0x62, 0x0c, 0x0a, 0x0a, 0x0a, 0x06, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x12, 0x00, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_indices_v1_indices_proto_rawDescOnce sync.Once
	file_proto_indices_v1_indices_proto_rawDescData = file_proto_indices_v1_indices_proto_rawDesc
)

func file_proto_indices_v1_indices_proto_rawDescGZIP() []byte {
	file_proto_indices_v1_indices_proto_rawDescOnce.Do(func() {
		file_proto_indices_v1_indices_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_indices_v1_indices_proto_rawDescData)
	})
	return file_proto_indices_v1_indices_proto_rawDescData
}

var file_proto_indices_v1_indices_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_proto_indices_v1_indices_proto_goTypes = []interface{}{
	(*IndiceRequest)(nil),             // 0: indices.v1.IndiceRequest
	(*IndiceSearchRequest)(nil),       // 1: indices.v1.IndiceSearchRequest
	(*IndiceModifyRequest)(nil),       // 2: indices.v1.IndiceModifyRequest
	(*IndiceDeleteRequest)(nil),       // 3: indices.v1.IndiceDeleteRequest
	(*IndiceReply)(nil),               // 4: indices.v1.IndiceReply
	(*IndiceReplies)(nil),             // 5: indices.v1.IndiceReplies
	(*IndiceDelete)(nil),              // 6: indices.v1.IndiceDelete
	(*IndiceReplies_Result)(nil),      // 7: indices.v1.IndiceReplies.Result
	(v1.Asset)(0),                     // 8: screener.v1.Asset
	(*v11.QuoteLastReply)(nil),        // 9: quotes.v1.QuoteLastReply
	(*v12.CompanyReplies_Result)(nil), // 10: companies.v1.CompanyReplies.Result
	(*timestamppb.Timestamp)(nil),     // 11: google.protobuf.Timestamp
}
var file_proto_indices_v1_indices_proto_depIdxs = []int32{
	8,  // 0: indices.v1.IndiceModifyRequest.asset:type_name -> screener.v1.Asset
	8,  // 1: indices.v1.IndiceReply.asset:type_name -> screener.v1.Asset
	9,  // 2: indices.v1.IndiceReply.quote:type_name -> quotes.v1.QuoteLastReply
	10, // 3: indices.v1.IndiceReply.companies:type_name -> companies.v1.CompanyReplies.Result
	11, // 4: indices.v1.IndiceReply.created_at:type_name -> google.protobuf.Timestamp
	11, // 5: indices.v1.IndiceReply.updated_at:type_name -> google.protobuf.Timestamp
	7,  // 6: indices.v1.IndiceReplies.results:type_name -> indices.v1.IndiceReplies.Result
	8,  // 7: indices.v1.IndiceReplies.Result.asset:type_name -> screener.v1.Asset
	0,  // 8: indices.v1.Indices.Get:input_type -> indices.v1.IndiceRequest
	1,  // 9: indices.v1.Indices.Search:input_type -> indices.v1.IndiceSearchRequest
	2,  // 10: indices.v1.Indices.Create:input_type -> indices.v1.IndiceModifyRequest
	2,  // 11: indices.v1.Indices.Update:input_type -> indices.v1.IndiceModifyRequest
	3,  // 12: indices.v1.Indices.Delete:input_type -> indices.v1.IndiceDeleteRequest
	4,  // 13: indices.v1.Indices.Get:output_type -> indices.v1.IndiceReply
	5,  // 14: indices.v1.Indices.Search:output_type -> indices.v1.IndiceReplies
	4,  // 15: indices.v1.Indices.Create:output_type -> indices.v1.IndiceReply
	4,  // 16: indices.v1.Indices.Update:output_type -> indices.v1.IndiceReply
	6,  // 17: indices.v1.Indices.Delete:output_type -> indices.v1.IndiceDelete
	13, // [13:18] is the sub-list for method output_type
	8,  // [8:13] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_proto_indices_v1_indices_proto_init() }
func file_proto_indices_v1_indices_proto_init() {
	if File_proto_indices_v1_indices_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_indices_v1_indices_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_indices_v1_indices_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndiceSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_indices_v1_indices_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndiceModifyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_indices_v1_indices_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndiceDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_indices_v1_indices_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndiceReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_indices_v1_indices_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndiceReplies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_indices_v1_indices_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndiceDelete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_indices_v1_indices_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndiceReplies_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_indices_v1_indices_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_indices_v1_indices_proto_goTypes,
		DependencyIndexes: file_proto_indices_v1_indices_proto_depIdxs,
		MessageInfos:      file_proto_indices_v1_indices_proto_msgTypes,
	}.Build()
	File_proto_indices_v1_indices_proto = out.File
	file_proto_indices_v1_indices_proto_rawDesc = nil
	file_proto_indices_v1_indices_proto_goTypes = nil
	file_proto_indices_v1_indices_proto_depIdxs = nil
}
