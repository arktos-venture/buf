// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/indices/v1/indices.proto

package indices_v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on IndicesRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IndicesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IndicesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IndicesRequestMultiError,
// or nil if none found.
func (m *IndicesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IndicesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetTicker()); l < 2 || l > 16 {
		err := IndicesRequestValidationError{
			field:  "Ticker",
			reason: "value length must be between 2 and 16 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IndicesRequestMultiError(errors)
	}

	return nil
}

// IndicesRequestMultiError is an error wrapping multiple validation errors
// returned by IndicesRequest.ValidateAll() if the designated constraints
// aren't met.
type IndicesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IndicesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IndicesRequestMultiError) AllErrors() []error { return m }

// IndicesRequestValidationError is the validation error returned by
// IndicesRequest.Validate if the designated constraints aren't met.
type IndicesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IndicesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IndicesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IndicesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IndicesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IndicesRequestValidationError) ErrorName() string { return "IndicesRequestValidationError" }

// Error satisfies the builtin error interface
func (e IndicesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIndicesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IndicesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IndicesRequestValidationError{}

// Validate checks the field values on IndicesExchangeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IndicesExchangeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IndicesExchangeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IndicesExchangeRequestMultiError, or nil if none found.
func (m *IndicesExchangeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IndicesExchangeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetExchange()); l < 2 || l > 16 {
		err := IndicesExchangeRequestValidationError{
			field:  "Exchange",
			reason: "value length must be between 2 and 16 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IndicesExchangeRequestMultiError(errors)
	}

	return nil
}

// IndicesExchangeRequestMultiError is an error wrapping multiple validation
// errors returned by IndicesExchangeRequest.ValidateAll() if the designated
// constraints aren't met.
type IndicesExchangeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IndicesExchangeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IndicesExchangeRequestMultiError) AllErrors() []error { return m }

// IndicesExchangeRequestValidationError is the validation error returned by
// IndicesExchangeRequest.Validate if the designated constraints aren't met.
type IndicesExchangeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IndicesExchangeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IndicesExchangeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IndicesExchangeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IndicesExchangeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IndicesExchangeRequestValidationError) ErrorName() string {
	return "IndicesExchangeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IndicesExchangeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIndicesExchangeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IndicesExchangeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IndicesExchangeRequestValidationError{}

// Validate checks the field values on IndicesReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IndicesReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IndicesReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IndicesReplyMultiError, or
// nil if none found.
func (m *IndicesReply) ValidateAll() error {
	return m.validate(true)
}

func (m *IndicesReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ticker

	// no validation rules for Exchange

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetQuote()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IndicesReplyValidationError{
					field:  "Quote",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IndicesReplyValidationError{
					field:  "Quote",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQuote()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IndicesReplyValidationError{
				field:  "Quote",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetCompanies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IndicesReplyValidationError{
						field:  fmt.Sprintf("Companies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IndicesReplyValidationError{
						field:  fmt.Sprintf("Companies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IndicesReplyValidationError{
					field:  fmt.Sprintf("Companies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IndicesReplyValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IndicesReplyValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IndicesReplyValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IndicesReplyValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IndicesReplyValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IndicesReplyValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IndicesReplyMultiError(errors)
	}

	return nil
}

// IndicesReplyMultiError is an error wrapping multiple validation errors
// returned by IndicesReply.ValidateAll() if the designated constraints aren't met.
type IndicesReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IndicesReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IndicesReplyMultiError) AllErrors() []error { return m }

// IndicesReplyValidationError is the validation error returned by
// IndicesReply.Validate if the designated constraints aren't met.
type IndicesReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IndicesReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IndicesReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IndicesReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IndicesReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IndicesReplyValidationError) ErrorName() string { return "IndicesReplyValidationError" }

// Error satisfies the builtin error interface
func (e IndicesReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIndicesReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IndicesReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IndicesReplyValidationError{}

// Validate checks the field values on IndicesShortReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IndicesShortReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IndicesShortReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IndicesShortReplyMultiError, or nil if none found.
func (m *IndicesShortReply) ValidateAll() error {
	return m.validate(true)
}

func (m *IndicesShortReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ticker

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IndicesShortReplyValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IndicesShortReplyValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IndicesShortReplyValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IndicesShortReplyValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IndicesShortReplyValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IndicesShortReplyValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IndicesShortReplyMultiError(errors)
	}

	return nil
}

// IndicesShortReplyMultiError is an error wrapping multiple validation errors
// returned by IndicesShortReply.ValidateAll() if the designated constraints
// aren't met.
type IndicesShortReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IndicesShortReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IndicesShortReplyMultiError) AllErrors() []error { return m }

// IndicesShortReplyValidationError is the validation error returned by
// IndicesShortReply.Validate if the designated constraints aren't met.
type IndicesShortReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IndicesShortReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IndicesShortReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IndicesShortReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IndicesShortReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IndicesShortReplyValidationError) ErrorName() string {
	return "IndicesShortReplyValidationError"
}

// Error satisfies the builtin error interface
func (e IndicesShortReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIndicesShortReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IndicesShortReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IndicesShortReplyValidationError{}

// Validate checks the field values on IndicesShortReplies with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IndicesShortReplies) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IndicesShortReplies with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IndicesShortRepliesMultiError, or nil if none found.
func (m *IndicesShortReplies) ValidateAll() error {
	return m.validate(true)
}

func (m *IndicesShortReplies) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IndicesShortRepliesValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IndicesShortRepliesValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IndicesShortRepliesValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return IndicesShortRepliesMultiError(errors)
	}

	return nil
}

// IndicesShortRepliesMultiError is an error wrapping multiple validation
// errors returned by IndicesShortReplies.ValidateAll() if the designated
// constraints aren't met.
type IndicesShortRepliesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IndicesShortRepliesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IndicesShortRepliesMultiError) AllErrors() []error { return m }

// IndicesShortRepliesValidationError is the validation error returned by
// IndicesShortReplies.Validate if the designated constraints aren't met.
type IndicesShortRepliesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IndicesShortRepliesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IndicesShortRepliesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IndicesShortRepliesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IndicesShortRepliesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IndicesShortRepliesValidationError) ErrorName() string {
	return "IndicesShortRepliesValidationError"
}

// Error satisfies the builtin error interface
func (e IndicesShortRepliesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIndicesShortReplies.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IndicesShortRepliesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IndicesShortRepliesValidationError{}
