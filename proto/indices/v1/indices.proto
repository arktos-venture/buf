syntax = "proto3";

package indices.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "validate/validate.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

import "proto/screener/v1/screener.proto";
import "proto/quotes/v1/quotes.proto";
import "proto/instruments/v1/instruments.proto";
import "proto/strategies/v1/strategies.proto";

option go_package = "github.com/arktos-venture/buf/proto/indices/v1;v1Indices";
option java_multiple_files = true;
option java_package = "dev.kratos.api.indices.v1";
option java_outer_classname = "APIIndicesProtoV1";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
	info: {
        title: "Indices APIs";
		description: "Indices APIs";
        version: "1.0";
		contact: {
			name: "Arktos Venture project";
			url: "https://github.com/arktos-venture/buf";
			email: "oss@arktos-consulting.cloud";
		};
  	};
	schemes: [HTTP, HTTPS];
	consumes: "application/json";
	produces: "application/json";
	security_definitions: {
	  	security: {
			key: "bearer"
			value: {
		  		type: TYPE_API_KEY
		  		in: IN_HEADER
		  		name: "Authorization"
		  		description: "Authentication token, prefixed by Bearer: Bearer <token>"
			}
	  	}
	}
	security: {
	  	security_requirement: {
			key: "bearer"
	  	}
	}
};

service Indices {
	// Public API
	// Get Indice properties
	rpc Get (IndiceRequest) returns (IndiceReply)  {
		option (google.api.http) = {
			get: "/v1/indice/{ticker}"
		};
	}

	// Private API
	// Get Stats Indice
	rpc Stats (IndiceRequest) returns (IndiceStatsReply) {
		option (google.api.http) = {
			get: "/v1/indice/{ticker}/stats"
	  	};
	}

	// Public API
	// Get Quotes Indice
	rpc LastQuotes (IndiceRequest) returns (quotes.v1.QuoteReply) {
		option (google.api.http) = {
			get: "/v1/indice/{ticker}/quotes/last"
	  	};
	}

	// Public API
	// Get Quotes Indice
	rpc Quotes (IndiceQuotesRequest) returns (quotes.v1.QuoteReplies) {
		option (google.api.http) = {
			post: "/v1/indice/quotes"
			body: "*"
	  	};
	}

	// Public API
	// Get Strategies Results Indice
	rpc Strategies (IndiceStrategiesRequest) returns (strategies.v1.StrategiesReplies) {
		option (google.api.http) = {
			get: "/v1/indice/{ticker}/strategies"
	  	};
	}

	// Public API
	// Search Indices available
	rpc Search (IndiceSearchRequest) returns (IndiceReplies)  {
		option (google.api.http) = {
			get: "/v1/indices"
		};
	}

	// Private API
	// Create Indice properties
	rpc Create (IndiceModifyRequest) returns (IndiceReply)  {
		option (google.api.http) = {
			post: "/v1/indices"
			body: "*"
		};
	}

	// Private API
	// Update Indice properties
	rpc Update (IndiceModifyRequest) returns (IndiceReply)  {
		option (google.api.http) = {
			put: "/v1/indice/{ticker}"
			body: "*"
		};
	}

	// Private API
	// Delete Indices
	rpc Delete (IndiceDeleteRequest) returns (IndiceDelete)  {
		option (google.api.http) = {
			delete: "/v1/indices"
		};
	}
}


// 
// Request
// 

message IndiceRequest {
  	string ticker = 1 [(validate.rules).string = {min_len: 2, max_len: 16}];
}

message IndiceQuotesRequest {
	screener.v1.Interval interval = 1 [(validate.rules).enum = {defined_only: true}];
	repeated screener.v1.Filter filters = 2 [(validate.rules).repeated.min_items = 1, (validate.rules).repeated.max_items = 20];
}

message IndiceStrategiesRequest {
	string account = 1 [(validate.rules).string = {min_len: 3, max_len: 36}];
	string ticker = 2 [(validate.rules).string = {min_len: 1, max_len: 16}];
}

message IndiceSearchRequest {
	repeated string exchanges = 1 [(validate.rules).repeated.min_items = 1, (validate.rules).repeated.unique = true];
}

message IndiceModifyRequest {
	string ticker = 1 [(validate.rules).string = {min_len: 1, max_len: 16}];
	string description = 2 [(validate.rules).string = {min_len: 1, max_len: 512}];
	string exchange = 3 [(validate.rules).string = {min_len: 1, max_len: 16}];
	string index = 4;
	screener.v1.Asset asset = 5 [(validate.rules).enum = {defined_only: true}];
}

message IndiceDeleteRequest {
	repeated string tickers = 1 [(validate.rules).repeated.min_items = 0, (validate.rules).repeated.unique = true];
	repeated string exchanges = 2 [(validate.rules).repeated.min_items = 0, (validate.rules).repeated.unique = true];
}


// 
// Reply
// 

message IndiceReply {
	string ticker = 1;
	string description = 2;
	string exchange = 3;
	screener.v1.Asset asset = 4;
	quotes.v1.QuoteReply quote = 5;
	repeated instruments.v1.InstrumentReplies.Result companies = 6;
	google.protobuf.Timestamp created_at = 7;
	google.protobuf.Timestamp updated_at = 8;
}

message IndiceStatsReply {
	message Price {
		float max_annual = 1;
		float min_annual = 2;
		float return_year = 3;
		int64 market_cap_usd = 4;
		float beta5y = 5;
		float start = 6;
	}
		
	message Volume {
		int64 volumeAvg10d = 1;
		int64 volumeAvg30d = 2;
		int64 volumeAvg90d = 3;
	}

	Price price = 4;
	Volume volume = 5;
	google.protobuf.Timestamp created_at = 7;
	google.protobuf.Timestamp updated_at = 8; 
}

message IndiceReplies {
	message Result {
		string ticker = 1;
		string description = 2;
		screener.v1.Asset asset = 3;
	}

	repeated Result results = 1;
	int64 total = 2;
}

message IndiceDelete {
	int64 total = 1;
}