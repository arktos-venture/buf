// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.1

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type BrokerHTTPServer interface {
	Create(context.Context, *BrokerCreateRequest) (*BrokerReply, error)
	Get(context.Context, *BrokerRequest) (*BrokerReply, error)
	Health(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	Update(context.Context, *BrokerUpdateRequest) (*BrokerReply, error)
}

func RegisterBrokerHTTPServer(s *http.Server, srv BrokerHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/broker/{broker}", _Broker_Get1_HTTP_Handler(srv))
	r.POST("/v1/broker", _Broker_Create1_HTTP_Handler(srv))
	r.PUT("/v1/broker/{broker}", _Broker_Update0_HTTP_Handler(srv))
	r.GET("/healthz", _Broker_Health2_HTTP_Handler(srv))
}

func _Broker_Get1_HTTP_Handler(srv BrokerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BrokerRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/broker.v1.Broker/Get")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Get(ctx, req.(*BrokerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BrokerReply)
		return ctx.Result(200, reply)
	}
}

func _Broker_Create1_HTTP_Handler(srv BrokerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BrokerCreateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/broker.v1.Broker/Create")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Create(ctx, req.(*BrokerCreateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BrokerReply)
		return ctx.Result(200, reply)
	}
}

func _Broker_Update0_HTTP_Handler(srv BrokerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BrokerUpdateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/broker.v1.Broker/Update")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Update(ctx, req.(*BrokerUpdateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BrokerReply)
		return ctx.Result(200, reply)
	}
}

func _Broker_Health2_HTTP_Handler(srv BrokerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/broker.v1.Broker/Health")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Health(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type BrokerHTTPClient interface {
	Create(ctx context.Context, req *BrokerCreateRequest, opts ...http.CallOption) (rsp *BrokerReply, err error)
	Get(ctx context.Context, req *BrokerRequest, opts ...http.CallOption) (rsp *BrokerReply, err error)
	Health(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	Update(ctx context.Context, req *BrokerUpdateRequest, opts ...http.CallOption) (rsp *BrokerReply, err error)
}

type BrokerHTTPClientImpl struct {
	cc *http.Client
}

func NewBrokerHTTPClient(client *http.Client) BrokerHTTPClient {
	return &BrokerHTTPClientImpl{client}
}

func (c *BrokerHTTPClientImpl) Create(ctx context.Context, in *BrokerCreateRequest, opts ...http.CallOption) (*BrokerReply, error) {
	var out BrokerReply
	pattern := "/v1/broker"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/broker.v1.Broker/Create"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BrokerHTTPClientImpl) Get(ctx context.Context, in *BrokerRequest, opts ...http.CallOption) (*BrokerReply, error) {
	var out BrokerReply
	pattern := "/v1/broker/{broker}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/broker.v1.Broker/Get"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BrokerHTTPClientImpl) Health(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/healthz"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/broker.v1.Broker/Health"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BrokerHTTPClientImpl) Update(ctx context.Context, in *BrokerUpdateRequest, opts ...http.CallOption) (*BrokerReply, error) {
	var out BrokerReply
	pattern := "/v1/broker/{broker}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/broker.v1.Broker/Update"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
