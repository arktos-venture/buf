// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/portfolios/v1/portfolios.proto

package v1Portfolios

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	v1Screener "github.com/arktos-venture/buf/proto/screener/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = v1Screener.Asset(0)
)

// define the regex for a UUID once up-front
var _portfolios_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on PortfolioStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PortfolioStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PortfolioStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PortfolioStatusRequestMultiError, or nil if none found.
func (m *PortfolioStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PortfolioStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetAccount()); l < 3 || l > 36 {
		err := PortfolioStatusRequestValidationError{
			field:  "Account",
			reason: "value length must be between 3 and 36 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetPortfolioUUID()); err != nil {
		err = PortfolioStatusRequestValidationError{
			field:  "PortfolioUUID",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PortfolioStatusRequestMultiError(errors)
	}

	return nil
}

func (m *PortfolioStatusRequest) _validateUuid(uuid string) error {
	if matched := _portfolios_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// PortfolioStatusRequestMultiError is an error wrapping multiple validation
// errors returned by PortfolioStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type PortfolioStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PortfolioStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PortfolioStatusRequestMultiError) AllErrors() []error { return m }

// PortfolioStatusRequestValidationError is the validation error returned by
// PortfolioStatusRequest.Validate if the designated constraints aren't met.
type PortfolioStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PortfolioStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PortfolioStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PortfolioStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PortfolioStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PortfolioStatusRequestValidationError) ErrorName() string {
	return "PortfolioStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PortfolioStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPortfolioStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PortfolioStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PortfolioStatusRequestValidationError{}

// Validate checks the field values on PortfolioSearchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PortfolioSearchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PortfolioSearchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PortfolioSearchRequestMultiError, or nil if none found.
func (m *PortfolioSearchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PortfolioSearchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetAccount()); l < 3 || l > 36 {
		err := PortfolioSearchRequestValidationError{
			field:  "Account",
			reason: "value length must be between 3 and 36 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PortfolioSearchRequestMultiError(errors)
	}

	return nil
}

// PortfolioSearchRequestMultiError is an error wrapping multiple validation
// errors returned by PortfolioSearchRequest.ValidateAll() if the designated
// constraints aren't met.
type PortfolioSearchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PortfolioSearchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PortfolioSearchRequestMultiError) AllErrors() []error { return m }

// PortfolioSearchRequestValidationError is the validation error returned by
// PortfolioSearchRequest.Validate if the designated constraints aren't met.
type PortfolioSearchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PortfolioSearchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PortfolioSearchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PortfolioSearchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PortfolioSearchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PortfolioSearchRequestValidationError) ErrorName() string {
	return "PortfolioSearchRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PortfolioSearchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPortfolioSearchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PortfolioSearchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PortfolioSearchRequestValidationError{}

// Validate checks the field values on PortfolioCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PortfolioCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PortfolioCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PortfolioCreateRequestMultiError, or nil if none found.
func (m *PortfolioCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PortfolioCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetAccount()); l < 3 || l > 36 {
		err := PortfolioCreateRequestValidationError{
			field:  "Account",
			reason: "value length must be between 3 and 36 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 3 || l > 32 {
		err := PortfolioCreateRequestValidationError{
			field:  "Name",
			reason: "value length must be between 3 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCurrency()) != 3 {
		err := PortfolioCreateRequestValidationError{
			field:  "Currency",
			reason: "value length must be 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	// no validation rules for CashAllocationMax

	if len(errors) > 0 {
		return PortfolioCreateRequestMultiError(errors)
	}

	return nil
}

// PortfolioCreateRequestMultiError is an error wrapping multiple validation
// errors returned by PortfolioCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type PortfolioCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PortfolioCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PortfolioCreateRequestMultiError) AllErrors() []error { return m }

// PortfolioCreateRequestValidationError is the validation error returned by
// PortfolioCreateRequest.Validate if the designated constraints aren't met.
type PortfolioCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PortfolioCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PortfolioCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PortfolioCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PortfolioCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PortfolioCreateRequestValidationError) ErrorName() string {
	return "PortfolioCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PortfolioCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPortfolioCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PortfolioCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PortfolioCreateRequestValidationError{}

// Validate checks the field values on PortfolioUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PortfolioUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PortfolioUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PortfolioUpdateRequestMultiError, or nil if none found.
func (m *PortfolioUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PortfolioUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetAccount()); l < 3 || l > 36 {
		err := PortfolioUpdateRequestValidationError{
			field:  "Account",
			reason: "value length must be between 3 and 36 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetPortfolioUUID()); err != nil {
		err = PortfolioUpdateRequestValidationError{
			field:  "PortfolioUUID",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 3 || l > 32 {
		err := PortfolioUpdateRequestValidationError{
			field:  "Name",
			reason: "value length must be between 3 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCurrency()) != 3 {
		err := PortfolioUpdateRequestValidationError{
			field:  "Currency",
			reason: "value length must be 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	// no validation rules for CashAllocationMax

	if len(errors) > 0 {
		return PortfolioUpdateRequestMultiError(errors)
	}

	return nil
}

func (m *PortfolioUpdateRequest) _validateUuid(uuid string) error {
	if matched := _portfolios_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// PortfolioUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by PortfolioUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type PortfolioUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PortfolioUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PortfolioUpdateRequestMultiError) AllErrors() []error { return m }

// PortfolioUpdateRequestValidationError is the validation error returned by
// PortfolioUpdateRequest.Validate if the designated constraints aren't met.
type PortfolioUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PortfolioUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PortfolioUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PortfolioUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PortfolioUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PortfolioUpdateRequestValidationError) ErrorName() string {
	return "PortfolioUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PortfolioUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPortfolioUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PortfolioUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PortfolioUpdateRequestValidationError{}

// Validate checks the field values on PortfolioDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PortfolioDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PortfolioDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PortfolioDeleteRequestMultiError, or nil if none found.
func (m *PortfolioDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PortfolioDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetAccount()); l < 3 || l > 36 {
		err := PortfolioDeleteRequestValidationError{
			field:  "Account",
			reason: "value length must be between 3 and 36 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetPortfolioUUID()); err != nil {
		err = PortfolioDeleteRequestValidationError{
			field:  "PortfolioUUID",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PortfolioDeleteRequestMultiError(errors)
	}

	return nil
}

func (m *PortfolioDeleteRequest) _validateUuid(uuid string) error {
	if matched := _portfolios_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// PortfolioDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by PortfolioDeleteRequest.ValidateAll() if the designated
// constraints aren't met.
type PortfolioDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PortfolioDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PortfolioDeleteRequestMultiError) AllErrors() []error { return m }

// PortfolioDeleteRequestValidationError is the validation error returned by
// PortfolioDeleteRequest.Validate if the designated constraints aren't met.
type PortfolioDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PortfolioDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PortfolioDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PortfolioDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PortfolioDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PortfolioDeleteRequestValidationError) ErrorName() string {
	return "PortfolioDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PortfolioDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPortfolioDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PortfolioDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PortfolioDeleteRequestValidationError{}

// Validate checks the field values on PortfolioReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PortfolioReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PortfolioReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PortfolioReplyMultiError,
// or nil if none found.
func (m *PortfolioReply) ValidateAll() error {
	return m.validate(true)
}

func (m *PortfolioReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for CashAllocationMax

	for idx, item := range m.GetPositions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PortfolioReplyValidationError{
						field:  fmt.Sprintf("Positions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PortfolioReplyValidationError{
						field:  fmt.Sprintf("Positions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PortfolioReplyValidationError{
					field:  fmt.Sprintf("Positions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOrders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PortfolioReplyValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PortfolioReplyValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PortfolioReplyValidationError{
					field:  fmt.Sprintf("Orders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PortfolioReplyValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PortfolioReplyValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PortfolioReplyValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PortfolioReplyValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PortfolioReplyValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PortfolioReplyValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PortfolioReplyMultiError(errors)
	}

	return nil
}

// PortfolioReplyMultiError is an error wrapping multiple validation errors
// returned by PortfolioReply.ValidateAll() if the designated constraints
// aren't met.
type PortfolioReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PortfolioReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PortfolioReplyMultiError) AllErrors() []error { return m }

// PortfolioReplyValidationError is the validation error returned by
// PortfolioReply.Validate if the designated constraints aren't met.
type PortfolioReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PortfolioReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PortfolioReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PortfolioReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PortfolioReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PortfolioReplyValidationError) ErrorName() string { return "PortfolioReplyValidationError" }

// Error satisfies the builtin error interface
func (e PortfolioReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPortfolioReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PortfolioReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PortfolioReplyValidationError{}

// Validate checks the field values on PortfolioReplies with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PortfolioReplies) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PortfolioReplies with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PortfolioRepliesMultiError, or nil if none found.
func (m *PortfolioReplies) ValidateAll() error {
	return m.validate(true)
}

func (m *PortfolioReplies) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PortfolioRepliesValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PortfolioRepliesValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PortfolioRepliesValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return PortfolioRepliesMultiError(errors)
	}

	return nil
}

// PortfolioRepliesMultiError is an error wrapping multiple validation errors
// returned by PortfolioReplies.ValidateAll() if the designated constraints
// aren't met.
type PortfolioRepliesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PortfolioRepliesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PortfolioRepliesMultiError) AllErrors() []error { return m }

// PortfolioRepliesValidationError is the validation error returned by
// PortfolioReplies.Validate if the designated constraints aren't met.
type PortfolioRepliesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PortfolioRepliesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PortfolioRepliesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PortfolioRepliesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PortfolioRepliesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PortfolioRepliesValidationError) ErrorName() string { return "PortfolioRepliesValidationError" }

// Error satisfies the builtin error interface
func (e PortfolioRepliesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPortfolioReplies.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PortfolioRepliesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PortfolioRepliesValidationError{}

// Validate checks the field values on PortfolioDelete with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PortfolioDelete) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PortfolioDelete with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PortfolioDeleteMultiError, or nil if none found.
func (m *PortfolioDelete) ValidateAll() error {
	return m.validate(true)
}

func (m *PortfolioDelete) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return PortfolioDeleteMultiError(errors)
	}

	return nil
}

// PortfolioDeleteMultiError is an error wrapping multiple validation errors
// returned by PortfolioDelete.ValidateAll() if the designated constraints
// aren't met.
type PortfolioDeleteMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PortfolioDeleteMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PortfolioDeleteMultiError) AllErrors() []error { return m }

// PortfolioDeleteValidationError is the validation error returned by
// PortfolioDelete.Validate if the designated constraints aren't met.
type PortfolioDeleteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PortfolioDeleteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PortfolioDeleteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PortfolioDeleteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PortfolioDeleteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PortfolioDeleteValidationError) ErrorName() string { return "PortfolioDeleteValidationError" }

// Error satisfies the builtin error interface
func (e PortfolioDeleteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPortfolioDelete.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PortfolioDeleteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PortfolioDeleteValidationError{}

// Validate checks the field values on PortfolioReplies_Result with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PortfolioReplies_Result) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PortfolioReplies_Result with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PortfolioReplies_ResultMultiError, or nil if none found.
func (m *PortfolioReplies_Result) ValidateAll() error {
	return m.validate(true)
}

func (m *PortfolioReplies_Result) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for CashAllocationMax

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PortfolioReplies_ResultValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PortfolioReplies_ResultValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PortfolioReplies_ResultValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PortfolioReplies_ResultValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PortfolioReplies_ResultValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PortfolioReplies_ResultValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PortfolioReplies_ResultMultiError(errors)
	}

	return nil
}

// PortfolioReplies_ResultMultiError is an error wrapping multiple validation
// errors returned by PortfolioReplies_Result.ValidateAll() if the designated
// constraints aren't met.
type PortfolioReplies_ResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PortfolioReplies_ResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PortfolioReplies_ResultMultiError) AllErrors() []error { return m }

// PortfolioReplies_ResultValidationError is the validation error returned by
// PortfolioReplies_Result.Validate if the designated constraints aren't met.
type PortfolioReplies_ResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PortfolioReplies_ResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PortfolioReplies_ResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PortfolioReplies_ResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PortfolioReplies_ResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PortfolioReplies_ResultValidationError) ErrorName() string {
	return "PortfolioReplies_ResultValidationError"
}

// Error satisfies the builtin error interface
func (e PortfolioReplies_ResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPortfolioReplies_Result.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PortfolioReplies_ResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PortfolioReplies_ResultValidationError{}
