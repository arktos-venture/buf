syntax = "proto3";

package portfolios.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "validate/validate.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

import "proto/screener/v1/screener.proto";
import "proto/orders/v1/orders.proto";
import "proto/exchanges/v1/exchanges.proto";
import "proto/strategies/v1/strategies.proto";

option go_package = "github.com/arktos-venture/buf/proto/portfolios/v1;v1Portfolios";
option java_multiple_files = true;
option java_package = "dev.kratos.api.portfolio.v1";
option java_outer_classname = "APIPortfoliosProtoV1";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
	info: {
    	title: "Portfolios APIs";
		description: "Portfolios APIs accounts";
    	version: "1.0";
		contact: {
			name: "Arktos Venture project";
			url: "https://github.com/arktos-venture/buf";
			email: "oss@arktos-consulting.cloud";
		};
  	};
	schemes: [HTTP, HTTPS];
	consumes: "application/json";
	produces: "application/json";
	security_definitions: {
	  	security: {
		  	key: "bearer"
		  	value: {
		    	type: TYPE_API_KEY
		    	in: IN_HEADER
		    	name: "Authorization"
		    	description: "Authentication token, prefixed by Bearer: Bearer <token>"
		  	}
	  	}
  	}
	security: {
	  	security_requirement: {
			key: "bearer"
	  	}
	}
};

service Portfolios {
	// Public API: Status Portfolio
  	rpc Get (PortfolioRequest) returns (PortfolioReply)  {
    	option (google.api.http) = {
      		get: "/v1/portfolios/{account}/{currency}"
    	};
  	}

  	// Private API: Get Stats Instrument
	rpc Stats (PortfolioRequest) returns (PortfolioStatsReply) {
		option (google.api.http) = {
			get: "/v1/portfolios/{account}/{currency}/stats"
	  	};
	}

	// Public API: Get Strategies Results Instrument
	rpc Strategies (PortfolioRequest) returns (strategies.v1.StrategiesReplies) {
		option (google.api.http) = {
			get: "/v1/portfolios/{account}/{currency}/strategies"
	  	};
	}

	// Public API: Search portfolios by Account
	rpc Search (PortfolioSearchRequest) returns (PortfolioReplies)  {
		option (google.api.http) = {
			get: "/v1/portfolios/{account}"
		};
	}
}


// 
// Request
// 

message PortfolioRequest {
  	string account = 1 [(validate.rules).string = {min_len: 3, max_len: 36}];
	string currency = 2 [(validate.rules).string.len = 3];
}

message PortfolioSearchRequest {
  	string account = 1 [(validate.rules).string = {min_len: 3, max_len: 36}];
  	repeated string currencies = 2 [(validate.rules).repeated.unique = true, (validate.rules).repeated.min_items = 0];
}


// 
// Reply
// 

message PortfolioReply {
  	string currency = 1;
	float size = 2;
  	repeated screener.v1.Asset allowed_assets = 3;
  	repeated exchanges.v1.ExchangeReplies.Result exchanges = 4;
  	repeated orders.v1.PositionReplies.Result positions = 5;
  	repeated orders.v1.OrderReply orders = 6;
  	google.protobuf.Timestamp created_at = 7; 
  	google.protobuf.Timestamp updated_at = 8; 
}

message PortfolioStatsReply {
	message Price {
		float max_annual = 1;
		float min_annual = 2;
		float return_year = 3;
		int64 market_cap = 4;
		float beta5y = 5;
		float start = 6;
	}
		
	message Volume {
		int64 avg_10d = 1;
		int64 avg_30d = 2;
		int64 avg_90d = 3;
	}

	Price price = 1;
	Volume volume = 2;
	google.protobuf.Timestamp created_at = 3;
	google.protobuf.Timestamp updated_at = 4; 
}

message PortfolioReplies {
	message Result {
		string currency = 1;
		float size = 2;
		repeated screener.v1.Asset allowed_assets = 3;
		google.protobuf.Timestamp created_at = 4;
		google.protobuf.Timestamp updated_at = 5; 
	}

	repeated Result results = 1;
	int64 total = 2;
}