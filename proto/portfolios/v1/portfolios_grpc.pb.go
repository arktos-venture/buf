// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1Portfolios

import (
	context "context"
	v1 "github.com/arktos-venture/buf/proto/strategies/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PortfoliosClient is the client API for Portfolios service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PortfoliosClient interface {
	// Public API: Status Portfolio
	Get(ctx context.Context, in *PortfolioRequest, opts ...grpc.CallOption) (*PortfolioReply, error)
	// Private API
	// Get Stats Instrument
	Stats(ctx context.Context, in *PortfolioRequest, opts ...grpc.CallOption) (*PortfolioStatsReply, error)
	// Public API
	// Get Strategies Results Instrument
	Strategies(ctx context.Context, in *PortfolioRequest, opts ...grpc.CallOption) (*v1.StrategiesReplies, error)
	// Public API: Search portfolios by Account
	Search(ctx context.Context, in *PortfolioSearchRequest, opts ...grpc.CallOption) (*PortfolioReplies, error)
	// Public API: Create Portfolio
	Create(ctx context.Context, in *PortfolioCreateRequest, opts ...grpc.CallOption) (*PortfolioReply, error)
	// Public API: Update existing Portfolios
	Update(ctx context.Context, in *PortfolioUpdateRequest, opts ...grpc.CallOption) (*PortfolioReply, error)
	// Private API: Cancel existing Portfolios
	Delete(ctx context.Context, in *PortfolioDeleteRequest, opts ...grpc.CallOption) (*PortfolioDelete, error)
}

type portfoliosClient struct {
	cc grpc.ClientConnInterface
}

func NewPortfoliosClient(cc grpc.ClientConnInterface) PortfoliosClient {
	return &portfoliosClient{cc}
}

func (c *portfoliosClient) Get(ctx context.Context, in *PortfolioRequest, opts ...grpc.CallOption) (*PortfolioReply, error) {
	out := new(PortfolioReply)
	err := c.cc.Invoke(ctx, "/portfolios.v1.Portfolios/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfoliosClient) Stats(ctx context.Context, in *PortfolioRequest, opts ...grpc.CallOption) (*PortfolioStatsReply, error) {
	out := new(PortfolioStatsReply)
	err := c.cc.Invoke(ctx, "/portfolios.v1.Portfolios/Stats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfoliosClient) Strategies(ctx context.Context, in *PortfolioRequest, opts ...grpc.CallOption) (*v1.StrategiesReplies, error) {
	out := new(v1.StrategiesReplies)
	err := c.cc.Invoke(ctx, "/portfolios.v1.Portfolios/Strategies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfoliosClient) Search(ctx context.Context, in *PortfolioSearchRequest, opts ...grpc.CallOption) (*PortfolioReplies, error) {
	out := new(PortfolioReplies)
	err := c.cc.Invoke(ctx, "/portfolios.v1.Portfolios/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfoliosClient) Create(ctx context.Context, in *PortfolioCreateRequest, opts ...grpc.CallOption) (*PortfolioReply, error) {
	out := new(PortfolioReply)
	err := c.cc.Invoke(ctx, "/portfolios.v1.Portfolios/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfoliosClient) Update(ctx context.Context, in *PortfolioUpdateRequest, opts ...grpc.CallOption) (*PortfolioReply, error) {
	out := new(PortfolioReply)
	err := c.cc.Invoke(ctx, "/portfolios.v1.Portfolios/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfoliosClient) Delete(ctx context.Context, in *PortfolioDeleteRequest, opts ...grpc.CallOption) (*PortfolioDelete, error) {
	out := new(PortfolioDelete)
	err := c.cc.Invoke(ctx, "/portfolios.v1.Portfolios/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PortfoliosServer is the server API for Portfolios service.
// All implementations must embed UnimplementedPortfoliosServer
// for forward compatibility
type PortfoliosServer interface {
	// Public API: Status Portfolio
	Get(context.Context, *PortfolioRequest) (*PortfolioReply, error)
	// Private API
	// Get Stats Instrument
	Stats(context.Context, *PortfolioRequest) (*PortfolioStatsReply, error)
	// Public API
	// Get Strategies Results Instrument
	Strategies(context.Context, *PortfolioRequest) (*v1.StrategiesReplies, error)
	// Public API: Search portfolios by Account
	Search(context.Context, *PortfolioSearchRequest) (*PortfolioReplies, error)
	// Public API: Create Portfolio
	Create(context.Context, *PortfolioCreateRequest) (*PortfolioReply, error)
	// Public API: Update existing Portfolios
	Update(context.Context, *PortfolioUpdateRequest) (*PortfolioReply, error)
	// Private API: Cancel existing Portfolios
	Delete(context.Context, *PortfolioDeleteRequest) (*PortfolioDelete, error)
	mustEmbedUnimplementedPortfoliosServer()
}

// UnimplementedPortfoliosServer must be embedded to have forward compatible implementations.
type UnimplementedPortfoliosServer struct {
}

func (UnimplementedPortfoliosServer) Get(context.Context, *PortfolioRequest) (*PortfolioReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedPortfoliosServer) Stats(context.Context, *PortfolioRequest) (*PortfolioStatsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stats not implemented")
}
func (UnimplementedPortfoliosServer) Strategies(context.Context, *PortfolioRequest) (*v1.StrategiesReplies, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Strategies not implemented")
}
func (UnimplementedPortfoliosServer) Search(context.Context, *PortfolioSearchRequest) (*PortfolioReplies, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedPortfoliosServer) Create(context.Context, *PortfolioCreateRequest) (*PortfolioReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPortfoliosServer) Update(context.Context, *PortfolioUpdateRequest) (*PortfolioReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPortfoliosServer) Delete(context.Context, *PortfolioDeleteRequest) (*PortfolioDelete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPortfoliosServer) mustEmbedUnimplementedPortfoliosServer() {}

// UnsafePortfoliosServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PortfoliosServer will
// result in compilation errors.
type UnsafePortfoliosServer interface {
	mustEmbedUnimplementedPortfoliosServer()
}

func RegisterPortfoliosServer(s grpc.ServiceRegistrar, srv PortfoliosServer) {
	s.RegisterService(&Portfolios_ServiceDesc, srv)
}

func _Portfolios_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortfolioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfoliosServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portfolios.v1.Portfolios/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfoliosServer).Get(ctx, req.(*PortfolioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Portfolios_Stats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortfolioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfoliosServer).Stats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portfolios.v1.Portfolios/Stats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfoliosServer).Stats(ctx, req.(*PortfolioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Portfolios_Strategies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortfolioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfoliosServer).Strategies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portfolios.v1.Portfolios/Strategies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfoliosServer).Strategies(ctx, req.(*PortfolioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Portfolios_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortfolioSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfoliosServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portfolios.v1.Portfolios/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfoliosServer).Search(ctx, req.(*PortfolioSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Portfolios_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortfolioCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfoliosServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portfolios.v1.Portfolios/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfoliosServer).Create(ctx, req.(*PortfolioCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Portfolios_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortfolioUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfoliosServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portfolios.v1.Portfolios/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfoliosServer).Update(ctx, req.(*PortfolioUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Portfolios_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortfolioDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfoliosServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portfolios.v1.Portfolios/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfoliosServer).Delete(ctx, req.(*PortfolioDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Portfolios_ServiceDesc is the grpc.ServiceDesc for Portfolios service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Portfolios_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "portfolios.v1.Portfolios",
	HandlerType: (*PortfoliosServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Portfolios_Get_Handler,
		},
		{
			MethodName: "Stats",
			Handler:    _Portfolios_Stats_Handler,
		},
		{
			MethodName: "Strategies",
			Handler:    _Portfolios_Strategies_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _Portfolios_Search_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Portfolios_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Portfolios_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Portfolios_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/portfolios/v1/portfolios.proto",
}
