// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CountryClient is the client API for Country service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CountryClient interface {
	Get(ctx context.Context, in *CountryRequest, opts ...grpc.CallOption) (*CountryReply, error)
	Search(ctx context.Context, in *CountrySearchRequest, opts ...grpc.CallOption) (*CountryReplies, error)
	Indicator(ctx context.Context, in *CountryIndicatorRequest, opts ...grpc.CallOption) (*CountryIndicatorReply, error)
	Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type countryClient struct {
	cc grpc.ClientConnInterface
}

func NewCountryClient(cc grpc.ClientConnInterface) CountryClient {
	return &countryClient{cc}
}

func (c *countryClient) Get(ctx context.Context, in *CountryRequest, opts ...grpc.CallOption) (*CountryReply, error) {
	out := new(CountryReply)
	err := c.cc.Invoke(ctx, "/country.info.v1.get.Country/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *countryClient) Search(ctx context.Context, in *CountrySearchRequest, opts ...grpc.CallOption) (*CountryReplies, error) {
	out := new(CountryReplies)
	err := c.cc.Invoke(ctx, "/country.info.v1.get.Country/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *countryClient) Indicator(ctx context.Context, in *CountryIndicatorRequest, opts ...grpc.CallOption) (*CountryIndicatorReply, error) {
	out := new(CountryIndicatorReply)
	err := c.cc.Invoke(ctx, "/country.info.v1.get.Country/Indicator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *countryClient) Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/country.info.v1.get.Country/Health", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CountryServer is the server API for Country service.
// All implementations must embed UnimplementedCountryServer
// for forward compatibility
type CountryServer interface {
	Get(context.Context, *CountryRequest) (*CountryReply, error)
	Search(context.Context, *CountrySearchRequest) (*CountryReplies, error)
	Indicator(context.Context, *CountryIndicatorRequest) (*CountryIndicatorReply, error)
	Health(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedCountryServer()
}

// UnimplementedCountryServer must be embedded to have forward compatible implementations.
type UnimplementedCountryServer struct {
}

func (UnimplementedCountryServer) Get(context.Context, *CountryRequest) (*CountryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedCountryServer) Search(context.Context, *CountrySearchRequest) (*CountryReplies, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedCountryServer) Indicator(context.Context, *CountryIndicatorRequest) (*CountryIndicatorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Indicator not implemented")
}
func (UnimplementedCountryServer) Health(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedCountryServer) mustEmbedUnimplementedCountryServer() {}

// UnsafeCountryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CountryServer will
// result in compilation errors.
type UnsafeCountryServer interface {
	mustEmbedUnimplementedCountryServer()
}

func RegisterCountryServer(s grpc.ServiceRegistrar, srv CountryServer) {
	s.RegisterService(&Country_ServiceDesc, srv)
}

func _Country_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountryServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/country.info.v1.get.Country/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountryServer).Get(ctx, req.(*CountryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Country_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountrySearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountryServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/country.info.v1.get.Country/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountryServer).Search(ctx, req.(*CountrySearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Country_Indicator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountryIndicatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountryServer).Indicator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/country.info.v1.get.Country/Indicator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountryServer).Indicator(ctx, req.(*CountryIndicatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Country_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountryServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/country.info.v1.get.Country/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountryServer).Health(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Country_ServiceDesc is the grpc.ServiceDesc for Country service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Country_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "country.info.v1.get.Country",
	HandlerType: (*CountryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Country_Get_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _Country_Search_Handler,
		},
		{
			MethodName: "Indicator",
			Handler:    _Country_Indicator_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _Country_Health_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/country/v1/country.proto",
}
