syntax = "proto3";

package country.info.v1.get;

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "validate/validate.proto";

option go_package = "grpc-api/api/country/info/v1/get;v1";
option java_multiple_files = true;
option java_package = "dev.kratos.api.country.info.v1.get";
option java_outer_classname = "CountryInfoGetProtoV1";

service Country {
  rpc Get (CountryRequest) returns (CountryReply)  {
    option (google.api.http) = {
      get: "/v1/country/{country}"
    };
  }

  rpc Search (CountrySearchRequest) returns (CountryReplies)  {
    option (google.api.http) = {
      post: "/v1/country"
      body: "*"
    };
  }

  rpc Indicator (CountryIndicatorRequest) returns (CountryIndicatorReply)  {
    option (google.api.http) = {
      get: "/v1/country/{country}/{indicator}"
    };
  }

	rpc Health (google.protobuf.Empty) returns (google.protobuf.Empty)  {
		option (google.api.http) = {
			get: "/healthz"
		};
	}
}

// 
// Request
// 

enum Indicator {
	PMIM = 0;
	PMIS = 1;
	CC = 2;
	TC = 3;
	IPC = 4;
	SPB = 5;
	IPP = 6;
}

message Page {
  int32 number = 1 [(validate.rules).int32 = {gt: 0, lt: 10000}];
  int32 limit = 2 [(validate.rules).int32 = {gt: 1, lt: 150}];
}

message CountryRequest {
  string country = 1 [(validate.rules).string.len = 2];
}

message CountrySearchRequest {
  repeated string country = 1 [(validate.rules).repeated.min_items = 1, (validate.rules).repeated.unique = true];
  repeated string continent = 2 [(validate.rules).repeated.min_items = 1, (validate.rules).repeated.unique = true];
  Page page = 3 [(validate.rules).message.required = true];
}

message CountryIndicatorRequest {
	string country = 1;
	Indicator indicator = 2 [(validate.rules).enum = {defined_only: true}];
}

// 
// Reply
// 

message CountryReply {
  message Geo {
    string region = 1;
    string subRegion = 2;
    string continent = 3;
    string capital = 4;
    float Area = 5; 
  }

  message Code {
    string alpha2 = 1;
    string alpha3 = 2;
    string cioc = 3;
    string ccn3 = 4;
    repeated string callingCodes = 5;
    string internationalPrefix = 6;
  }

  message Exchange {
    string name = 1;
    string ticker = 2;
  }

  message Division {
    message Coordinate {
      float minLongitude = 1;
      float minLatitude = 2;
      float maxLongitude = 3;
      float maxLatitude = 4;
      float latitude = 5;
      float longitude = 6;
    }
  
    string name = 1;
    string code = 2;
    Coordinate coordinates = 3;
  }

  string name = 1;
  Geo geo = 2;
  Code code = 3;
  bool euMember = 4;
  repeated string tlds = 5;
  map<string, string> languages = 6;
  repeated string currencies = 7;
  repeated Exchange exchanges = 8;
  repeated Division subDivision = 9;
  repeated string borders = 10;
}

message CountryReplies {
  repeated CountryReply results = 1;
  int32 total = 2;
}

message CountryIndicatorReply {
	message Result {
		repeated float value = 1;
		repeated float forecast = 2;
		repeated int64 date = 3;
	}

	Indicator indicator = 1;
	string country = 2;
	Result results = 3;
	int32 total = 4;
}
