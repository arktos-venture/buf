// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FundamentalClient is the client API for Fundamental service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FundamentalClient interface {
	Get(ctx context.Context, in *FundamentalRequest, opts ...grpc.CallOption) (*FundamentalReply, error)
	Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type fundamentalClient struct {
	cc grpc.ClientConnInterface
}

func NewFundamentalClient(cc grpc.ClientConnInterface) FundamentalClient {
	return &fundamentalClient{cc}
}

func (c *fundamentalClient) Get(ctx context.Context, in *FundamentalRequest, opts ...grpc.CallOption) (*FundamentalReply, error) {
	out := new(FundamentalReply)
	err := c.cc.Invoke(ctx, "/fundamental.v1.Fundamental/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundamentalClient) Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/fundamental.v1.Fundamental/Health", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FundamentalServer is the server API for Fundamental service.
// All implementations must embed UnimplementedFundamentalServer
// for forward compatibility
type FundamentalServer interface {
	Get(context.Context, *FundamentalRequest) (*FundamentalReply, error)
	Health(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedFundamentalServer()
}

// UnimplementedFundamentalServer must be embedded to have forward compatible implementations.
type UnimplementedFundamentalServer struct {
}

func (UnimplementedFundamentalServer) Get(context.Context, *FundamentalRequest) (*FundamentalReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedFundamentalServer) Health(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedFundamentalServer) mustEmbedUnimplementedFundamentalServer() {}

// UnsafeFundamentalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FundamentalServer will
// result in compilation errors.
type UnsafeFundamentalServer interface {
	mustEmbedUnimplementedFundamentalServer()
}

func RegisterFundamentalServer(s grpc.ServiceRegistrar, srv FundamentalServer) {
	s.RegisterService(&Fundamental_ServiceDesc, srv)
}

func _Fundamental_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FundamentalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundamentalServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fundamental.v1.Fundamental/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundamentalServer).Get(ctx, req.(*FundamentalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fundamental_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundamentalServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fundamental.v1.Fundamental/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundamentalServer).Health(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Fundamental_ServiceDesc is the grpc.ServiceDesc for Fundamental service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Fundamental_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fundamental.v1.Fundamental",
	HandlerType: (*FundamentalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Fundamental_Get_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _Fundamental_Health_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/fundamental/v1/fundamental.proto",
}
