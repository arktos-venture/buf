// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/currencies/v1/currencies.proto

package currencies_v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CurrencyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CurrencyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CurrencyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CurrencyRequestMultiError, or nil if none found.
func (m *CurrencyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CurrencyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetTicker()) != 3 {
		err := CurrencyRequestValidationError{
			field:  "Ticker",
			reason: "value length must be 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return CurrencyRequestMultiError(errors)
	}

	return nil
}

// CurrencyRequestMultiError is an error wrapping multiple validation errors
// returned by CurrencyRequest.ValidateAll() if the designated constraints
// aren't met.
type CurrencyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CurrencyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CurrencyRequestMultiError) AllErrors() []error { return m }

// CurrencyRequestValidationError is the validation error returned by
// CurrencyRequest.Validate if the designated constraints aren't met.
type CurrencyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CurrencyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CurrencyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CurrencyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CurrencyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CurrencyRequestValidationError) ErrorName() string { return "CurrencyRequestValidationError" }

// Error satisfies the builtin error interface
func (e CurrencyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCurrencyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CurrencyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CurrencyRequestValidationError{}

// Validate checks the field values on CurrencyReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CurrencyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CurrencyReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CurrencyReplyMultiError, or
// nil if none found.
func (m *CurrencyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CurrencyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Ticker

	if len(errors) > 0 {
		return CurrencyReplyMultiError(errors)
	}

	return nil
}

// CurrencyReplyMultiError is an error wrapping multiple validation errors
// returned by CurrencyReply.ValidateAll() if the designated constraints
// aren't met.
type CurrencyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CurrencyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CurrencyReplyMultiError) AllErrors() []error { return m }

// CurrencyReplyValidationError is the validation error returned by
// CurrencyReply.Validate if the designated constraints aren't met.
type CurrencyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CurrencyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CurrencyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CurrencyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CurrencyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CurrencyReplyValidationError) ErrorName() string { return "CurrencyReplyValidationError" }

// Error satisfies the builtin error interface
func (e CurrencyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCurrencyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CurrencyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CurrencyReplyValidationError{}

// Validate checks the field values on CurrencyReplies with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CurrencyReplies) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CurrencyReplies with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CurrencyRepliesMultiError, or nil if none found.
func (m *CurrencyReplies) ValidateAll() error {
	return m.validate(true)
}

func (m *CurrencyReplies) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CurrencyRepliesValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CurrencyRepliesValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CurrencyRepliesValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return CurrencyRepliesMultiError(errors)
	}

	return nil
}

// CurrencyRepliesMultiError is an error wrapping multiple validation errors
// returned by CurrencyReplies.ValidateAll() if the designated constraints
// aren't met.
type CurrencyRepliesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CurrencyRepliesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CurrencyRepliesMultiError) AllErrors() []error { return m }

// CurrencyRepliesValidationError is the validation error returned by
// CurrencyReplies.Validate if the designated constraints aren't met.
type CurrencyRepliesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CurrencyRepliesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CurrencyRepliesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CurrencyRepliesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CurrencyRepliesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CurrencyRepliesValidationError) ErrorName() string { return "CurrencyRepliesValidationError" }

// Error satisfies the builtin error interface
func (e CurrencyRepliesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCurrencyReplies.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CurrencyRepliesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CurrencyRepliesValidationError{}

// Validate checks the field values on CurrencyReplies_Result with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CurrencyReplies_Result) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CurrencyReplies_Result with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CurrencyReplies_ResultMultiError, or nil if none found.
func (m *CurrencyReplies_Result) ValidateAll() error {
	return m.validate(true)
}

func (m *CurrencyReplies_Result) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Ticker

	if len(errors) > 0 {
		return CurrencyReplies_ResultMultiError(errors)
	}

	return nil
}

// CurrencyReplies_ResultMultiError is an error wrapping multiple validation
// errors returned by CurrencyReplies_Result.ValidateAll() if the designated
// constraints aren't met.
type CurrencyReplies_ResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CurrencyReplies_ResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CurrencyReplies_ResultMultiError) AllErrors() []error { return m }

// CurrencyReplies_ResultValidationError is the validation error returned by
// CurrencyReplies_Result.Validate if the designated constraints aren't met.
type CurrencyReplies_ResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CurrencyReplies_ResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CurrencyReplies_ResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CurrencyReplies_ResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CurrencyReplies_ResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CurrencyReplies_ResultValidationError) ErrorName() string {
	return "CurrencyReplies_ResultValidationError"
}

// Error satisfies the builtin error interface
func (e CurrencyReplies_ResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCurrencyReplies_Result.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CurrencyReplies_ResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CurrencyReplies_ResultValidationError{}
