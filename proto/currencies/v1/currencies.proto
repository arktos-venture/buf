syntax = "proto3";

package currencies.v1;

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "validate/validate.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "proto/exchanges/v1/exchanges.proto";

option go_package = "github.com/arktos-venture/buf/proto/currencies/v1;currencies_v1";
option java_multiple_files = true;
option java_package = "dev.kratos.api.currencies.v1";
option java_outer_classname = "APICurrenciesProtoV1";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
	info: {
        title: "Currencies APIs";
		description: "Currencies APIs";
        version: "1.0";
		contact: {
			name: "Arktos Venture project";
			url: "https://github.com/arktos-venture/buf";
			email: "oss@arktos-consulting.cloud";
		};
  	};
	schemes: [HTTP, HTTPS];
	consumes: "application/json";
	produces: "application/json";
	security_definitions: {
	  	security: {
			key: "bearer"
			value: {
		  		type: TYPE_API_KEY
		  		in: IN_HEADER
		  		name: "Authorization"
		  		description: "Authentication token, prefixed by Bearer: Bearer <token>"
			}
	  	}
	}
	security: {
	  	security_requirement: {
			key: "bearer"
	  	}
	}
};

service Currencies {
	// Public API
  	// Get Currency properties
	rpc Get (CurrencyRequest) returns (CurrencyReply)  {
		option (google.api.http) = {
			get: "/v1/currency/{ticker}"
		};
	}

	// Public API
  	// List Currencies available
	rpc List (google.protobuf.Empty) returns (CurrencyReplies)  {
		option (google.api.http) = {
			get: "/v1/currencies"
		};
	}

	// Private API
  	// Create Currency
	  rpc Create (CurrencyRequest) returns (CurrencyReply)  {
		option (google.api.http) = {
			post: "/v1/currency"
			body: "*"
		};
	}

	// Private API
  	// Delete Currency & deps
	rpc Delete (CurrencyDeleteRequest) returns (CurrencyDelete)  {
		option (google.api.http) = {
			delete: "/v1/currencies"
		};
	}
}


// 
// Request
// 

message CurrencyRequest {
	string ticker = 1 [(validate.rules).string.len = 3];
}

message CurrencyDeleteRequest {
	repeated string tickers = 1 [(validate.rules).repeated.min_items = 1, (validate.rules).repeated.unique = true];
}


// 
// Reply
// 

message CurrencyReply {
	string ticker = 1;
	repeated exchanges.v1.ExchangeReplies.Result exchanges = 2;
}

message CurrencyReplies {
	repeated string results = 1;
	int64 total = 2;
}

message CurrencyDelete {
	int64 total = 1;
}