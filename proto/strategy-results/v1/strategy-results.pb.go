// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: proto/strategy-results/v1/strategy-results.proto

package v1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StrategyType int32

const (
	StrategyType_AKTrend StrategyType = 0
	StrategyType_MACD    StrategyType = 1
)

// Enum value maps for StrategyType.
var (
	StrategyType_name = map[int32]string{
		0: "AKTrend",
		1: "MACD",
	}
	StrategyType_value = map[string]int32{
		"AKTrend": 0,
		"MACD":    1,
	}
)

func (x StrategyType) Enum() *StrategyType {
	p := new(StrategyType)
	*p = x
	return p
}

func (x StrategyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StrategyType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_strategy_results_v1_strategy_results_proto_enumTypes[0].Descriptor()
}

func (StrategyType) Type() protoreflect.EnumType {
	return &file_proto_strategy_results_v1_strategy_results_proto_enumTypes[0]
}

func (x StrategyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StrategyType.Descriptor instead.
func (StrategyType) EnumDescriptor() ([]byte, []int) {
	return file_proto_strategy_results_v1_strategy_results_proto_rawDescGZIP(), []int{0}
}

type Interval int32

const (
	Interval_d Interval = 0
	Interval_w Interval = 1
	Interval_m Interval = 2
)

// Enum value maps for Interval.
var (
	Interval_name = map[int32]string{
		0: "d",
		1: "w",
		2: "m",
	}
	Interval_value = map[string]int32{
		"d": 0,
		"w": 1,
		"m": 2,
	}
)

func (x Interval) Enum() *Interval {
	p := new(Interval)
	*p = x
	return p
}

func (x Interval) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Interval) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_strategy_results_v1_strategy_results_proto_enumTypes[1].Descriptor()
}

func (Interval) Type() protoreflect.EnumType {
	return &file_proto_strategy_results_v1_strategy_results_proto_enumTypes[1]
}

func (x Interval) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Interval.Descriptor instead.
func (Interval) EnumDescriptor() ([]byte, []int) {
	return file_proto_strategy_results_v1_strategy_results_proto_rawDescGZIP(), []int{1}
}

type StrategyReply_Status int32

const (
	StrategyReply_HOLD StrategyReply_Status = 0
	StrategyReply_BUY  StrategyReply_Status = 1
	StrategyReply_SELL StrategyReply_Status = 2
)

// Enum value maps for StrategyReply_Status.
var (
	StrategyReply_Status_name = map[int32]string{
		0: "HOLD",
		1: "BUY",
		2: "SELL",
	}
	StrategyReply_Status_value = map[string]int32{
		"HOLD": 0,
		"BUY":  1,
		"SELL": 2,
	}
)

func (x StrategyReply_Status) Enum() *StrategyReply_Status {
	p := new(StrategyReply_Status)
	*p = x
	return p
}

func (x StrategyReply_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StrategyReply_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_strategy_results_v1_strategy_results_proto_enumTypes[2].Descriptor()
}

func (StrategyReply_Status) Type() protoreflect.EnumType {
	return &file_proto_strategy_results_v1_strategy_results_proto_enumTypes[2]
}

func (x StrategyReply_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StrategyReply_Status.Descriptor instead.
func (StrategyReply_Status) EnumDescriptor() ([]byte, []int) {
	return file_proto_strategy_results_v1_strategy_results_proto_rawDescGZIP(), []int{7, 0}
}

type StrategyCompanyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticker   string       `protobuf:"bytes,1,opt,name=ticker,proto3" json:"ticker,omitempty"`
	Exchange string       `protobuf:"bytes,2,opt,name=exchange,proto3" json:"exchange,omitempty"`
	Currency string       `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`
	Interval Interval     `protobuf:"varint,4,opt,name=interval,proto3,enum=strategy_results.v1.Interval" json:"interval,omitempty"`
	Strategy StrategyType `protobuf:"varint,5,opt,name=strategy,proto3,enum=strategy_results.v1.StrategyType" json:"strategy,omitempty"`
}

func (x *StrategyCompanyRequest) Reset() {
	*x = StrategyCompanyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_strategy_results_v1_strategy_results_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StrategyCompanyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrategyCompanyRequest) ProtoMessage() {}

func (x *StrategyCompanyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_strategy_results_v1_strategy_results_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrategyCompanyRequest.ProtoReflect.Descriptor instead.
func (*StrategyCompanyRequest) Descriptor() ([]byte, []int) {
	return file_proto_strategy_results_v1_strategy_results_proto_rawDescGZIP(), []int{0}
}

func (x *StrategyCompanyRequest) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *StrategyCompanyRequest) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *StrategyCompanyRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *StrategyCompanyRequest) GetInterval() Interval {
	if x != nil {
		return x.Interval
	}
	return Interval_d
}

func (x *StrategyCompanyRequest) GetStrategy() StrategyType {
	if x != nil {
		return x.Strategy
	}
	return StrategyType_AKTrend
}

type StrategyCurrencyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticker   string       `protobuf:"bytes,1,opt,name=ticker,proto3" json:"ticker,omitempty"`
	Interval Interval     `protobuf:"varint,2,opt,name=interval,proto3,enum=strategy_results.v1.Interval" json:"interval,omitempty"`
	Strategy StrategyType `protobuf:"varint,3,opt,name=strategy,proto3,enum=strategy_results.v1.StrategyType" json:"strategy,omitempty"`
}

func (x *StrategyCurrencyRequest) Reset() {
	*x = StrategyCurrencyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_strategy_results_v1_strategy_results_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StrategyCurrencyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrategyCurrencyRequest) ProtoMessage() {}

func (x *StrategyCurrencyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_strategy_results_v1_strategy_results_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrategyCurrencyRequest.ProtoReflect.Descriptor instead.
func (*StrategyCurrencyRequest) Descriptor() ([]byte, []int) {
	return file_proto_strategy_results_v1_strategy_results_proto_rawDescGZIP(), []int{1}
}

func (x *StrategyCurrencyRequest) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *StrategyCurrencyRequest) GetInterval() Interval {
	if x != nil {
		return x.Interval
	}
	return Interval_d
}

func (x *StrategyCurrencyRequest) GetStrategy() StrategyType {
	if x != nil {
		return x.Strategy
	}
	return StrategyType_AKTrend
}

type StrategyIndustryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Industry int64        `protobuf:"varint,1,opt,name=industry,proto3" json:"industry,omitempty"`
	Exchange string       `protobuf:"bytes,2,opt,name=exchange,proto3" json:"exchange,omitempty"`
	Interval Interval     `protobuf:"varint,3,opt,name=interval,proto3,enum=strategy_results.v1.Interval" json:"interval,omitempty"`
	Strategy StrategyType `protobuf:"varint,4,opt,name=strategy,proto3,enum=strategy_results.v1.StrategyType" json:"strategy,omitempty"`
}

func (x *StrategyIndustryRequest) Reset() {
	*x = StrategyIndustryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_strategy_results_v1_strategy_results_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StrategyIndustryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrategyIndustryRequest) ProtoMessage() {}

func (x *StrategyIndustryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_strategy_results_v1_strategy_results_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrategyIndustryRequest.ProtoReflect.Descriptor instead.
func (*StrategyIndustryRequest) Descriptor() ([]byte, []int) {
	return file_proto_strategy_results_v1_strategy_results_proto_rawDescGZIP(), []int{2}
}

func (x *StrategyIndustryRequest) GetIndustry() int64 {
	if x != nil {
		return x.Industry
	}
	return 0
}

func (x *StrategyIndustryRequest) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *StrategyIndustryRequest) GetInterval() Interval {
	if x != nil {
		return x.Interval
	}
	return Interval_d
}

func (x *StrategyIndustryRequest) GetStrategy() StrategyType {
	if x != nil {
		return x.Strategy
	}
	return StrategyType_AKTrend
}

type StrategyExchangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchange string       `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange,omitempty"`
	Country  string       `protobuf:"bytes,2,opt,name=country,proto3" json:"country,omitempty"`
	Interval Interval     `protobuf:"varint,3,opt,name=interval,proto3,enum=strategy_results.v1.Interval" json:"interval,omitempty"`
	Strategy StrategyType `protobuf:"varint,4,opt,name=strategy,proto3,enum=strategy_results.v1.StrategyType" json:"strategy,omitempty"`
}

func (x *StrategyExchangeRequest) Reset() {
	*x = StrategyExchangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_strategy_results_v1_strategy_results_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StrategyExchangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrategyExchangeRequest) ProtoMessage() {}

func (x *StrategyExchangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_strategy_results_v1_strategy_results_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrategyExchangeRequest.ProtoReflect.Descriptor instead.
func (*StrategyExchangeRequest) Descriptor() ([]byte, []int) {
	return file_proto_strategy_results_v1_strategy_results_proto_rawDescGZIP(), []int{3}
}

func (x *StrategyExchangeRequest) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *StrategyExchangeRequest) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *StrategyExchangeRequest) GetInterval() Interval {
	if x != nil {
		return x.Interval
	}
	return Interval_d
}

func (x *StrategyExchangeRequest) GetStrategy() StrategyType {
	if x != nil {
		return x.Strategy
	}
	return StrategyType_AKTrend
}

type StrategyCountryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Country  string       `protobuf:"bytes,1,opt,name=country,proto3" json:"country,omitempty"`
	Interval Interval     `protobuf:"varint,3,opt,name=interval,proto3,enum=strategy_results.v1.Interval" json:"interval,omitempty"`
	Strategy StrategyType `protobuf:"varint,4,opt,name=strategy,proto3,enum=strategy_results.v1.StrategyType" json:"strategy,omitempty"`
}

func (x *StrategyCountryRequest) Reset() {
	*x = StrategyCountryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_strategy_results_v1_strategy_results_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StrategyCountryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrategyCountryRequest) ProtoMessage() {}

func (x *StrategyCountryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_strategy_results_v1_strategy_results_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrategyCountryRequest.ProtoReflect.Descriptor instead.
func (*StrategyCountryRequest) Descriptor() ([]byte, []int) {
	return file_proto_strategy_results_v1_strategy_results_proto_rawDescGZIP(), []int{4}
}

func (x *StrategyCountryRequest) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *StrategyCountryRequest) GetInterval() Interval {
	if x != nil {
		return x.Interval
	}
	return Interval_d
}

func (x *StrategyCountryRequest) GetStrategy() StrategyType {
	if x != nil {
		return x.Strategy
	}
	return StrategyType_AKTrend
}

type StrategyIndexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index    string       `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Interval Interval     `protobuf:"varint,3,opt,name=interval,proto3,enum=strategy_results.v1.Interval" json:"interval,omitempty"`
	Strategy StrategyType `protobuf:"varint,4,opt,name=strategy,proto3,enum=strategy_results.v1.StrategyType" json:"strategy,omitempty"`
}

func (x *StrategyIndexRequest) Reset() {
	*x = StrategyIndexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_strategy_results_v1_strategy_results_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StrategyIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrategyIndexRequest) ProtoMessage() {}

func (x *StrategyIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_strategy_results_v1_strategy_results_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrategyIndexRequest.ProtoReflect.Descriptor instead.
func (*StrategyIndexRequest) Descriptor() ([]byte, []int) {
	return file_proto_strategy_results_v1_strategy_results_proto_rawDescGZIP(), []int{5}
}

func (x *StrategyIndexRequest) GetIndex() string {
	if x != nil {
		return x.Index
	}
	return ""
}

func (x *StrategyIndexRequest) GetInterval() Interval {
	if x != nil {
		return x.Interval
	}
	return Interval_d
}

func (x *StrategyIndexRequest) GetStrategy() StrategyType {
	if x != nil {
		return x.Strategy
	}
	return StrategyType_AKTrend
}

type StrategyAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account  string       `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Interval Interval     `protobuf:"varint,3,opt,name=interval,proto3,enum=strategy_results.v1.Interval" json:"interval,omitempty"`
	Strategy StrategyType `protobuf:"varint,4,opt,name=strategy,proto3,enum=strategy_results.v1.StrategyType" json:"strategy,omitempty"`
}

func (x *StrategyAccountRequest) Reset() {
	*x = StrategyAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_strategy_results_v1_strategy_results_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StrategyAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrategyAccountRequest) ProtoMessage() {}

func (x *StrategyAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_strategy_results_v1_strategy_results_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrategyAccountRequest.ProtoReflect.Descriptor instead.
func (*StrategyAccountRequest) Descriptor() ([]byte, []int) {
	return file_proto_strategy_results_v1_strategy_results_proto_rawDescGZIP(), []int{6}
}

func (x *StrategyAccountRequest) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *StrategyAccountRequest) GetInterval() Interval {
	if x != nil {
		return x.Interval
	}
	return Interval_d
}

func (x *StrategyAccountRequest) GetStrategy() StrategyType {
	if x != nil {
		return x.Strategy
	}
	return StrategyType_AKTrend
}

type StrategyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Strategy  StrategyType           `protobuf:"varint,1,opt,name=strategy,proto3,enum=strategy_results.v1.StrategyType" json:"strategy,omitempty"`
	Interval  Interval               `protobuf:"varint,2,opt,name=interval,proto3,enum=strategy_results.v1.Interval" json:"interval,omitempty"`
	Status    StrategyReply_Status   `protobuf:"varint,3,opt,name=status,proto3,enum=strategy_results.v1.StrategyReply_Status" json:"status,omitempty"`
	StatusAgo int64                  `protobuf:"varint,4,opt,name=status_ago,json=statusAgo,proto3" json:"status_ago,omitempty"`
	Date      *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *StrategyReply) Reset() {
	*x = StrategyReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_strategy_results_v1_strategy_results_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StrategyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrategyReply) ProtoMessage() {}

func (x *StrategyReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_strategy_results_v1_strategy_results_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrategyReply.ProtoReflect.Descriptor instead.
func (*StrategyReply) Descriptor() ([]byte, []int) {
	return file_proto_strategy_results_v1_strategy_results_proto_rawDescGZIP(), []int{7}
}

func (x *StrategyReply) GetStrategy() StrategyType {
	if x != nil {
		return x.Strategy
	}
	return StrategyType_AKTrend
}

func (x *StrategyReply) GetInterval() Interval {
	if x != nil {
		return x.Interval
	}
	return Interval_d
}

func (x *StrategyReply) GetStatus() StrategyReply_Status {
	if x != nil {
		return x.Status
	}
	return StrategyReply_HOLD
}

func (x *StrategyReply) GetStatusAgo() int64 {
	if x != nil {
		return x.StatusAgo
	}
	return 0
}

func (x *StrategyReply) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

var File_proto_strategy_results_v1_strategy_results_proto protoreflect.FileDescriptor

var file_proto_strategy_results_v1_strategy_results_proto_rawDesc = []byte{
	0x0a, 0x30, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x2d, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x2d, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x13, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x96, 0x02, 0x0a,
	0x16, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01,
	0x18, 0x08, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x08, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42,
	0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x08, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x24, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x98, 0x01, 0x03, 0x52, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x43, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x47, 0x0a, 0x08,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21,
	0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x22, 0xca, 0x01, 0x0a, 0x17, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x08, 0x52, 0x06, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x47, 0x0a, 0x08, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x22, 0xfd, 0x01, 0x0a, 0x17, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49,
	0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d,
	0x0a, 0x08, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x11, 0xfa, 0x42, 0x0e, 0x22, 0x0c, 0x18, 0xd2, 0x9a, 0xfe, 0xc0, 0x17, 0x28, 0x92, 0xa6,
	0x80, 0xd5, 0x12, 0x52, 0x08, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x12, 0x25, 0x0a,
	0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x08, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x47, 0x0a, 0x08, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x22, 0xf2, 0x01, 0x0a, 0x17, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25,
	0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x08, 0x52, 0x08, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x98, 0x01, 0x02,
	0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x43, 0x0a, 0x08, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x47,
	0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x21, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x22, 0xca, 0x01, 0x0a, 0x16, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x22, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x98, 0x01, 0x02, 0x52, 0x07, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x43, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x47, 0x0a, 0x08, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x22, 0xc5, 0x01, 0x0a, 0x14, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42,
	0x06, 0x72, 0x04, 0x10, 0x03, 0x18, 0x20, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x43,
	0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1d, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x12, 0x47, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x22, 0xcb, 0x01, 0x0a,
	0x16, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10,
	0x03, 0x18, 0x20, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x12, 0x47, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x22, 0xc2, 0x02, 0x0a, 0x0d, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3d, 0x0a, 0x08,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21,
	0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x39, 0x0a, 0x08, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x41, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x61, 0x67, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x67, 0x6f, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0x25, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03,
	0x42, 0x55, 0x59, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x45, 0x4c, 0x4c, 0x10, 0x02, 0x2a,
	0x25, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x41, 0x4b, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x4d, 0x41, 0x43, 0x44, 0x10, 0x01, 0x2a, 0x1f, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x05, 0x0a, 0x01, 0x64, 0x10, 0x00, 0x12, 0x05, 0x0a, 0x01, 0x77, 0x10, 0x01,
	0x12, 0x05, 0x0a, 0x01, 0x6d, 0x10, 0x02, 0x32, 0x8d, 0x08, 0x0a, 0x08, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x12, 0x83, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x12, 0x2b, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x22, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x3a, 0x01, 0x2a, 0x12, 0x86, 0x01, 0x0a, 0x08, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2c, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x22, 0x22, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x3a, 0x01, 0x2a, 0x12, 0x91, 0x01, 0x0a, 0x08, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79,
	0x12, 0x2c, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49,
	0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22,
	0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x22, 0x28, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x2f, 0x7b, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x7d, 0x2f, 0x69, 0x6e, 0x64, 0x75,
	0x73, 0x74, 0x72, 0x79, 0x3a, 0x01, 0x2a, 0x12, 0x86, 0x01, 0x0a, 0x08, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x2c, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x22, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22, 0x1d,
	0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x2f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x3a, 0x01, 0x2a,
	0x12, 0x83, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2b, 0x2e, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x27, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x21, 0x22, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x3a, 0x01, 0x2a, 0x12, 0x7d, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x29, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x25,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x3a, 0x01, 0x2a, 0x12, 0x83, 0x01, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2b, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22,
	0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x22, 0x1c, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x4a, 0x0a, 0x06, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x10, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0a, 0x12, 0x08, 0x2f,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x7a, 0x42, 0x63, 0x0a, 0x22, 0x64, 0x65, 0x76, 0x2e, 0x6b,
	0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x16, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x56, 0x31, 0x50, 0x01, 0x5a, 0x23, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_strategy_results_v1_strategy_results_proto_rawDescOnce sync.Once
	file_proto_strategy_results_v1_strategy_results_proto_rawDescData = file_proto_strategy_results_v1_strategy_results_proto_rawDesc
)

func file_proto_strategy_results_v1_strategy_results_proto_rawDescGZIP() []byte {
	file_proto_strategy_results_v1_strategy_results_proto_rawDescOnce.Do(func() {
		file_proto_strategy_results_v1_strategy_results_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_strategy_results_v1_strategy_results_proto_rawDescData)
	})
	return file_proto_strategy_results_v1_strategy_results_proto_rawDescData
}

var file_proto_strategy_results_v1_strategy_results_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_proto_strategy_results_v1_strategy_results_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_proto_strategy_results_v1_strategy_results_proto_goTypes = []interface{}{
	(StrategyType)(0),               // 0: strategy_results.v1.StrategyType
	(Interval)(0),                   // 1: strategy_results.v1.Interval
	(StrategyReply_Status)(0),       // 2: strategy_results.v1.StrategyReply.Status
	(*StrategyCompanyRequest)(nil),  // 3: strategy_results.v1.StrategyCompanyRequest
	(*StrategyCurrencyRequest)(nil), // 4: strategy_results.v1.StrategyCurrencyRequest
	(*StrategyIndustryRequest)(nil), // 5: strategy_results.v1.StrategyIndustryRequest
	(*StrategyExchangeRequest)(nil), // 6: strategy_results.v1.StrategyExchangeRequest
	(*StrategyCountryRequest)(nil),  // 7: strategy_results.v1.StrategyCountryRequest
	(*StrategyIndexRequest)(nil),    // 8: strategy_results.v1.StrategyIndexRequest
	(*StrategyAccountRequest)(nil),  // 9: strategy_results.v1.StrategyAccountRequest
	(*StrategyReply)(nil),           // 10: strategy_results.v1.StrategyReply
	(*timestamppb.Timestamp)(nil),   // 11: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),           // 12: google.protobuf.Empty
}
var file_proto_strategy_results_v1_strategy_results_proto_depIdxs = []int32{
	1,  // 0: strategy_results.v1.StrategyCompanyRequest.interval:type_name -> strategy_results.v1.Interval
	0,  // 1: strategy_results.v1.StrategyCompanyRequest.strategy:type_name -> strategy_results.v1.StrategyType
	1,  // 2: strategy_results.v1.StrategyCurrencyRequest.interval:type_name -> strategy_results.v1.Interval
	0,  // 3: strategy_results.v1.StrategyCurrencyRequest.strategy:type_name -> strategy_results.v1.StrategyType
	1,  // 4: strategy_results.v1.StrategyIndustryRequest.interval:type_name -> strategy_results.v1.Interval
	0,  // 5: strategy_results.v1.StrategyIndustryRequest.strategy:type_name -> strategy_results.v1.StrategyType
	1,  // 6: strategy_results.v1.StrategyExchangeRequest.interval:type_name -> strategy_results.v1.Interval
	0,  // 7: strategy_results.v1.StrategyExchangeRequest.strategy:type_name -> strategy_results.v1.StrategyType
	1,  // 8: strategy_results.v1.StrategyCountryRequest.interval:type_name -> strategy_results.v1.Interval
	0,  // 9: strategy_results.v1.StrategyCountryRequest.strategy:type_name -> strategy_results.v1.StrategyType
	1,  // 10: strategy_results.v1.StrategyIndexRequest.interval:type_name -> strategy_results.v1.Interval
	0,  // 11: strategy_results.v1.StrategyIndexRequest.strategy:type_name -> strategy_results.v1.StrategyType
	1,  // 12: strategy_results.v1.StrategyAccountRequest.interval:type_name -> strategy_results.v1.Interval
	0,  // 13: strategy_results.v1.StrategyAccountRequest.strategy:type_name -> strategy_results.v1.StrategyType
	0,  // 14: strategy_results.v1.StrategyReply.strategy:type_name -> strategy_results.v1.StrategyType
	1,  // 15: strategy_results.v1.StrategyReply.interval:type_name -> strategy_results.v1.Interval
	2,  // 16: strategy_results.v1.StrategyReply.status:type_name -> strategy_results.v1.StrategyReply.Status
	11, // 17: strategy_results.v1.StrategyReply.date:type_name -> google.protobuf.Timestamp
	3,  // 18: strategy_results.v1.Strategy.Company:input_type -> strategy_results.v1.StrategyCompanyRequest
	4,  // 19: strategy_results.v1.Strategy.Currency:input_type -> strategy_results.v1.StrategyCurrencyRequest
	5,  // 20: strategy_results.v1.Strategy.Industry:input_type -> strategy_results.v1.StrategyIndustryRequest
	6,  // 21: strategy_results.v1.Strategy.Exchange:input_type -> strategy_results.v1.StrategyExchangeRequest
	7,  // 22: strategy_results.v1.Strategy.Country:input_type -> strategy_results.v1.StrategyCountryRequest
	8,  // 23: strategy_results.v1.Strategy.Index:input_type -> strategy_results.v1.StrategyIndexRequest
	9,  // 24: strategy_results.v1.Strategy.Account:input_type -> strategy_results.v1.StrategyAccountRequest
	12, // 25: strategy_results.v1.Strategy.Health:input_type -> google.protobuf.Empty
	10, // 26: strategy_results.v1.Strategy.Company:output_type -> strategy_results.v1.StrategyReply
	10, // 27: strategy_results.v1.Strategy.Currency:output_type -> strategy_results.v1.StrategyReply
	10, // 28: strategy_results.v1.Strategy.Industry:output_type -> strategy_results.v1.StrategyReply
	10, // 29: strategy_results.v1.Strategy.Exchange:output_type -> strategy_results.v1.StrategyReply
	10, // 30: strategy_results.v1.Strategy.Country:output_type -> strategy_results.v1.StrategyReply
	10, // 31: strategy_results.v1.Strategy.Index:output_type -> strategy_results.v1.StrategyReply
	10, // 32: strategy_results.v1.Strategy.Account:output_type -> strategy_results.v1.StrategyReply
	12, // 33: strategy_results.v1.Strategy.Health:output_type -> google.protobuf.Empty
	26, // [26:34] is the sub-list for method output_type
	18, // [18:26] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_proto_strategy_results_v1_strategy_results_proto_init() }
func file_proto_strategy_results_v1_strategy_results_proto_init() {
	if File_proto_strategy_results_v1_strategy_results_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_strategy_results_v1_strategy_results_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StrategyCompanyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_strategy_results_v1_strategy_results_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StrategyCurrencyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_strategy_results_v1_strategy_results_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StrategyIndustryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_strategy_results_v1_strategy_results_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StrategyExchangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_strategy_results_v1_strategy_results_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StrategyCountryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_strategy_results_v1_strategy_results_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StrategyIndexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_strategy_results_v1_strategy_results_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StrategyAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_strategy_results_v1_strategy_results_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StrategyReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_strategy_results_v1_strategy_results_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_strategy_results_v1_strategy_results_proto_goTypes,
		DependencyIndexes: file_proto_strategy_results_v1_strategy_results_proto_depIdxs,
		EnumInfos:         file_proto_strategy_results_v1_strategy_results_proto_enumTypes,
		MessageInfos:      file_proto_strategy_results_v1_strategy_results_proto_msgTypes,
	}.Build()
	File_proto_strategy_results_v1_strategy_results_proto = out.File
	file_proto_strategy_results_v1_strategy_results_proto_rawDesc = nil
	file_proto_strategy_results_v1_strategy_results_proto_goTypes = nil
	file_proto_strategy_results_v1_strategy_results_proto_depIdxs = nil
}
