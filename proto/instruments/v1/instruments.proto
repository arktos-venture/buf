syntax = "proto3";

package instruments.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "validate/validate.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

import "proto/quotes/v1/quotes.proto";
import "proto/screener/v1/screener.proto";
import "proto/strategies/v1/strategies.proto";

option go_package = "github.com/arktos-venture/buf/proto/instruments/v1;v1Instruments";
option java_multiple_files = true;
option java_package = "dev.kratos.api.instruments.v1";
option java_outer_classname = "APInstrumentProtoV1";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
	info: {
        title: "Instruments APIs";
		description: "Instruments APIs available for trades";
        version: "1.0";
		contact: {
			name: "Arktos Venture project";
			url: "https://github.com/arktos-venture/buf";
			email: "oss@arktos-consulting.cloud";
		};
  	};
	schemes: [HTTP, HTTPS];
	consumes: "application/json";
	produces: "application/json";
	security_definitions: {
	  	security: {
			key: "bearer"
			value: {
		  		type: TYPE_API_KEY
		  		in: IN_HEADER
		  		name: "Authorization"
		  		description: "Authentication token, prefixed by Bearer: Bearer <token>"
			}
	  	}
	}
	security: {
	  	security_requirement: {
			key: "bearer"
	  	}
	}
};

service instruments {
	// Public API: Get Instrument properties
	rpc Get (InstrumentRequest) returns (InstrumentReply)  {
		option (google.api.http) = {
		  	get: "/v1/instrument/{id}"
		};
	}

	// Private API: Get Stats Instrument
	rpc Stats (InstrumentRequest) returns (InstrumentStatsReply) {
		option (google.api.http) = {
			get: "/v1/instrument/{id}/stats"
	  	};
	}

	// Public API: Get Strategies Results Instrument
	rpc Strategies (InstrumentStrategiesRequest) returns (strategies.v1.StrategiesReplies) {
		option (google.api.http) = {
			get: "/v1/instrument/{id}/strategies"
	  	};
	}

	// Private API: Search instruments, only for start imports
	rpc Search (InstrumentSearchRequest) returns (InstrumentReplies)  {
		option (google.api.http) = {
		  	post: "/v1/instruments/search"
			body: "*"
		};
	}
}


// 
// Request
// 

message InstrumentRequest {
	int64 id = 1 [(validate.rules).int64 = {lt: 0}];
}

message InstrumentStrategiesRequest {
	string account = 1 [(validate.rules).string = {min_len: 3, max_len: 36}];
	int64 id = 2 [(validate.rules).int64 = {lt: 0}];
}

message InstrumentSearchRequest {
	repeated screener.v1.Filter filters = 1 [(validate.rules).repeated.min_items = 1, (validate.rules).repeated.max_items = 20];
	screener.v1.ScreenerRequest.Sort sort = 2 [(validate.rules).message.required = true];
}


// 
// Reply
// 

message InstrumentReply {
	message Address {
		string street = 1;
		string city = 2;
		string state = 3;
		string country = 4;
	}
	
	message Contact {
		string phone = 1;
		string website = 2;
		string email = 3;
	}

	message Exchange {
		string ticker = 1;
		string routing = 2;
		string currency = 3;
		bool open = 4;
	}

	message Dividend {
		repeated float values = 1;
		repeated float yields = 2;
		repeated google.protobuf.Timestamp created_at = 3;
	}

	message Stats {
		message Shares {
			int64 outstanding = 1;
			int64 float = 2;
			float div = 3;
		}

		InstrumentStatsReply.Price price = 1;
		InstrumentStatsReply.Volume volume = 2;
		Shares shares = 3;
		google.protobuf.Timestamp updated_at = 4; 
	}

	int64 id = 1;
	string ticker = 2;
	string ticker_alternative = 3;
	string name = 4;
	string description = 5;
	Exchange exchange = 6;
	screener.v1.Asset asset = 7;
	string isin = 8;
	bool adr = 9;
	map<int64, string> activity = 10;
	quotes.v1.QuoteReply quote = 11;
	Dividend dividends = 12;
	Stats stats = 13;
	int32 employees = 14;
	string currency_report = 15;
	int32 fiscal_year_end = 16;
	Contact contact = 17;
	Address address = 18;
	google.protobuf.Timestamp created_at = 19;
	google.protobuf.Timestamp updated_at = 20; 
}

message InstrumentStatsReply {
	message Price {
		float max_annual = 1;
		float min_annual = 2;
		float return_year = 3;
		int64 market_cap_usd = 4;
		float beta5y = 5;
		float start = 6;
	}
		
	message Volume {
		int64 avg_10d = 1;
		int64 avg_30d = 2;
		int64 avg_90d = 3;
	}

	Price price = 1;
	Volume volume = 2;
	google.protobuf.Timestamp created_at = 3;
	google.protobuf.Timestamp updated_at = 4; 
}

message InstrumentReplies {
	message Result {
		int64 id = 1;
		string ticker = 2;
		string ticker_alternative = 3;
		string name = 4;
		string exchange = 5;
		string isin = 6;
		screener.v1.Asset asset = 7;
		google.protobuf.Timestamp created_at = 8;
		google.protobuf.Timestamp updated_at = 9; 
	}

	repeated Result results = 1;
	int64 total = 2;
}