// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.21.4
// source: proto/instruments/v1/instruments.proto

package v1Instruments

import (
	v11 "github.com/arktos-venture/buf/proto/instruments-quotes/v1"
	v1 "github.com/arktos-venture/buf/proto/screener/v1"
	v12 "github.com/arktos-venture/buf/proto/strategies/v1"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type InstrumentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *InstrumentRequest) Reset() {
	*x = InstrumentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_instruments_v1_instruments_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstrumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentRequest) ProtoMessage() {}

func (x *InstrumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_instruments_v1_instruments_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentRequest.ProtoReflect.Descriptor instead.
func (*InstrumentRequest) Descriptor() ([]byte, []int) {
	return file_proto_instruments_v1_instruments_proto_rawDescGZIP(), []int{0}
}

func (x *InstrumentRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type InstrumentStrategiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Id      int64  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *InstrumentStrategiesRequest) Reset() {
	*x = InstrumentStrategiesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_instruments_v1_instruments_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstrumentStrategiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentStrategiesRequest) ProtoMessage() {}

func (x *InstrumentStrategiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_instruments_v1_instruments_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentStrategiesRequest.ProtoReflect.Descriptor instead.
func (*InstrumentStrategiesRequest) Descriptor() ([]byte, []int) {
	return file_proto_instruments_v1_instruments_proto_rawDescGZIP(), []int{1}
}

func (x *InstrumentStrategiesRequest) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *InstrumentStrategiesRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type InstrumentSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters []*v1.Filter             `protobuf:"bytes,1,rep,name=filters,proto3" json:"filters,omitempty"`
	Sort    *v1.ScreenerRequest_Sort `protobuf:"bytes,2,opt,name=sort,proto3" json:"sort,omitempty"`
}

func (x *InstrumentSearchRequest) Reset() {
	*x = InstrumentSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_instruments_v1_instruments_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstrumentSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentSearchRequest) ProtoMessage() {}

func (x *InstrumentSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_instruments_v1_instruments_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentSearchRequest.ProtoReflect.Descriptor instead.
func (*InstrumentSearchRequest) Descriptor() ([]byte, []int) {
	return file_proto_instruments_v1_instruments_proto_rawDescGZIP(), []int{2}
}

func (x *InstrumentSearchRequest) GetFilters() []*v1.Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *InstrumentSearchRequest) GetSort() *v1.ScreenerRequest_Sort {
	if x != nil {
		return x.Sort
	}
	return nil
}

type InstrumentReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int64                     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Ticker            string                    `protobuf:"bytes,2,opt,name=ticker,proto3" json:"ticker,omitempty"`
	TickerAlternative string                    `protobuf:"bytes,3,opt,name=ticker_alternative,json=tickerAlternative,proto3" json:"ticker_alternative,omitempty"`
	Name              string                    `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Description       string                    `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Exchange          *InstrumentReply_Exchange `protobuf:"bytes,6,opt,name=exchange,proto3" json:"exchange,omitempty"`
	Asset             v1.Asset                  `protobuf:"varint,7,opt,name=asset,proto3,enum=screener.v1.Asset" json:"asset,omitempty"`
	Isin              string                    `protobuf:"bytes,8,opt,name=isin,proto3" json:"isin,omitempty"`
	Adr               bool                      `protobuf:"varint,9,opt,name=adr,proto3" json:"adr,omitempty"`
	Activity          map[int64]string          `protobuf:"bytes,10,rep,name=activity,proto3" json:"activity,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Quote             *v11.QuoteReply           `protobuf:"bytes,11,opt,name=quote,proto3" json:"quote,omitempty"`
	Dividends         *InstrumentReply_Dividend `protobuf:"bytes,12,opt,name=dividends,proto3" json:"dividends,omitempty"`
	Stats             *InstrumentReply_Stats    `protobuf:"bytes,13,opt,name=stats,proto3" json:"stats,omitempty"`
	Employees         int32                     `protobuf:"varint,14,opt,name=employees,proto3" json:"employees,omitempty"`
	CurrencyReport    string                    `protobuf:"bytes,15,opt,name=currency_report,json=currencyReport,proto3" json:"currency_report,omitempty"`
	FiscalYearEnd     int32                     `protobuf:"varint,16,opt,name=fiscal_year_end,json=fiscalYearEnd,proto3" json:"fiscal_year_end,omitempty"`
	Contact           *InstrumentReply_Contact  `protobuf:"bytes,17,opt,name=contact,proto3" json:"contact,omitempty"`
	Address           *InstrumentReply_Address  `protobuf:"bytes,18,opt,name=address,proto3" json:"address,omitempty"`
	CreatedAt         *timestamppb.Timestamp    `protobuf:"bytes,19,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt         *timestamppb.Timestamp    `protobuf:"bytes,20,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *InstrumentReply) Reset() {
	*x = InstrumentReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_instruments_v1_instruments_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstrumentReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentReply) ProtoMessage() {}

func (x *InstrumentReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_instruments_v1_instruments_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentReply.ProtoReflect.Descriptor instead.
func (*InstrumentReply) Descriptor() ([]byte, []int) {
	return file_proto_instruments_v1_instruments_proto_rawDescGZIP(), []int{3}
}

func (x *InstrumentReply) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *InstrumentReply) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *InstrumentReply) GetTickerAlternative() string {
	if x != nil {
		return x.TickerAlternative
	}
	return ""
}

func (x *InstrumentReply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InstrumentReply) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *InstrumentReply) GetExchange() *InstrumentReply_Exchange {
	if x != nil {
		return x.Exchange
	}
	return nil
}

func (x *InstrumentReply) GetAsset() v1.Asset {
	if x != nil {
		return x.Asset
	}
	return v1.Asset(0)
}

func (x *InstrumentReply) GetIsin() string {
	if x != nil {
		return x.Isin
	}
	return ""
}

func (x *InstrumentReply) GetAdr() bool {
	if x != nil {
		return x.Adr
	}
	return false
}

func (x *InstrumentReply) GetActivity() map[int64]string {
	if x != nil {
		return x.Activity
	}
	return nil
}

func (x *InstrumentReply) GetQuote() *v11.QuoteReply {
	if x != nil {
		return x.Quote
	}
	return nil
}

func (x *InstrumentReply) GetDividends() *InstrumentReply_Dividend {
	if x != nil {
		return x.Dividends
	}
	return nil
}

func (x *InstrumentReply) GetStats() *InstrumentReply_Stats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *InstrumentReply) GetEmployees() int32 {
	if x != nil {
		return x.Employees
	}
	return 0
}

func (x *InstrumentReply) GetCurrencyReport() string {
	if x != nil {
		return x.CurrencyReport
	}
	return ""
}

func (x *InstrumentReply) GetFiscalYearEnd() int32 {
	if x != nil {
		return x.FiscalYearEnd
	}
	return 0
}

func (x *InstrumentReply) GetContact() *InstrumentReply_Contact {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *InstrumentReply) GetAddress() *InstrumentReply_Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *InstrumentReply) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *InstrumentReply) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type InstrumentStatsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price     *InstrumentStatsReply_Price  `protobuf:"bytes,1,opt,name=price,proto3" json:"price,omitempty"`
	Volume    *InstrumentStatsReply_Volume `protobuf:"bytes,2,opt,name=volume,proto3" json:"volume,omitempty"`
	CreatedAt *timestamppb.Timestamp       `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt *timestamppb.Timestamp       `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *InstrumentStatsReply) Reset() {
	*x = InstrumentStatsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_instruments_v1_instruments_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstrumentStatsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentStatsReply) ProtoMessage() {}

func (x *InstrumentStatsReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_instruments_v1_instruments_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentStatsReply.ProtoReflect.Descriptor instead.
func (*InstrumentStatsReply) Descriptor() ([]byte, []int) {
	return file_proto_instruments_v1_instruments_proto_rawDescGZIP(), []int{4}
}

func (x *InstrumentStatsReply) GetPrice() *InstrumentStatsReply_Price {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *InstrumentStatsReply) GetVolume() *InstrumentStatsReply_Volume {
	if x != nil {
		return x.Volume
	}
	return nil
}

func (x *InstrumentStatsReply) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *InstrumentStatsReply) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type InstrumentReplies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*InstrumentReplies_Result `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Total   int64                       `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *InstrumentReplies) Reset() {
	*x = InstrumentReplies{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_instruments_v1_instruments_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstrumentReplies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentReplies) ProtoMessage() {}

func (x *InstrumentReplies) ProtoReflect() protoreflect.Message {
	mi := &file_proto_instruments_v1_instruments_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentReplies.ProtoReflect.Descriptor instead.
func (*InstrumentReplies) Descriptor() ([]byte, []int) {
	return file_proto_instruments_v1_instruments_proto_rawDescGZIP(), []int{5}
}

func (x *InstrumentReplies) GetResults() []*InstrumentReplies_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *InstrumentReplies) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type InstrumentReply_Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Street  string `protobuf:"bytes,1,opt,name=street,proto3" json:"street,omitempty"`
	City    string `protobuf:"bytes,2,opt,name=city,proto3" json:"city,omitempty"`
	State   string `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	Country string `protobuf:"bytes,4,opt,name=country,proto3" json:"country,omitempty"`
}

func (x *InstrumentReply_Address) Reset() {
	*x = InstrumentReply_Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_instruments_v1_instruments_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstrumentReply_Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentReply_Address) ProtoMessage() {}

func (x *InstrumentReply_Address) ProtoReflect() protoreflect.Message {
	mi := &file_proto_instruments_v1_instruments_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentReply_Address.ProtoReflect.Descriptor instead.
func (*InstrumentReply_Address) Descriptor() ([]byte, []int) {
	return file_proto_instruments_v1_instruments_proto_rawDescGZIP(), []int{3, 0}
}

func (x *InstrumentReply_Address) GetStreet() string {
	if x != nil {
		return x.Street
	}
	return ""
}

func (x *InstrumentReply_Address) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *InstrumentReply_Address) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *InstrumentReply_Address) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

type InstrumentReply_Contact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phone   string `protobuf:"bytes,1,opt,name=phone,proto3" json:"phone,omitempty"`
	Website string `protobuf:"bytes,2,opt,name=website,proto3" json:"website,omitempty"`
	Email   string `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *InstrumentReply_Contact) Reset() {
	*x = InstrumentReply_Contact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_instruments_v1_instruments_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstrumentReply_Contact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentReply_Contact) ProtoMessage() {}

func (x *InstrumentReply_Contact) ProtoReflect() protoreflect.Message {
	mi := &file_proto_instruments_v1_instruments_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentReply_Contact.ProtoReflect.Descriptor instead.
func (*InstrumentReply_Contact) Descriptor() ([]byte, []int) {
	return file_proto_instruments_v1_instruments_proto_rawDescGZIP(), []int{3, 1}
}

func (x *InstrumentReply_Contact) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *InstrumentReply_Contact) GetWebsite() string {
	if x != nil {
		return x.Website
	}
	return ""
}

func (x *InstrumentReply_Contact) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type InstrumentReply_Exchange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticker   string `protobuf:"bytes,1,opt,name=ticker,proto3" json:"ticker,omitempty"`
	Routing  string `protobuf:"bytes,2,opt,name=routing,proto3" json:"routing,omitempty"`
	Currency string `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`
	Open     bool   `protobuf:"varint,4,opt,name=open,proto3" json:"open,omitempty"`
}

func (x *InstrumentReply_Exchange) Reset() {
	*x = InstrumentReply_Exchange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_instruments_v1_instruments_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstrumentReply_Exchange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentReply_Exchange) ProtoMessage() {}

func (x *InstrumentReply_Exchange) ProtoReflect() protoreflect.Message {
	mi := &file_proto_instruments_v1_instruments_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentReply_Exchange.ProtoReflect.Descriptor instead.
func (*InstrumentReply_Exchange) Descriptor() ([]byte, []int) {
	return file_proto_instruments_v1_instruments_proto_rawDescGZIP(), []int{3, 2}
}

func (x *InstrumentReply_Exchange) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *InstrumentReply_Exchange) GetRouting() string {
	if x != nil {
		return x.Routing
	}
	return ""
}

func (x *InstrumentReply_Exchange) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *InstrumentReply_Exchange) GetOpen() bool {
	if x != nil {
		return x.Open
	}
	return false
}

type InstrumentReply_Dividend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values    []float32                `protobuf:"fixed32,1,rep,packed,name=values,proto3" json:"values,omitempty"`
	Yields    []float32                `protobuf:"fixed32,2,rep,packed,name=yields,proto3" json:"yields,omitempty"`
	CreatedAt []*timestamppb.Timestamp `protobuf:"bytes,3,rep,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *InstrumentReply_Dividend) Reset() {
	*x = InstrumentReply_Dividend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_instruments_v1_instruments_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstrumentReply_Dividend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentReply_Dividend) ProtoMessage() {}

func (x *InstrumentReply_Dividend) ProtoReflect() protoreflect.Message {
	mi := &file_proto_instruments_v1_instruments_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentReply_Dividend.ProtoReflect.Descriptor instead.
func (*InstrumentReply_Dividend) Descriptor() ([]byte, []int) {
	return file_proto_instruments_v1_instruments_proto_rawDescGZIP(), []int{3, 3}
}

func (x *InstrumentReply_Dividend) GetValues() []float32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *InstrumentReply_Dividend) GetYields() []float32 {
	if x != nil {
		return x.Yields
	}
	return nil
}

func (x *InstrumentReply_Dividend) GetCreatedAt() []*timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type InstrumentReply_Stats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price     *InstrumentStatsReply_Price   `protobuf:"bytes,1,opt,name=price,proto3" json:"price,omitempty"`
	Volume    *InstrumentStatsReply_Volume  `protobuf:"bytes,2,opt,name=volume,proto3" json:"volume,omitempty"`
	Shares    *InstrumentReply_Stats_Shares `protobuf:"bytes,3,opt,name=shares,proto3" json:"shares,omitempty"`
	UpdatedAt *timestamppb.Timestamp        `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *InstrumentReply_Stats) Reset() {
	*x = InstrumentReply_Stats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_instruments_v1_instruments_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstrumentReply_Stats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentReply_Stats) ProtoMessage() {}

func (x *InstrumentReply_Stats) ProtoReflect() protoreflect.Message {
	mi := &file_proto_instruments_v1_instruments_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentReply_Stats.ProtoReflect.Descriptor instead.
func (*InstrumentReply_Stats) Descriptor() ([]byte, []int) {
	return file_proto_instruments_v1_instruments_proto_rawDescGZIP(), []int{3, 4}
}

func (x *InstrumentReply_Stats) GetPrice() *InstrumentStatsReply_Price {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *InstrumentReply_Stats) GetVolume() *InstrumentStatsReply_Volume {
	if x != nil {
		return x.Volume
	}
	return nil
}

func (x *InstrumentReply_Stats) GetShares() *InstrumentReply_Stats_Shares {
	if x != nil {
		return x.Shares
	}
	return nil
}

func (x *InstrumentReply_Stats) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type InstrumentReply_Stats_Shares struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Outstanding int64   `protobuf:"varint,1,opt,name=outstanding,proto3" json:"outstanding,omitempty"`
	Float       int64   `protobuf:"varint,2,opt,name=float,proto3" json:"float,omitempty"`
	Div         float32 `protobuf:"fixed32,3,opt,name=div,proto3" json:"div,omitempty"`
}

func (x *InstrumentReply_Stats_Shares) Reset() {
	*x = InstrumentReply_Stats_Shares{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_instruments_v1_instruments_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstrumentReply_Stats_Shares) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentReply_Stats_Shares) ProtoMessage() {}

func (x *InstrumentReply_Stats_Shares) ProtoReflect() protoreflect.Message {
	mi := &file_proto_instruments_v1_instruments_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentReply_Stats_Shares.ProtoReflect.Descriptor instead.
func (*InstrumentReply_Stats_Shares) Descriptor() ([]byte, []int) {
	return file_proto_instruments_v1_instruments_proto_rawDescGZIP(), []int{3, 4, 0}
}

func (x *InstrumentReply_Stats_Shares) GetOutstanding() int64 {
	if x != nil {
		return x.Outstanding
	}
	return 0
}

func (x *InstrumentReply_Stats_Shares) GetFloat() int64 {
	if x != nil {
		return x.Float
	}
	return 0
}

func (x *InstrumentReply_Stats_Shares) GetDiv() float32 {
	if x != nil {
		return x.Div
	}
	return 0
}

type InstrumentStatsReply_Price struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxAnnual    float32 `protobuf:"fixed32,1,opt,name=max_annual,json=maxAnnual,proto3" json:"max_annual,omitempty"`
	MinAnnual    float32 `protobuf:"fixed32,2,opt,name=min_annual,json=minAnnual,proto3" json:"min_annual,omitempty"`
	ReturnYear   float32 `protobuf:"fixed32,3,opt,name=return_year,json=returnYear,proto3" json:"return_year,omitempty"`
	MarketCapUsd int64   `protobuf:"varint,4,opt,name=market_cap_usd,json=marketCapUsd,proto3" json:"market_cap_usd,omitempty"`
	Beta5Y       float32 `protobuf:"fixed32,5,opt,name=beta5y,proto3" json:"beta5y,omitempty"`
	Start        float32 `protobuf:"fixed32,6,opt,name=start,proto3" json:"start,omitempty"`
}

func (x *InstrumentStatsReply_Price) Reset() {
	*x = InstrumentStatsReply_Price{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_instruments_v1_instruments_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstrumentStatsReply_Price) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentStatsReply_Price) ProtoMessage() {}

func (x *InstrumentStatsReply_Price) ProtoReflect() protoreflect.Message {
	mi := &file_proto_instruments_v1_instruments_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentStatsReply_Price.ProtoReflect.Descriptor instead.
func (*InstrumentStatsReply_Price) Descriptor() ([]byte, []int) {
	return file_proto_instruments_v1_instruments_proto_rawDescGZIP(), []int{4, 0}
}

func (x *InstrumentStatsReply_Price) GetMaxAnnual() float32 {
	if x != nil {
		return x.MaxAnnual
	}
	return 0
}

func (x *InstrumentStatsReply_Price) GetMinAnnual() float32 {
	if x != nil {
		return x.MinAnnual
	}
	return 0
}

func (x *InstrumentStatsReply_Price) GetReturnYear() float32 {
	if x != nil {
		return x.ReturnYear
	}
	return 0
}

func (x *InstrumentStatsReply_Price) GetMarketCapUsd() int64 {
	if x != nil {
		return x.MarketCapUsd
	}
	return 0
}

func (x *InstrumentStatsReply_Price) GetBeta5Y() float32 {
	if x != nil {
		return x.Beta5Y
	}
	return 0
}

func (x *InstrumentStatsReply_Price) GetStart() float32 {
	if x != nil {
		return x.Start
	}
	return 0
}

type InstrumentStatsReply_Volume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg_10D int64 `protobuf:"varint,1,opt,name=avg_10d,json=avg10d,proto3" json:"avg_10d,omitempty"`
	Avg_30D int64 `protobuf:"varint,2,opt,name=avg_30d,json=avg30d,proto3" json:"avg_30d,omitempty"`
	Avg_90D int64 `protobuf:"varint,3,opt,name=avg_90d,json=avg90d,proto3" json:"avg_90d,omitempty"`
}

func (x *InstrumentStatsReply_Volume) Reset() {
	*x = InstrumentStatsReply_Volume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_instruments_v1_instruments_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstrumentStatsReply_Volume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentStatsReply_Volume) ProtoMessage() {}

func (x *InstrumentStatsReply_Volume) ProtoReflect() protoreflect.Message {
	mi := &file_proto_instruments_v1_instruments_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentStatsReply_Volume.ProtoReflect.Descriptor instead.
func (*InstrumentStatsReply_Volume) Descriptor() ([]byte, []int) {
	return file_proto_instruments_v1_instruments_proto_rawDescGZIP(), []int{4, 1}
}

func (x *InstrumentStatsReply_Volume) GetAvg_10D() int64 {
	if x != nil {
		return x.Avg_10D
	}
	return 0
}

func (x *InstrumentStatsReply_Volume) GetAvg_30D() int64 {
	if x != nil {
		return x.Avg_30D
	}
	return 0
}

func (x *InstrumentStatsReply_Volume) GetAvg_90D() int64 {
	if x != nil {
		return x.Avg_90D
	}
	return 0
}

type InstrumentReplies_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Ticker            string                 `protobuf:"bytes,2,opt,name=ticker,proto3" json:"ticker,omitempty"`
	TickerAlternative string                 `protobuf:"bytes,3,opt,name=ticker_alternative,json=tickerAlternative,proto3" json:"ticker_alternative,omitempty"`
	Name              string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Exchange          string                 `protobuf:"bytes,5,opt,name=exchange,proto3" json:"exchange,omitempty"`
	Isin              string                 `protobuf:"bytes,6,opt,name=isin,proto3" json:"isin,omitempty"`
	Asset             v1.Asset               `protobuf:"varint,7,opt,name=asset,proto3,enum=screener.v1.Asset" json:"asset,omitempty"`
	CreatedAt         *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt         *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *InstrumentReplies_Result) Reset() {
	*x = InstrumentReplies_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_instruments_v1_instruments_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstrumentReplies_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentReplies_Result) ProtoMessage() {}

func (x *InstrumentReplies_Result) ProtoReflect() protoreflect.Message {
	mi := &file_proto_instruments_v1_instruments_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentReplies_Result.ProtoReflect.Descriptor instead.
func (*InstrumentReplies_Result) Descriptor() ([]byte, []int) {
	return file_proto_instruments_v1_instruments_proto_rawDescGZIP(), []int{5, 0}
}

func (x *InstrumentReplies_Result) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *InstrumentReplies_Result) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *InstrumentReplies_Result) GetTickerAlternative() string {
	if x != nil {
		return x.TickerAlternative
	}
	return ""
}

func (x *InstrumentReplies_Result) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InstrumentReplies_Result) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *InstrumentReplies_Result) GetIsin() string {
	if x != nil {
		return x.Isin
	}
	return ""
}

func (x *InstrumentReplies_Result) GetAsset() v1.Asset {
	if x != nil {
		return x.Asset
	}
	return v1.Asset(0)
}

func (x *InstrumentReplies_Result) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *InstrumentReplies_Result) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

var File_proto_instruments_v1_instruments_proto protoreflect.FileDescriptor

var file_proto_instruments_v1_instruments_proto_rawDesc = []byte{
	0x0a, 0x26, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x34, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x2d, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2d, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2c,
	0x0a, 0x11, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x10, 0x00, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5b, 0x0a, 0x1b,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x07, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42,
	0x06, 0x72, 0x04, 0x10, 0x03, 0x18, 0x24, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x22, 0x02, 0x10, 0x00, 0x52, 0x02, 0x69, 0x64, 0x22, 0x9b, 0x01, 0x0a, 0x17, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x10, 0xfa, 0x42, 0x05,
	0x92, 0x01, 0x02, 0x08, 0x01, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x10, 0x14, 0x52, 0x07, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3f, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x22, 0xe8, 0x0d, 0x0a, 0x0f, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x61, 0x6c,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x28,
	0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e,
	0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x69, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x73, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03,
	0x61, 0x64, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x64, 0x72, 0x12, 0x49,
	0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x71, 0x75, 0x6f,
	0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x05, 0x71, 0x75, 0x6f,
	0x74, 0x65, 0x12, 0x46, 0x0a, 0x09, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x52,
	0x09, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x3b, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6d, 0x70, 0x6c, 0x6f,
	0x79, 0x65, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x6d, 0x70, 0x6c,
	0x6f, 0x79, 0x65, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x26,
	0x0a, 0x0f, 0x66, 0x69, 0x73, 0x63, 0x61, 0x6c, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x5f, 0x65, 0x6e,
	0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x66, 0x69, 0x73, 0x63, 0x61, 0x6c, 0x59,
	0x65, 0x61, 0x72, 0x45, 0x6e, 0x64, 0x12, 0x41, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x41, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x39, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x1a, 0x65, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x72, 0x65, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x1a, 0x4f, 0x0a, 0x07, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x65,
	0x62, 0x73, 0x69, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x65, 0x62,
	0x73, 0x69, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x1a, 0x6c, 0x0a, 0x08, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x1a, 0x75, 0x0a, 0x08, 0x44, 0x69, 0x76, 0x69,
	0x64, 0x65, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x02, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x79, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x02, 0x52, 0x06, 0x79, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x1a,
	0xe3, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x06, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x12, 0x44, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x52, 0x06,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x1a, 0x52, 0x0a, 0x06, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6f,
	0x75, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x6f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a,
	0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x03, 0x64, 0x69, 0x76, 0x1a, 0x3b, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xa5, 0x04, 0x0a, 0x14, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x40, 0x0a, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x43, 0x0a,
	0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x1a, 0xba, 0x01, 0x0a, 0x05, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x41, 0x6e, 0x6e, 0x75, 0x61,
	0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x41, 0x6e, 0x6e, 0x75, 0x61, 0x6c,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x59, 0x65, 0x61,
	0x72, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x61, 0x70, 0x5f,
	0x75, 0x73, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x43, 0x61, 0x70, 0x55, 0x73, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x65, 0x74, 0x61, 0x35,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x62, 0x65, 0x74, 0x61, 0x35, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x1a, 0x53, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x61, 0x76, 0x67, 0x5f, 0x31, 0x30, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x61, 0x76, 0x67, 0x31, 0x30, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x76, 0x67, 0x5f,
	0x33, 0x30, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x76, 0x67, 0x33, 0x30,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x76, 0x67, 0x5f, 0x39, 0x30, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x61, 0x76, 0x67, 0x39, 0x30, 0x64, 0x22, 0xb3, 0x03, 0x0a, 0x11, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73,
	0x12, 0x42, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x1a, 0xc3, 0x02, 0x0a, 0x06, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2d, 0x0a,
	0x12, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x69, 0x73, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x73, 0x69, 0x6e,
	0x12, 0x28, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x32, 0xe9, 0x03, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x66, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x21, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x73, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x21, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1b, 0x12, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x83, 0x01,
	0x0a, 0x0a, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x65, 0x73, 0x12, 0x2b, 0x2e, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x69, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x22, 0x26, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x69, 0x65, 0x73, 0x12, 0x77, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x27, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1b, 0x22, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x01, 0x2a, 0x42, 0xac, 0x03, 0x0a,
	0x1d, 0x64, 0x65, 0x76, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x13,
	0x41, 0x50, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x56, 0x31, 0x50, 0x01, 0x5a, 0x40, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x61, 0x72, 0x6b, 0x74, 0x6f, 0x73, 0x2d, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65,
	0x2f, 0x62, 0x75, 0x66, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x92, 0x41, 0xb0, 0x02, 0x12, 0x9c, 0x01, 0x0a, 0x10,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x41, 0x50, 0x49, 0x73,
	0x12, 0x25, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x41, 0x50,
	0x49, 0x73, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x22, 0x5c, 0x0a, 0x16, 0x41, 0x72, 0x6b, 0x74, 0x6f,
	0x73, 0x20, 0x56, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x25, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x72, 0x6b, 0x74, 0x6f, 0x73, 0x2d, 0x76, 0x65, 0x6e,
	0x74, 0x75, 0x72, 0x65, 0x2f, 0x62, 0x75, 0x66, 0x1a, 0x1b, 0x6f, 0x73, 0x73, 0x40, 0x61, 0x72,
	0x6b, 0x74, 0x6f, 0x73, 0x2d, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x32, 0x03, 0x31, 0x2e, 0x30, 0x2a, 0x02, 0x01, 0x02, 0x32, 0x10,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e,
	0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73,
	0x6f, 0x6e, 0x5a, 0x59, 0x0a, 0x57, 0x0a, 0x06, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x12, 0x4d,
	0x08, 0x02, 0x12, 0x38, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2c, 0x20, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x3a, 0x20, 0x42, 0x65,
	0x61, 0x72, 0x65, 0x72, 0x20, 0x3c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x3e, 0x1a, 0x0d, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x02, 0x62, 0x0c, 0x0a,
	0x0a, 0x0a, 0x06, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x12, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_proto_instruments_v1_instruments_proto_rawDescOnce sync.Once
	file_proto_instruments_v1_instruments_proto_rawDescData = file_proto_instruments_v1_instruments_proto_rawDesc
)

func file_proto_instruments_v1_instruments_proto_rawDescGZIP() []byte {
	file_proto_instruments_v1_instruments_proto_rawDescOnce.Do(func() {
		file_proto_instruments_v1_instruments_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_instruments_v1_instruments_proto_rawDescData)
	})
	return file_proto_instruments_v1_instruments_proto_rawDescData
}

var file_proto_instruments_v1_instruments_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_proto_instruments_v1_instruments_proto_goTypes = []interface{}{
	(*InstrumentRequest)(nil),            // 0: instruments.v1.InstrumentRequest
	(*InstrumentStrategiesRequest)(nil),  // 1: instruments.v1.InstrumentStrategiesRequest
	(*InstrumentSearchRequest)(nil),      // 2: instruments.v1.InstrumentSearchRequest
	(*InstrumentReply)(nil),              // 3: instruments.v1.InstrumentReply
	(*InstrumentStatsReply)(nil),         // 4: instruments.v1.InstrumentStatsReply
	(*InstrumentReplies)(nil),            // 5: instruments.v1.InstrumentReplies
	(*InstrumentReply_Address)(nil),      // 6: instruments.v1.InstrumentReply.Address
	(*InstrumentReply_Contact)(nil),      // 7: instruments.v1.InstrumentReply.Contact
	(*InstrumentReply_Exchange)(nil),     // 8: instruments.v1.InstrumentReply.Exchange
	(*InstrumentReply_Dividend)(nil),     // 9: instruments.v1.InstrumentReply.Dividend
	(*InstrumentReply_Stats)(nil),        // 10: instruments.v1.InstrumentReply.Stats
	nil,                                  // 11: instruments.v1.InstrumentReply.ActivityEntry
	(*InstrumentReply_Stats_Shares)(nil), // 12: instruments.v1.InstrumentReply.Stats.Shares
	(*InstrumentStatsReply_Price)(nil),   // 13: instruments.v1.InstrumentStatsReply.Price
	(*InstrumentStatsReply_Volume)(nil),  // 14: instruments.v1.InstrumentStatsReply.Volume
	(*InstrumentReplies_Result)(nil),     // 15: instruments.v1.InstrumentReplies.Result
	(*v1.Filter)(nil),                    // 16: screener.v1.Filter
	(*v1.ScreenerRequest_Sort)(nil),      // 17: screener.v1.ScreenerRequest.Sort
	(v1.Asset)(0),                        // 18: screener.v1.Asset
	(*v11.QuoteReply)(nil),               // 19: instruments_quotes.v1.QuoteReply
	(*timestamppb.Timestamp)(nil),        // 20: google.protobuf.Timestamp
	(*v12.StrategiesReplies)(nil),        // 21: strategies.v1.StrategiesReplies
}
var file_proto_instruments_v1_instruments_proto_depIdxs = []int32{
	16, // 0: instruments.v1.InstrumentSearchRequest.filters:type_name -> screener.v1.Filter
	17, // 1: instruments.v1.InstrumentSearchRequest.sort:type_name -> screener.v1.ScreenerRequest.Sort
	8,  // 2: instruments.v1.InstrumentReply.exchange:type_name -> instruments.v1.InstrumentReply.Exchange
	18, // 3: instruments.v1.InstrumentReply.asset:type_name -> screener.v1.Asset
	11, // 4: instruments.v1.InstrumentReply.activity:type_name -> instruments.v1.InstrumentReply.ActivityEntry
	19, // 5: instruments.v1.InstrumentReply.quote:type_name -> instruments_quotes.v1.QuoteReply
	9,  // 6: instruments.v1.InstrumentReply.dividends:type_name -> instruments.v1.InstrumentReply.Dividend
	10, // 7: instruments.v1.InstrumentReply.stats:type_name -> instruments.v1.InstrumentReply.Stats
	7,  // 8: instruments.v1.InstrumentReply.contact:type_name -> instruments.v1.InstrumentReply.Contact
	6,  // 9: instruments.v1.InstrumentReply.address:type_name -> instruments.v1.InstrumentReply.Address
	20, // 10: instruments.v1.InstrumentReply.created_at:type_name -> google.protobuf.Timestamp
	20, // 11: instruments.v1.InstrumentReply.updated_at:type_name -> google.protobuf.Timestamp
	13, // 12: instruments.v1.InstrumentStatsReply.price:type_name -> instruments.v1.InstrumentStatsReply.Price
	14, // 13: instruments.v1.InstrumentStatsReply.volume:type_name -> instruments.v1.InstrumentStatsReply.Volume
	20, // 14: instruments.v1.InstrumentStatsReply.created_at:type_name -> google.protobuf.Timestamp
	20, // 15: instruments.v1.InstrumentStatsReply.updated_at:type_name -> google.protobuf.Timestamp
	15, // 16: instruments.v1.InstrumentReplies.results:type_name -> instruments.v1.InstrumentReplies.Result
	20, // 17: instruments.v1.InstrumentReply.Dividend.created_at:type_name -> google.protobuf.Timestamp
	13, // 18: instruments.v1.InstrumentReply.Stats.price:type_name -> instruments.v1.InstrumentStatsReply.Price
	14, // 19: instruments.v1.InstrumentReply.Stats.volume:type_name -> instruments.v1.InstrumentStatsReply.Volume
	12, // 20: instruments.v1.InstrumentReply.Stats.shares:type_name -> instruments.v1.InstrumentReply.Stats.Shares
	20, // 21: instruments.v1.InstrumentReply.Stats.updated_at:type_name -> google.protobuf.Timestamp
	18, // 22: instruments.v1.InstrumentReplies.Result.asset:type_name -> screener.v1.Asset
	20, // 23: instruments.v1.InstrumentReplies.Result.created_at:type_name -> google.protobuf.Timestamp
	20, // 24: instruments.v1.InstrumentReplies.Result.updated_at:type_name -> google.protobuf.Timestamp
	0,  // 25: instruments.v1.instruments.Get:input_type -> instruments.v1.InstrumentRequest
	0,  // 26: instruments.v1.instruments.Stats:input_type -> instruments.v1.InstrumentRequest
	1,  // 27: instruments.v1.instruments.Strategies:input_type -> instruments.v1.InstrumentStrategiesRequest
	2,  // 28: instruments.v1.instruments.Search:input_type -> instruments.v1.InstrumentSearchRequest
	3,  // 29: instruments.v1.instruments.Get:output_type -> instruments.v1.InstrumentReply
	4,  // 30: instruments.v1.instruments.Stats:output_type -> instruments.v1.InstrumentStatsReply
	21, // 31: instruments.v1.instruments.Strategies:output_type -> strategies.v1.StrategiesReplies
	5,  // 32: instruments.v1.instruments.Search:output_type -> instruments.v1.InstrumentReplies
	29, // [29:33] is the sub-list for method output_type
	25, // [25:29] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_proto_instruments_v1_instruments_proto_init() }
func file_proto_instruments_v1_instruments_proto_init() {
	if File_proto_instruments_v1_instruments_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_instruments_v1_instruments_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstrumentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_instruments_v1_instruments_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstrumentStrategiesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_instruments_v1_instruments_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstrumentSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_instruments_v1_instruments_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstrumentReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_instruments_v1_instruments_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstrumentStatsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_instruments_v1_instruments_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstrumentReplies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_instruments_v1_instruments_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstrumentReply_Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_instruments_v1_instruments_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstrumentReply_Contact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_instruments_v1_instruments_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstrumentReply_Exchange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_instruments_v1_instruments_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstrumentReply_Dividend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_instruments_v1_instruments_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstrumentReply_Stats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_instruments_v1_instruments_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstrumentReply_Stats_Shares); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_instruments_v1_instruments_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstrumentStatsReply_Price); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_instruments_v1_instruments_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstrumentStatsReply_Volume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_instruments_v1_instruments_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstrumentReplies_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_instruments_v1_instruments_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_instruments_v1_instruments_proto_goTypes,
		DependencyIndexes: file_proto_instruments_v1_instruments_proto_depIdxs,
		MessageInfos:      file_proto_instruments_v1_instruments_proto_msgTypes,
	}.Build()
	File_proto_instruments_v1_instruments_proto = out.File
	file_proto_instruments_v1_instruments_proto_rawDesc = nil
	file_proto_instruments_v1_instruments_proto_goTypes = nil
	file_proto_instruments_v1_instruments_proto_depIdxs = nil
}
