// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/instruments/v1/instruments.proto

package v1Instruments

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	v1Screener "github.com/arktos-venture/buf/proto/screener/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = v1Screener.Asset(0)
)

// Validate checks the field values on InstrumentRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *InstrumentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstrumentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstrumentRequestMultiError, or nil if none found.
func (m *InstrumentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InstrumentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() >= 0 {
		err := InstrumentRequestValidationError{
			field:  "Id",
			reason: "value must be less than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return InstrumentRequestMultiError(errors)
	}

	return nil
}

// InstrumentRequestMultiError is an error wrapping multiple validation errors
// returned by InstrumentRequest.ValidateAll() if the designated constraints
// aren't met.
type InstrumentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstrumentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstrumentRequestMultiError) AllErrors() []error { return m }

// InstrumentRequestValidationError is the validation error returned by
// InstrumentRequest.Validate if the designated constraints aren't met.
type InstrumentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstrumentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstrumentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstrumentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstrumentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstrumentRequestValidationError) ErrorName() string {
	return "InstrumentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InstrumentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstrumentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstrumentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstrumentRequestValidationError{}

// Validate checks the field values on InstrumentSearchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstrumentSearchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstrumentSearchRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstrumentSearchRequestMultiError, or nil if none found.
func (m *InstrumentSearchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InstrumentSearchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetFilters()); l < 1 || l > 20 {
		err := InstrumentSearchRequestValidationError{
			field:  "Filters",
			reason: "value must contain between 1 and 20 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetFilters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InstrumentSearchRequestValidationError{
						field:  fmt.Sprintf("Filters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InstrumentSearchRequestValidationError{
						field:  fmt.Sprintf("Filters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InstrumentSearchRequestValidationError{
					field:  fmt.Sprintf("Filters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.GetSort() == nil {
		err := InstrumentSearchRequestValidationError{
			field:  "Sort",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetSort()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstrumentSearchRequestValidationError{
					field:  "Sort",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstrumentSearchRequestValidationError{
					field:  "Sort",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSort()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstrumentSearchRequestValidationError{
				field:  "Sort",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InstrumentSearchRequestMultiError(errors)
	}

	return nil
}

// InstrumentSearchRequestMultiError is an error wrapping multiple validation
// errors returned by InstrumentSearchRequest.ValidateAll() if the designated
// constraints aren't met.
type InstrumentSearchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstrumentSearchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstrumentSearchRequestMultiError) AllErrors() []error { return m }

// InstrumentSearchRequestValidationError is the validation error returned by
// InstrumentSearchRequest.Validate if the designated constraints aren't met.
type InstrumentSearchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstrumentSearchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstrumentSearchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstrumentSearchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstrumentSearchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstrumentSearchRequestValidationError) ErrorName() string {
	return "InstrumentSearchRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InstrumentSearchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstrumentSearchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstrumentSearchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstrumentSearchRequestValidationError{}

// Validate checks the field values on InstrumentCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstrumentCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstrumentCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstrumentCreateRequestMultiError, or nil if none found.
func (m *InstrumentCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InstrumentCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() >= 0 {
		err := InstrumentCreateRequestValidationError{
			field:  "Id",
			reason: "value must be less than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetTicker()); l < 1 || l > 16 {
		err := InstrumentCreateRequestValidationError{
			field:  "Ticker",
			reason: "value length must be between 1 and 16 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetTickerIBKR()); l < 0 || l > 16 {
		err := InstrumentCreateRequestValidationError{
			field:  "TickerIBKR",
			reason: "value length must be between 0 and 16 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetExchange()); l < 1 || l > 8 {
		err := InstrumentCreateRequestValidationError{
			field:  "Exchange",
			reason: "value length must be between 1 and 8 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 64 {
		err := InstrumentCreateRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Asset

	if utf8.RuneCountInString(m.GetIsin()) != 16 {
		err := InstrumentCreateRequestValidationError{
			field:  "Isin",
			reason: "value length must be 16 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if l := utf8.RuneCountInString(m.GetDescription()); l < 1 || l > 8164 {
		err := InstrumentCreateRequestValidationError{
			field:  "Description",
			reason: "value length must be between 1 and 8164 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetActivity() > 50 {
		err := InstrumentCreateRequestValidationError{
			field:  "Activity",
			reason: "value must be less than or equal to 50",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Adr

	if m.GetFiscalMonthEnd() >= 1 {
		err := InstrumentCreateRequestValidationError{
			field:  "FiscalMonthEnd",
			reason: "value must be less than 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCurrencyReport()) != 3 {
		err := InstrumentCreateRequestValidationError{
			field:  "CurrencyReport",
			reason: "value length must be 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if m.GetEmployees() != 0 {

	}

	if m.GetSharesPerListing() != 0 {

	}

	if m.GetSharesOut() != 0 {

	}

	if m.GetSharesFloat() != 0 {

	}

	if m.GetEmail() != "" {

	}

	if m.GetWebsite() != "" {

	}

	if m.GetPhone() != "" {

	}

	if m.GetStreet() != "" {

	}

	if m.GetCity() != "" {

	}

	if m.GetState() != "" {

	}

	if utf8.RuneCountInString(m.GetCountry()) != 2 {
		err := InstrumentCreateRequestValidationError{
			field:  "Country",
			reason: "value length must be 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return InstrumentCreateRequestMultiError(errors)
	}

	return nil
}

// InstrumentCreateRequestMultiError is an error wrapping multiple validation
// errors returned by InstrumentCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type InstrumentCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstrumentCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstrumentCreateRequestMultiError) AllErrors() []error { return m }

// InstrumentCreateRequestValidationError is the validation error returned by
// InstrumentCreateRequest.Validate if the designated constraints aren't met.
type InstrumentCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstrumentCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstrumentCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstrumentCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstrumentCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstrumentCreateRequestValidationError) ErrorName() string {
	return "InstrumentCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InstrumentCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstrumentCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstrumentCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstrumentCreateRequestValidationError{}

// Validate checks the field values on InstrumentUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstrumentUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstrumentUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstrumentUpdateRequestMultiError, or nil if none found.
func (m *InstrumentUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InstrumentUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() >= 1 {
		err := InstrumentUpdateRequestValidationError{
			field:  "Id",
			reason: "value must be less than 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetTicker()); l < 1 || l > 16 {
		err := InstrumentUpdateRequestValidationError{
			field:  "Ticker",
			reason: "value length must be between 1 and 16 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetTickerIBKR()); l < 0 || l > 16 {
		err := InstrumentUpdateRequestValidationError{
			field:  "TickerIBKR",
			reason: "value length must be between 0 and 16 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetExchange()); l < 1 || l > 8 {
		err := InstrumentUpdateRequestValidationError{
			field:  "Exchange",
			reason: "value length must be between 1 and 8 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 64 {
		err := InstrumentUpdateRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetIsin()) != 16 {
		err := InstrumentUpdateRequestValidationError{
			field:  "Isin",
			reason: "value length must be 16 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if l := utf8.RuneCountInString(m.GetDescription()); l < 1 || l > 8164 {
		err := InstrumentUpdateRequestValidationError{
			field:  "Description",
			reason: "value length must be between 1 and 8164 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetActivity() > 50 {
		err := InstrumentUpdateRequestValidationError{
			field:  "Activity",
			reason: "value must be less than or equal to 50",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Adr

	if m.GetFiscalMonthEnd() >= 1 {
		err := InstrumentUpdateRequestValidationError{
			field:  "FiscalMonthEnd",
			reason: "value must be less than 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCurrencyReport()) != 3 {
		err := InstrumentUpdateRequestValidationError{
			field:  "CurrencyReport",
			reason: "value length must be 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if m.GetEmployees() != 0 {

	}

	if m.GetSharesPerListing() != 0 {

	}

	if m.GetSharesOut() > 1 {
		err := InstrumentUpdateRequestValidationError{
			field:  "SharesOut",
			reason: "value must be less than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetSharesFloat() > 1 {
		err := InstrumentUpdateRequestValidationError{
			field:  "SharesFloat",
			reason: "value must be less than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetEmail() != "" {

	}

	if m.GetWebsite() != "" {

	}

	if m.GetPhone() != "" {

	}

	if m.GetStreet() != "" {

	}

	if m.GetCity() != "" {

	}

	if m.GetState() != "" {

	}

	if utf8.RuneCountInString(m.GetCountry()) != 2 {
		err := InstrumentUpdateRequestValidationError{
			field:  "Country",
			reason: "value length must be 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return InstrumentUpdateRequestMultiError(errors)
	}

	return nil
}

// InstrumentUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by InstrumentUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type InstrumentUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstrumentUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstrumentUpdateRequestMultiError) AllErrors() []error { return m }

// InstrumentUpdateRequestValidationError is the validation error returned by
// InstrumentUpdateRequest.Validate if the designated constraints aren't met.
type InstrumentUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstrumentUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstrumentUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstrumentUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstrumentUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstrumentUpdateRequestValidationError) ErrorName() string {
	return "InstrumentUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InstrumentUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstrumentUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstrumentUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstrumentUpdateRequestValidationError{}

// Validate checks the field values on InstrumentDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstrumentDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstrumentDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstrumentDeleteRequestMultiError, or nil if none found.
func (m *InstrumentDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InstrumentDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	_InstrumentDeleteRequest_Tickers_Unique := make(map[int64]struct{}, len(m.GetTickers()))

	for idx, item := range m.GetTickers() {
		_, _ = idx, item

		if _, exists := _InstrumentDeleteRequest_Tickers_Unique[item]; exists {
			err := InstrumentDeleteRequestValidationError{
				field:  fmt.Sprintf("Tickers[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_InstrumentDeleteRequest_Tickers_Unique[item] = struct{}{}
		}

		// no validation rules for Tickers[idx]
	}

	_InstrumentDeleteRequest_Exchanges_Unique := make(map[string]struct{}, len(m.GetExchanges()))

	for idx, item := range m.GetExchanges() {
		_, _ = idx, item

		if _, exists := _InstrumentDeleteRequest_Exchanges_Unique[item]; exists {
			err := InstrumentDeleteRequestValidationError{
				field:  fmt.Sprintf("Exchanges[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_InstrumentDeleteRequest_Exchanges_Unique[item] = struct{}{}
		}

		// no validation rules for Exchanges[idx]
	}

	if len(errors) > 0 {
		return InstrumentDeleteRequestMultiError(errors)
	}

	return nil
}

// InstrumentDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by InstrumentDeleteRequest.ValidateAll() if the designated
// constraints aren't met.
type InstrumentDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstrumentDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstrumentDeleteRequestMultiError) AllErrors() []error { return m }

// InstrumentDeleteRequestValidationError is the validation error returned by
// InstrumentDeleteRequest.Validate if the designated constraints aren't met.
type InstrumentDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstrumentDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstrumentDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstrumentDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstrumentDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstrumentDeleteRequestValidationError) ErrorName() string {
	return "InstrumentDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InstrumentDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstrumentDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstrumentDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstrumentDeleteRequestValidationError{}

// Validate checks the field values on InstrumentAddress with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *InstrumentAddress) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstrumentAddress with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstrumentAddressMultiError, or nil if none found.
func (m *InstrumentAddress) ValidateAll() error {
	return m.validate(true)
}

func (m *InstrumentAddress) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Street

	// no validation rules for City

	// no validation rules for State

	// no validation rules for Country

	if len(errors) > 0 {
		return InstrumentAddressMultiError(errors)
	}

	return nil
}

// InstrumentAddressMultiError is an error wrapping multiple validation errors
// returned by InstrumentAddress.ValidateAll() if the designated constraints
// aren't met.
type InstrumentAddressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstrumentAddressMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstrumentAddressMultiError) AllErrors() []error { return m }

// InstrumentAddressValidationError is the validation error returned by
// InstrumentAddress.Validate if the designated constraints aren't met.
type InstrumentAddressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstrumentAddressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstrumentAddressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstrumentAddressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstrumentAddressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstrumentAddressValidationError) ErrorName() string {
	return "InstrumentAddressValidationError"
}

// Error satisfies the builtin error interface
func (e InstrumentAddressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstrumentAddress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstrumentAddressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstrumentAddressValidationError{}

// Validate checks the field values on InstrumentContact with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *InstrumentContact) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstrumentContact with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstrumentContactMultiError, or nil if none found.
func (m *InstrumentContact) ValidateAll() error {
	return m.validate(true)
}

func (m *InstrumentContact) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Phone

	// no validation rules for Website

	// no validation rules for Email

	if len(errors) > 0 {
		return InstrumentContactMultiError(errors)
	}

	return nil
}

// InstrumentContactMultiError is an error wrapping multiple validation errors
// returned by InstrumentContact.ValidateAll() if the designated constraints
// aren't met.
type InstrumentContactMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstrumentContactMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstrumentContactMultiError) AllErrors() []error { return m }

// InstrumentContactValidationError is the validation error returned by
// InstrumentContact.Validate if the designated constraints aren't met.
type InstrumentContactValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstrumentContactValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstrumentContactValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstrumentContactValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstrumentContactValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstrumentContactValidationError) ErrorName() string {
	return "InstrumentContactValidationError"
}

// Error satisfies the builtin error interface
func (e InstrumentContactValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstrumentContact.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstrumentContactValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstrumentContactValidationError{}

// Validate checks the field values on InstrumentReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *InstrumentReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstrumentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstrumentReplyMultiError, or nil if none found.
func (m *InstrumentReply) ValidateAll() error {
	return m.validate(true)
}

func (m *InstrumentReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Ticker

	// no validation rules for TickerAlternative

	// no validation rules for Name

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetExchange()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstrumentReplyValidationError{
					field:  "Exchange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstrumentReplyValidationError{
					field:  "Exchange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExchange()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstrumentReplyValidationError{
				field:  "Exchange",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Asset

	// no validation rules for Isin

	// no validation rules for Adr

	// no validation rules for Activity

	if all {
		switch v := interface{}(m.GetQuote()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstrumentReplyValidationError{
					field:  "Quote",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstrumentReplyValidationError{
					field:  "Quote",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQuote()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstrumentReplyValidationError{
				field:  "Quote",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDividends()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstrumentReplyValidationError{
					field:  "Dividends",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstrumentReplyValidationError{
					field:  "Dividends",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDividends()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstrumentReplyValidationError{
				field:  "Dividends",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStats()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstrumentReplyValidationError{
					field:  "Stats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstrumentReplyValidationError{
					field:  "Stats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStats()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstrumentReplyValidationError{
				field:  "Stats",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Employees

	// no validation rules for CurrencyReport

	// no validation rules for FiscalYearEnd

	if all {
		switch v := interface{}(m.GetContact()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstrumentReplyValidationError{
					field:  "Contact",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstrumentReplyValidationError{
					field:  "Contact",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContact()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstrumentReplyValidationError{
				field:  "Contact",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstrumentReplyValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstrumentReplyValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstrumentReplyValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstrumentReplyValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstrumentReplyValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstrumentReplyValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstrumentReplyValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstrumentReplyValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstrumentReplyValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InstrumentReplyMultiError(errors)
	}

	return nil
}

// InstrumentReplyMultiError is an error wrapping multiple validation errors
// returned by InstrumentReply.ValidateAll() if the designated constraints
// aren't met.
type InstrumentReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstrumentReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstrumentReplyMultiError) AllErrors() []error { return m }

// InstrumentReplyValidationError is the validation error returned by
// InstrumentReply.Validate if the designated constraints aren't met.
type InstrumentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstrumentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstrumentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstrumentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstrumentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstrumentReplyValidationError) ErrorName() string { return "InstrumentReplyValidationError" }

// Error satisfies the builtin error interface
func (e InstrumentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstrumentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstrumentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstrumentReplyValidationError{}

// Validate checks the field values on InstrumentReplies with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *InstrumentReplies) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstrumentReplies with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstrumentRepliesMultiError, or nil if none found.
func (m *InstrumentReplies) ValidateAll() error {
	return m.validate(true)
}

func (m *InstrumentReplies) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InstrumentRepliesValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InstrumentRepliesValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InstrumentRepliesValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return InstrumentRepliesMultiError(errors)
	}

	return nil
}

// InstrumentRepliesMultiError is an error wrapping multiple validation errors
// returned by InstrumentReplies.ValidateAll() if the designated constraints
// aren't met.
type InstrumentRepliesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstrumentRepliesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstrumentRepliesMultiError) AllErrors() []error { return m }

// InstrumentRepliesValidationError is the validation error returned by
// InstrumentReplies.Validate if the designated constraints aren't met.
type InstrumentRepliesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstrumentRepliesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstrumentRepliesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstrumentRepliesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstrumentRepliesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstrumentRepliesValidationError) ErrorName() string {
	return "InstrumentRepliesValidationError"
}

// Error satisfies the builtin error interface
func (e InstrumentRepliesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstrumentReplies.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstrumentRepliesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstrumentRepliesValidationError{}

// Validate checks the field values on InstrumentDelete with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *InstrumentDelete) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstrumentDelete with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstrumentDeleteMultiError, or nil if none found.
func (m *InstrumentDelete) ValidateAll() error {
	return m.validate(true)
}

func (m *InstrumentDelete) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	if len(errors) > 0 {
		return InstrumentDeleteMultiError(errors)
	}

	return nil
}

// InstrumentDeleteMultiError is an error wrapping multiple validation errors
// returned by InstrumentDelete.ValidateAll() if the designated constraints
// aren't met.
type InstrumentDeleteMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstrumentDeleteMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstrumentDeleteMultiError) AllErrors() []error { return m }

// InstrumentDeleteValidationError is the validation error returned by
// InstrumentDelete.Validate if the designated constraints aren't met.
type InstrumentDeleteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstrumentDeleteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstrumentDeleteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstrumentDeleteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstrumentDeleteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstrumentDeleteValidationError) ErrorName() string { return "InstrumentDeleteValidationError" }

// Error satisfies the builtin error interface
func (e InstrumentDeleteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstrumentDelete.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstrumentDeleteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstrumentDeleteValidationError{}

// Validate checks the field values on InstrumentReply_Exchange with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstrumentReply_Exchange) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstrumentReply_Exchange with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstrumentReply_ExchangeMultiError, or nil if none found.
func (m *InstrumentReply_Exchange) ValidateAll() error {
	return m.validate(true)
}

func (m *InstrumentReply_Exchange) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ticker

	// no validation rules for Routing

	// no validation rules for Currency

	// no validation rules for Open

	if len(errors) > 0 {
		return InstrumentReply_ExchangeMultiError(errors)
	}

	return nil
}

// InstrumentReply_ExchangeMultiError is an error wrapping multiple validation
// errors returned by InstrumentReply_Exchange.ValidateAll() if the designated
// constraints aren't met.
type InstrumentReply_ExchangeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstrumentReply_ExchangeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstrumentReply_ExchangeMultiError) AllErrors() []error { return m }

// InstrumentReply_ExchangeValidationError is the validation error returned by
// InstrumentReply_Exchange.Validate if the designated constraints aren't met.
type InstrumentReply_ExchangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstrumentReply_ExchangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstrumentReply_ExchangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstrumentReply_ExchangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstrumentReply_ExchangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstrumentReply_ExchangeValidationError) ErrorName() string {
	return "InstrumentReply_ExchangeValidationError"
}

// Error satisfies the builtin error interface
func (e InstrumentReply_ExchangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstrumentReply_Exchange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstrumentReply_ExchangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstrumentReply_ExchangeValidationError{}

// Validate checks the field values on InstrumentReply_Dividend with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstrumentReply_Dividend) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstrumentReply_Dividend with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstrumentReply_DividendMultiError, or nil if none found.
func (m *InstrumentReply_Dividend) ValidateAll() error {
	return m.validate(true)
}

func (m *InstrumentReply_Dividend) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCreatedAt() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InstrumentReply_DividendValidationError{
						field:  fmt.Sprintf("CreatedAt[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InstrumentReply_DividendValidationError{
						field:  fmt.Sprintf("CreatedAt[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InstrumentReply_DividendValidationError{
					field:  fmt.Sprintf("CreatedAt[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return InstrumentReply_DividendMultiError(errors)
	}

	return nil
}

// InstrumentReply_DividendMultiError is an error wrapping multiple validation
// errors returned by InstrumentReply_Dividend.ValidateAll() if the designated
// constraints aren't met.
type InstrumentReply_DividendMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstrumentReply_DividendMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstrumentReply_DividendMultiError) AllErrors() []error { return m }

// InstrumentReply_DividendValidationError is the validation error returned by
// InstrumentReply_Dividend.Validate if the designated constraints aren't met.
type InstrumentReply_DividendValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstrumentReply_DividendValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstrumentReply_DividendValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstrumentReply_DividendValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstrumentReply_DividendValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstrumentReply_DividendValidationError) ErrorName() string {
	return "InstrumentReply_DividendValidationError"
}

// Error satisfies the builtin error interface
func (e InstrumentReply_DividendValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstrumentReply_Dividend.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstrumentReply_DividendValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstrumentReply_DividendValidationError{}

// Validate checks the field values on InstrumentReply_Stats with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstrumentReply_Stats) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstrumentReply_Stats with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstrumentReply_StatsMultiError, or nil if none found.
func (m *InstrumentReply_Stats) ValidateAll() error {
	return m.validate(true)
}

func (m *InstrumentReply_Stats) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPrice()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstrumentReply_StatsValidationError{
					field:  "Price",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstrumentReply_StatsValidationError{
					field:  "Price",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPrice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstrumentReply_StatsValidationError{
				field:  "Price",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetVolume()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstrumentReply_StatsValidationError{
					field:  "Volume",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstrumentReply_StatsValidationError{
					field:  "Volume",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVolume()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstrumentReply_StatsValidationError{
				field:  "Volume",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetShares()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstrumentReply_StatsValidationError{
					field:  "Shares",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstrumentReply_StatsValidationError{
					field:  "Shares",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShares()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstrumentReply_StatsValidationError{
				field:  "Shares",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstrumentReply_StatsValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstrumentReply_StatsValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstrumentReply_StatsValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InstrumentReply_StatsMultiError(errors)
	}

	return nil
}

// InstrumentReply_StatsMultiError is an error wrapping multiple validation
// errors returned by InstrumentReply_Stats.ValidateAll() if the designated
// constraints aren't met.
type InstrumentReply_StatsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstrumentReply_StatsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstrumentReply_StatsMultiError) AllErrors() []error { return m }

// InstrumentReply_StatsValidationError is the validation error returned by
// InstrumentReply_Stats.Validate if the designated constraints aren't met.
type InstrumentReply_StatsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstrumentReply_StatsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstrumentReply_StatsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstrumentReply_StatsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstrumentReply_StatsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstrumentReply_StatsValidationError) ErrorName() string {
	return "InstrumentReply_StatsValidationError"
}

// Error satisfies the builtin error interface
func (e InstrumentReply_StatsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstrumentReply_Stats.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstrumentReply_StatsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstrumentReply_StatsValidationError{}

// Validate checks the field values on InstrumentReply_Stats_Shares with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstrumentReply_Stats_Shares) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstrumentReply_Stats_Shares with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstrumentReply_Stats_SharesMultiError, or nil if none found.
func (m *InstrumentReply_Stats_Shares) ValidateAll() error {
	return m.validate(true)
}

func (m *InstrumentReply_Stats_Shares) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Outstanding

	// no validation rules for Float

	// no validation rules for Div

	if len(errors) > 0 {
		return InstrumentReply_Stats_SharesMultiError(errors)
	}

	return nil
}

// InstrumentReply_Stats_SharesMultiError is an error wrapping multiple
// validation errors returned by InstrumentReply_Stats_Shares.ValidateAll() if
// the designated constraints aren't met.
type InstrumentReply_Stats_SharesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstrumentReply_Stats_SharesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstrumentReply_Stats_SharesMultiError) AllErrors() []error { return m }

// InstrumentReply_Stats_SharesValidationError is the validation error returned
// by InstrumentReply_Stats_Shares.Validate if the designated constraints
// aren't met.
type InstrumentReply_Stats_SharesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstrumentReply_Stats_SharesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstrumentReply_Stats_SharesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstrumentReply_Stats_SharesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstrumentReply_Stats_SharesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstrumentReply_Stats_SharesValidationError) ErrorName() string {
	return "InstrumentReply_Stats_SharesValidationError"
}

// Error satisfies the builtin error interface
func (e InstrumentReply_Stats_SharesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstrumentReply_Stats_Shares.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstrumentReply_Stats_SharesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstrumentReply_Stats_SharesValidationError{}

// Validate checks the field values on InstrumentReplies_Result with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstrumentReplies_Result) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstrumentReplies_Result with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstrumentReplies_ResultMultiError, or nil if none found.
func (m *InstrumentReplies_Result) ValidateAll() error {
	return m.validate(true)
}

func (m *InstrumentReplies_Result) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Ticker

	// no validation rules for TickerAlternative

	// no validation rules for Name

	// no validation rules for Exchange

	// no validation rules for Isin

	// no validation rules for Asset

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstrumentReplies_ResultValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstrumentReplies_ResultValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstrumentReplies_ResultValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstrumentReplies_ResultValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstrumentReplies_ResultValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstrumentReplies_ResultValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InstrumentReplies_ResultMultiError(errors)
	}

	return nil
}

// InstrumentReplies_ResultMultiError is an error wrapping multiple validation
// errors returned by InstrumentReplies_Result.ValidateAll() if the designated
// constraints aren't met.
type InstrumentReplies_ResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstrumentReplies_ResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstrumentReplies_ResultMultiError) AllErrors() []error { return m }

// InstrumentReplies_ResultValidationError is the validation error returned by
// InstrumentReplies_Result.Validate if the designated constraints aren't met.
type InstrumentReplies_ResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstrumentReplies_ResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstrumentReplies_ResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstrumentReplies_ResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstrumentReplies_ResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstrumentReplies_ResultValidationError) ErrorName() string {
	return "InstrumentReplies_ResultValidationError"
}

// Error satisfies the builtin error interface
func (e InstrumentReplies_ResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstrumentReplies_Result.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstrumentReplies_ResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstrumentReplies_ResultValidationError{}
