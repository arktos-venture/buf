// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1Instruments

import (
	context "context"
	v1 "github.com/arktos-venture/buf/proto/strategies/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InstrumentsClient is the client API for Instruments service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InstrumentsClient interface {
	// Public API: Get Instrument properties
	Get(ctx context.Context, in *InstrumentRequest, opts ...grpc.CallOption) (*InstrumentReply, error)
	// Private API: Get Stats Instrument
	Stats(ctx context.Context, in *InstrumentRequest, opts ...grpc.CallOption) (*InstrumentStatsReply, error)
	// Public API: Get Strategies Results Instrument
	Strategies(ctx context.Context, in *InstrumentStrategiesRequest, opts ...grpc.CallOption) (*v1.StrategiesReplies, error)
	// Private API: Search instruments, only for start imports
	Search(ctx context.Context, in *InstrumentSearchRequest, opts ...grpc.CallOption) (*InstrumentReplies, error)
}

type instrumentsClient struct {
	cc grpc.ClientConnInterface
}

func NewInstrumentsClient(cc grpc.ClientConnInterface) InstrumentsClient {
	return &instrumentsClient{cc}
}

func (c *instrumentsClient) Get(ctx context.Context, in *InstrumentRequest, opts ...grpc.CallOption) (*InstrumentReply, error) {
	out := new(InstrumentReply)
	err := c.cc.Invoke(ctx, "/instruments.v1.instruments/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instrumentsClient) Stats(ctx context.Context, in *InstrumentRequest, opts ...grpc.CallOption) (*InstrumentStatsReply, error) {
	out := new(InstrumentStatsReply)
	err := c.cc.Invoke(ctx, "/instruments.v1.instruments/Stats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instrumentsClient) Strategies(ctx context.Context, in *InstrumentStrategiesRequest, opts ...grpc.CallOption) (*v1.StrategiesReplies, error) {
	out := new(v1.StrategiesReplies)
	err := c.cc.Invoke(ctx, "/instruments.v1.instruments/Strategies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instrumentsClient) Search(ctx context.Context, in *InstrumentSearchRequest, opts ...grpc.CallOption) (*InstrumentReplies, error) {
	out := new(InstrumentReplies)
	err := c.cc.Invoke(ctx, "/instruments.v1.instruments/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InstrumentsServer is the server API for Instruments service.
// All implementations must embed UnimplementedInstrumentsServer
// for forward compatibility
type InstrumentsServer interface {
	// Public API: Get Instrument properties
	Get(context.Context, *InstrumentRequest) (*InstrumentReply, error)
	// Private API: Get Stats Instrument
	Stats(context.Context, *InstrumentRequest) (*InstrumentStatsReply, error)
	// Public API: Get Strategies Results Instrument
	Strategies(context.Context, *InstrumentStrategiesRequest) (*v1.StrategiesReplies, error)
	// Private API: Search instruments, only for start imports
	Search(context.Context, *InstrumentSearchRequest) (*InstrumentReplies, error)
	mustEmbedUnimplementedInstrumentsServer()
}

// UnimplementedInstrumentsServer must be embedded to have forward compatible implementations.
type UnimplementedInstrumentsServer struct {
}

func (UnimplementedInstrumentsServer) Get(context.Context, *InstrumentRequest) (*InstrumentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedInstrumentsServer) Stats(context.Context, *InstrumentRequest) (*InstrumentStatsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stats not implemented")
}
func (UnimplementedInstrumentsServer) Strategies(context.Context, *InstrumentStrategiesRequest) (*v1.StrategiesReplies, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Strategies not implemented")
}
func (UnimplementedInstrumentsServer) Search(context.Context, *InstrumentSearchRequest) (*InstrumentReplies, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedInstrumentsServer) mustEmbedUnimplementedInstrumentsServer() {}

// UnsafeInstrumentsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InstrumentsServer will
// result in compilation errors.
type UnsafeInstrumentsServer interface {
	mustEmbedUnimplementedInstrumentsServer()
}

func RegisterInstrumentsServer(s grpc.ServiceRegistrar, srv InstrumentsServer) {
	s.RegisterService(&Instruments_ServiceDesc, srv)
}

func _Instruments_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstrumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstrumentsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/instruments.v1.instruments/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstrumentsServer).Get(ctx, req.(*InstrumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Instruments_Stats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstrumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstrumentsServer).Stats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/instruments.v1.instruments/Stats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstrumentsServer).Stats(ctx, req.(*InstrumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Instruments_Strategies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstrumentStrategiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstrumentsServer).Strategies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/instruments.v1.instruments/Strategies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstrumentsServer).Strategies(ctx, req.(*InstrumentStrategiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Instruments_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstrumentSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstrumentsServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/instruments.v1.instruments/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstrumentsServer).Search(ctx, req.(*InstrumentSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Instruments_ServiceDesc is the grpc.ServiceDesc for Instruments service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Instruments_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "instruments.v1.instruments",
	HandlerType: (*InstrumentsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Instruments_Get_Handler,
		},
		{
			MethodName: "Stats",
			Handler:    _Instruments_Stats_Handler,
		},
		{
			MethodName: "Strategies",
			Handler:    _Instruments_Strategies_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _Instruments_Search_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/instruments/v1/instruments.proto",
}
