// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/forexes/v1/forexes.proto

package forexes_v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ForexRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ForexRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ForexRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ForexRequestMultiError, or
// nil if none found.
func (m *ForexRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ForexRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetTicker()) != 6 {
		err := ForexRequestValidationError{
			field:  "Ticker",
			reason: "value length must be 6 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return ForexRequestMultiError(errors)
	}

	return nil
}

// ForexRequestMultiError is an error wrapping multiple validation errors
// returned by ForexRequest.ValidateAll() if the designated constraints aren't met.
type ForexRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ForexRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ForexRequestMultiError) AllErrors() []error { return m }

// ForexRequestValidationError is the validation error returned by
// ForexRequest.Validate if the designated constraints aren't met.
type ForexRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ForexRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ForexRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ForexRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ForexRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ForexRequestValidationError) ErrorName() string { return "ForexRequestValidationError" }

// Error satisfies the builtin error interface
func (e ForexRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sForexRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ForexRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ForexRequestValidationError{}

// Validate checks the field values on ForexListRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ForexListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ForexListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ForexListRequestMultiError, or nil if none found.
func (m *ForexListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ForexListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetCurrency()) != 3 {
		err := ForexListRequestValidationError{
			field:  "Currency",
			reason: "value length must be 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return ForexListRequestMultiError(errors)
	}

	return nil
}

// ForexListRequestMultiError is an error wrapping multiple validation errors
// returned by ForexListRequest.ValidateAll() if the designated constraints
// aren't met.
type ForexListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ForexListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ForexListRequestMultiError) AllErrors() []error { return m }

// ForexListRequestValidationError is the validation error returned by
// ForexListRequest.Validate if the designated constraints aren't met.
type ForexListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ForexListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ForexListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ForexListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ForexListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ForexListRequestValidationError) ErrorName() string { return "ForexListRequestValidationError" }

// Error satisfies the builtin error interface
func (e ForexListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sForexListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ForexListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ForexListRequestValidationError{}

// Validate checks the field values on ForexCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ForexCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ForexCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ForexCreateRequestMultiError, or nil if none found.
func (m *ForexCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ForexCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetFrom()) != 3 {
		err := ForexCreateRequestValidationError{
			field:  "From",
			reason: "value length must be 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if utf8.RuneCountInString(m.GetTo()) != 3 {
		err := ForexCreateRequestValidationError{
			field:  "To",
			reason: "value length must be 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return ForexCreateRequestMultiError(errors)
	}

	return nil
}

// ForexCreateRequestMultiError is an error wrapping multiple validation errors
// returned by ForexCreateRequest.ValidateAll() if the designated constraints
// aren't met.
type ForexCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ForexCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ForexCreateRequestMultiError) AllErrors() []error { return m }

// ForexCreateRequestValidationError is the validation error returned by
// ForexCreateRequest.Validate if the designated constraints aren't met.
type ForexCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ForexCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ForexCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ForexCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ForexCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ForexCreateRequestValidationError) ErrorName() string {
	return "ForexCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ForexCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sForexCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ForexCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ForexCreateRequestValidationError{}

// Validate checks the field values on ForexDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ForexDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ForexDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ForexDeleteRequestMultiError, or nil if none found.
func (m *ForexDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ForexDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetTickers()) < 1 {
		err := ForexDeleteRequestValidationError{
			field:  "Tickers",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_ForexDeleteRequest_Tickers_Unique := make(map[string]struct{}, len(m.GetTickers()))

	for idx, item := range m.GetTickers() {
		_, _ = idx, item

		if _, exists := _ForexDeleteRequest_Tickers_Unique[item]; exists {
			err := ForexDeleteRequestValidationError{
				field:  fmt.Sprintf("Tickers[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_ForexDeleteRequest_Tickers_Unique[item] = struct{}{}
		}

		// no validation rules for Tickers[idx]
	}

	if len(errors) > 0 {
		return ForexDeleteRequestMultiError(errors)
	}

	return nil
}

// ForexDeleteRequestMultiError is an error wrapping multiple validation errors
// returned by ForexDeleteRequest.ValidateAll() if the designated constraints
// aren't met.
type ForexDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ForexDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ForexDeleteRequestMultiError) AllErrors() []error { return m }

// ForexDeleteRequestValidationError is the validation error returned by
// ForexDeleteRequest.Validate if the designated constraints aren't met.
type ForexDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ForexDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ForexDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ForexDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ForexDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ForexDeleteRequestValidationError) ErrorName() string {
	return "ForexDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ForexDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sForexDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ForexDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ForexDeleteRequestValidationError{}

// Validate checks the field values on ForexReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ForexReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ForexReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ForexReplyMultiError, or
// nil if none found.
func (m *ForexReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ForexReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ticker

	if all {
		switch v := interface{}(m.GetQuote()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ForexReplyValidationError{
					field:  "Quote",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ForexReplyValidationError{
					field:  "Quote",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQuote()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ForexReplyValidationError{
				field:  "Quote",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFrom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ForexReplyValidationError{
					field:  "From",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ForexReplyValidationError{
					field:  "From",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ForexReplyValidationError{
				field:  "From",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ForexReplyValidationError{
					field:  "To",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ForexReplyValidationError{
					field:  "To",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ForexReplyValidationError{
				field:  "To",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ForexReplyMultiError(errors)
	}

	return nil
}

// ForexReplyMultiError is an error wrapping multiple validation errors
// returned by ForexReply.ValidateAll() if the designated constraints aren't met.
type ForexReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ForexReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ForexReplyMultiError) AllErrors() []error { return m }

// ForexReplyValidationError is the validation error returned by
// ForexReply.Validate if the designated constraints aren't met.
type ForexReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ForexReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ForexReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ForexReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ForexReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ForexReplyValidationError) ErrorName() string { return "ForexReplyValidationError" }

// Error satisfies the builtin error interface
func (e ForexReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sForexReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ForexReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ForexReplyValidationError{}

// Validate checks the field values on ForexListReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ForexListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ForexListReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ForexListReplyMultiError,
// or nil if none found.
func (m *ForexListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ForexListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Currency

	if len(errors) > 0 {
		return ForexListReplyMultiError(errors)
	}

	return nil
}

// ForexListReplyMultiError is an error wrapping multiple validation errors
// returned by ForexListReply.ValidateAll() if the designated constraints
// aren't met.
type ForexListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ForexListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ForexListReplyMultiError) AllErrors() []error { return m }

// ForexListReplyValidationError is the validation error returned by
// ForexListReply.Validate if the designated constraints aren't met.
type ForexListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ForexListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ForexListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ForexListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ForexListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ForexListReplyValidationError) ErrorName() string { return "ForexListReplyValidationError" }

// Error satisfies the builtin error interface
func (e ForexListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sForexListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ForexListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ForexListReplyValidationError{}

// Validate checks the field values on ForexDeleteReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ForexDeleteReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ForexDeleteReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ForexDeleteReplyMultiError, or nil if none found.
func (m *ForexDeleteReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ForexDeleteReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	if len(errors) > 0 {
		return ForexDeleteReplyMultiError(errors)
	}

	return nil
}

// ForexDeleteReplyMultiError is an error wrapping multiple validation errors
// returned by ForexDeleteReply.ValidateAll() if the designated constraints
// aren't met.
type ForexDeleteReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ForexDeleteReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ForexDeleteReplyMultiError) AllErrors() []error { return m }

// ForexDeleteReplyValidationError is the validation error returned by
// ForexDeleteReply.Validate if the designated constraints aren't met.
type ForexDeleteReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ForexDeleteReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ForexDeleteReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ForexDeleteReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ForexDeleteReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ForexDeleteReplyValidationError) ErrorName() string { return "ForexDeleteReplyValidationError" }

// Error satisfies the builtin error interface
func (e ForexDeleteReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sForexDeleteReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ForexDeleteReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ForexDeleteReplyValidationError{}

// Validate checks the field values on ForexReply_Currency with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ForexReply_Currency) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ForexReply_Currency with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ForexReply_CurrencyMultiError, or nil if none found.
func (m *ForexReply_Currency) ValidateAll() error {
	return m.validate(true)
}

func (m *ForexReply_Currency) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return ForexReply_CurrencyMultiError(errors)
	}

	return nil
}

// ForexReply_CurrencyMultiError is an error wrapping multiple validation
// errors returned by ForexReply_Currency.ValidateAll() if the designated
// constraints aren't met.
type ForexReply_CurrencyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ForexReply_CurrencyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ForexReply_CurrencyMultiError) AllErrors() []error { return m }

// ForexReply_CurrencyValidationError is the validation error returned by
// ForexReply_Currency.Validate if the designated constraints aren't met.
type ForexReply_CurrencyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ForexReply_CurrencyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ForexReply_CurrencyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ForexReply_CurrencyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ForexReply_CurrencyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ForexReply_CurrencyValidationError) ErrorName() string {
	return "ForexReply_CurrencyValidationError"
}

// Error satisfies the builtin error interface
func (e ForexReply_CurrencyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sForexReply_Currency.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ForexReply_CurrencyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ForexReply_CurrencyValidationError{}
