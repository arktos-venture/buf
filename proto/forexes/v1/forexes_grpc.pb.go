// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1Forexes

import (
	context "context"
	v1 "github.com/arktos-venture/buf/proto/quotes/v1"
	v11 "github.com/arktos-venture/buf/proto/strategies/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ForexesClient is the client API for Forexes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ForexesClient interface {
	// Public API
	// Get Forexes properties
	Get(ctx context.Context, in *ForexRequest, opts ...grpc.CallOption) (*ForexReply, error)
	// Private API
	// Get Stats Forex
	Stats(ctx context.Context, in *ForexRequest, opts ...grpc.CallOption) (*ForexStatsReply, error)
	// Public API
	// Get Quotes Forex
	LastQuotes(ctx context.Context, in *ForexRequest, opts ...grpc.CallOption) (*v1.QuoteReply, error)
	// Public API
	// Get Quotes Forex
	Quotes(ctx context.Context, in *ForexQuotesRequest, opts ...grpc.CallOption) (*v1.QuoteReplies, error)
	// Public API
	// Get Strategies Results Forex
	Strategies(ctx context.Context, in *ForexStrategiesRequest, opts ...grpc.CallOption) (*v11.StrategiesReplies, error)
	// Public API
	// List Forexes available
	List(ctx context.Context, in *ForexListRequest, opts ...grpc.CallOption) (*ForexList, error)
	// Private API
	// Create new Forexes
	Create(ctx context.Context, in *ForexCreateRequest, opts ...grpc.CallOption) (*ForexReply, error)
	// Private API
	// Delete Forexes
	Delete(ctx context.Context, in *ForexDeleteRequest, opts ...grpc.CallOption) (*ForexDelete, error)
}

type forexesClient struct {
	cc grpc.ClientConnInterface
}

func NewForexesClient(cc grpc.ClientConnInterface) ForexesClient {
	return &forexesClient{cc}
}

func (c *forexesClient) Get(ctx context.Context, in *ForexRequest, opts ...grpc.CallOption) (*ForexReply, error) {
	out := new(ForexReply)
	err := c.cc.Invoke(ctx, "/forexes.v1.Forexes/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forexesClient) Stats(ctx context.Context, in *ForexRequest, opts ...grpc.CallOption) (*ForexStatsReply, error) {
	out := new(ForexStatsReply)
	err := c.cc.Invoke(ctx, "/forexes.v1.Forexes/Stats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forexesClient) LastQuotes(ctx context.Context, in *ForexRequest, opts ...grpc.CallOption) (*v1.QuoteReply, error) {
	out := new(v1.QuoteReply)
	err := c.cc.Invoke(ctx, "/forexes.v1.Forexes/LastQuotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forexesClient) Quotes(ctx context.Context, in *ForexQuotesRequest, opts ...grpc.CallOption) (*v1.QuoteReplies, error) {
	out := new(v1.QuoteReplies)
	err := c.cc.Invoke(ctx, "/forexes.v1.Forexes/Quotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forexesClient) Strategies(ctx context.Context, in *ForexStrategiesRequest, opts ...grpc.CallOption) (*v11.StrategiesReplies, error) {
	out := new(v11.StrategiesReplies)
	err := c.cc.Invoke(ctx, "/forexes.v1.Forexes/Strategies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forexesClient) List(ctx context.Context, in *ForexListRequest, opts ...grpc.CallOption) (*ForexList, error) {
	out := new(ForexList)
	err := c.cc.Invoke(ctx, "/forexes.v1.Forexes/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forexesClient) Create(ctx context.Context, in *ForexCreateRequest, opts ...grpc.CallOption) (*ForexReply, error) {
	out := new(ForexReply)
	err := c.cc.Invoke(ctx, "/forexes.v1.Forexes/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forexesClient) Delete(ctx context.Context, in *ForexDeleteRequest, opts ...grpc.CallOption) (*ForexDelete, error) {
	out := new(ForexDelete)
	err := c.cc.Invoke(ctx, "/forexes.v1.Forexes/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ForexesServer is the server API for Forexes service.
// All implementations must embed UnimplementedForexesServer
// for forward compatibility
type ForexesServer interface {
	// Public API
	// Get Forexes properties
	Get(context.Context, *ForexRequest) (*ForexReply, error)
	// Private API
	// Get Stats Forex
	Stats(context.Context, *ForexRequest) (*ForexStatsReply, error)
	// Public API
	// Get Quotes Forex
	LastQuotes(context.Context, *ForexRequest) (*v1.QuoteReply, error)
	// Public API
	// Get Quotes Forex
	Quotes(context.Context, *ForexQuotesRequest) (*v1.QuoteReplies, error)
	// Public API
	// Get Strategies Results Forex
	Strategies(context.Context, *ForexStrategiesRequest) (*v11.StrategiesReplies, error)
	// Public API
	// List Forexes available
	List(context.Context, *ForexListRequest) (*ForexList, error)
	// Private API
	// Create new Forexes
	Create(context.Context, *ForexCreateRequest) (*ForexReply, error)
	// Private API
	// Delete Forexes
	Delete(context.Context, *ForexDeleteRequest) (*ForexDelete, error)
	mustEmbedUnimplementedForexesServer()
}

// UnimplementedForexesServer must be embedded to have forward compatible implementations.
type UnimplementedForexesServer struct {
}

func (UnimplementedForexesServer) Get(context.Context, *ForexRequest) (*ForexReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedForexesServer) Stats(context.Context, *ForexRequest) (*ForexStatsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stats not implemented")
}
func (UnimplementedForexesServer) LastQuotes(context.Context, *ForexRequest) (*v1.QuoteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastQuotes not implemented")
}
func (UnimplementedForexesServer) Quotes(context.Context, *ForexQuotesRequest) (*v1.QuoteReplies, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Quotes not implemented")
}
func (UnimplementedForexesServer) Strategies(context.Context, *ForexStrategiesRequest) (*v11.StrategiesReplies, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Strategies not implemented")
}
func (UnimplementedForexesServer) List(context.Context, *ForexListRequest) (*ForexList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedForexesServer) Create(context.Context, *ForexCreateRequest) (*ForexReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedForexesServer) Delete(context.Context, *ForexDeleteRequest) (*ForexDelete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedForexesServer) mustEmbedUnimplementedForexesServer() {}

// UnsafeForexesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ForexesServer will
// result in compilation errors.
type UnsafeForexesServer interface {
	mustEmbedUnimplementedForexesServer()
}

func RegisterForexesServer(s grpc.ServiceRegistrar, srv ForexesServer) {
	s.RegisterService(&Forexes_ServiceDesc, srv)
}

func _Forexes_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForexesServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forexes.v1.Forexes/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForexesServer).Get(ctx, req.(*ForexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forexes_Stats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForexesServer).Stats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forexes.v1.Forexes/Stats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForexesServer).Stats(ctx, req.(*ForexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forexes_LastQuotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForexesServer).LastQuotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forexes.v1.Forexes/LastQuotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForexesServer).LastQuotes(ctx, req.(*ForexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forexes_Quotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForexQuotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForexesServer).Quotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forexes.v1.Forexes/Quotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForexesServer).Quotes(ctx, req.(*ForexQuotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forexes_Strategies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForexStrategiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForexesServer).Strategies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forexes.v1.Forexes/Strategies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForexesServer).Strategies(ctx, req.(*ForexStrategiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forexes_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForexListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForexesServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forexes.v1.Forexes/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForexesServer).List(ctx, req.(*ForexListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forexes_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForexCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForexesServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forexes.v1.Forexes/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForexesServer).Create(ctx, req.(*ForexCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forexes_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForexDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForexesServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forexes.v1.Forexes/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForexesServer).Delete(ctx, req.(*ForexDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Forexes_ServiceDesc is the grpc.ServiceDesc for Forexes service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Forexes_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "forexes.v1.Forexes",
	HandlerType: (*ForexesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Forexes_Get_Handler,
		},
		{
			MethodName: "Stats",
			Handler:    _Forexes_Stats_Handler,
		},
		{
			MethodName: "LastQuotes",
			Handler:    _Forexes_LastQuotes_Handler,
		},
		{
			MethodName: "Quotes",
			Handler:    _Forexes_Quotes_Handler,
		},
		{
			MethodName: "Strategies",
			Handler:    _Forexes_Strategies_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Forexes_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Forexes_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Forexes_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/forexes/v1/forexes.proto",
}
