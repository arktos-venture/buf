// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1Forexes

import (
	context "context"
	v1 "github.com/arktos-venture/buf/proto/strategies/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ForexesClient is the client API for Forexes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ForexesClient interface {
	// Public API: Get Forexes properties
	Get(ctx context.Context, in *ForexRequest, opts ...grpc.CallOption) (*ForexReply, error)
	// Private API: Get Stats Forex
	Stats(ctx context.Context, in *ForexRequest, opts ...grpc.CallOption) (*ForexStatsReply, error)
	// Public API: Get Strategies Results Forex
	Strategies(ctx context.Context, in *ForexStrategiesRequest, opts ...grpc.CallOption) (*v1.StrategiesReplies, error)
	// Private API: List Forexes available
	List(ctx context.Context, in *ForexListRequest, opts ...grpc.CallOption) (*ForexReplies, error)
}

type forexesClient struct {
	cc grpc.ClientConnInterface
}

func NewForexesClient(cc grpc.ClientConnInterface) ForexesClient {
	return &forexesClient{cc}
}

func (c *forexesClient) Get(ctx context.Context, in *ForexRequest, opts ...grpc.CallOption) (*ForexReply, error) {
	out := new(ForexReply)
	err := c.cc.Invoke(ctx, "/forexes.v1.Forexes/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forexesClient) Stats(ctx context.Context, in *ForexRequest, opts ...grpc.CallOption) (*ForexStatsReply, error) {
	out := new(ForexStatsReply)
	err := c.cc.Invoke(ctx, "/forexes.v1.Forexes/Stats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forexesClient) Strategies(ctx context.Context, in *ForexStrategiesRequest, opts ...grpc.CallOption) (*v1.StrategiesReplies, error) {
	out := new(v1.StrategiesReplies)
	err := c.cc.Invoke(ctx, "/forexes.v1.Forexes/Strategies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forexesClient) List(ctx context.Context, in *ForexListRequest, opts ...grpc.CallOption) (*ForexReplies, error) {
	out := new(ForexReplies)
	err := c.cc.Invoke(ctx, "/forexes.v1.Forexes/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ForexesServer is the server API for Forexes service.
// All implementations must embed UnimplementedForexesServer
// for forward compatibility
type ForexesServer interface {
	// Public API: Get Forexes properties
	Get(context.Context, *ForexRequest) (*ForexReply, error)
	// Private API: Get Stats Forex
	Stats(context.Context, *ForexRequest) (*ForexStatsReply, error)
	// Public API: Get Strategies Results Forex
	Strategies(context.Context, *ForexStrategiesRequest) (*v1.StrategiesReplies, error)
	// Private API: List Forexes available
	List(context.Context, *ForexListRequest) (*ForexReplies, error)
	mustEmbedUnimplementedForexesServer()
}

// UnimplementedForexesServer must be embedded to have forward compatible implementations.
type UnimplementedForexesServer struct {
}

func (UnimplementedForexesServer) Get(context.Context, *ForexRequest) (*ForexReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedForexesServer) Stats(context.Context, *ForexRequest) (*ForexStatsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stats not implemented")
}
func (UnimplementedForexesServer) Strategies(context.Context, *ForexStrategiesRequest) (*v1.StrategiesReplies, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Strategies not implemented")
}
func (UnimplementedForexesServer) List(context.Context, *ForexListRequest) (*ForexReplies, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedForexesServer) mustEmbedUnimplementedForexesServer() {}

// UnsafeForexesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ForexesServer will
// result in compilation errors.
type UnsafeForexesServer interface {
	mustEmbedUnimplementedForexesServer()
}

func RegisterForexesServer(s grpc.ServiceRegistrar, srv ForexesServer) {
	s.RegisterService(&Forexes_ServiceDesc, srv)
}

func _Forexes_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForexesServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forexes.v1.Forexes/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForexesServer).Get(ctx, req.(*ForexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forexes_Stats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForexesServer).Stats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forexes.v1.Forexes/Stats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForexesServer).Stats(ctx, req.(*ForexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forexes_Strategies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForexStrategiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForexesServer).Strategies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forexes.v1.Forexes/Strategies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForexesServer).Strategies(ctx, req.(*ForexStrategiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forexes_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForexListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForexesServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forexes.v1.Forexes/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForexesServer).List(ctx, req.(*ForexListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Forexes_ServiceDesc is the grpc.ServiceDesc for Forexes service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Forexes_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "forexes.v1.Forexes",
	HandlerType: (*ForexesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Forexes_Get_Handler,
		},
		{
			MethodName: "Stats",
			Handler:    _Forexes_Stats_Handler,
		},
		{
			MethodName: "Strategies",
			Handler:    _Forexes_Strategies_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Forexes_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/forexes/v1/forexes.proto",
}
