// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: proto/forexes/v1/forexes.proto

package forexes_v1

import (
	v11 "github.com/arktos-venture/buf/proto/currencies/v1"
	v1 "github.com/arktos-venture/buf/proto/quotes/v1"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ForexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticker string `protobuf:"bytes,1,opt,name=ticker,proto3" json:"ticker,omitempty"`
}

func (x *ForexRequest) Reset() {
	*x = ForexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_forexes_v1_forexes_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForexRequest) ProtoMessage() {}

func (x *ForexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_forexes_v1_forexes_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForexRequest.ProtoReflect.Descriptor instead.
func (*ForexRequest) Descriptor() ([]byte, []int) {
	return file_proto_forexes_v1_forexes_proto_rawDescGZIP(), []int{0}
}

func (x *ForexRequest) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

type ForexListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Currency string `protobuf:"bytes,1,opt,name=currency,proto3" json:"currency,omitempty"`
}

func (x *ForexListRequest) Reset() {
	*x = ForexListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_forexes_v1_forexes_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForexListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForexListRequest) ProtoMessage() {}

func (x *ForexListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_forexes_v1_forexes_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForexListRequest.ProtoReflect.Descriptor instead.
func (*ForexListRequest) Descriptor() ([]byte, []int) {
	return file_proto_forexes_v1_forexes_proto_rawDescGZIP(), []int{1}
}

func (x *ForexListRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

type ForexCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To   string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
}

func (x *ForexCreateRequest) Reset() {
	*x = ForexCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_forexes_v1_forexes_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForexCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForexCreateRequest) ProtoMessage() {}

func (x *ForexCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_forexes_v1_forexes_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForexCreateRequest.ProtoReflect.Descriptor instead.
func (*ForexCreateRequest) Descriptor() ([]byte, []int) {
	return file_proto_forexes_v1_forexes_proto_rawDescGZIP(), []int{2}
}

func (x *ForexCreateRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *ForexCreateRequest) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

type ForexDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tickers []string `protobuf:"bytes,1,rep,name=tickers,proto3" json:"tickers,omitempty"`
}

func (x *ForexDeleteRequest) Reset() {
	*x = ForexDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_forexes_v1_forexes_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForexDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForexDeleteRequest) ProtoMessage() {}

func (x *ForexDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_forexes_v1_forexes_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForexDeleteRequest.ProtoReflect.Descriptor instead.
func (*ForexDeleteRequest) Descriptor() ([]byte, []int) {
	return file_proto_forexes_v1_forexes_proto_rawDescGZIP(), []int{3}
}

func (x *ForexDeleteRequest) GetTickers() []string {
	if x != nil {
		return x.Tickers
	}
	return nil
}

type ForexReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticker    string                 `protobuf:"bytes,1,opt,name=ticker,proto3" json:"ticker,omitempty"`
	Quote     *v1.QuoteLastReply     `protobuf:"bytes,2,opt,name=quote,proto3" json:"quote,omitempty"`
	From      *v11.CurrencyReply     `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	To        *v11.CurrencyReply     `protobuf:"bytes,4,opt,name=to,proto3" json:"to,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *ForexReply) Reset() {
	*x = ForexReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_forexes_v1_forexes_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForexReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForexReply) ProtoMessage() {}

func (x *ForexReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_forexes_v1_forexes_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForexReply.ProtoReflect.Descriptor instead.
func (*ForexReply) Descriptor() ([]byte, []int) {
	return file_proto_forexes_v1_forexes_proto_rawDescGZIP(), []int{4}
}

func (x *ForexReply) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *ForexReply) GetQuote() *v1.QuoteLastReply {
	if x != nil {
		return x.Quote
	}
	return nil
}

func (x *ForexReply) GetFrom() *v11.CurrencyReply {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *ForexReply) GetTo() *v11.CurrencyReply {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *ForexReply) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ForexReply) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type ForexList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Currency string   `protobuf:"bytes,1,opt,name=currency,proto3" json:"currency,omitempty"`
	Forexes  []string `protobuf:"bytes,2,rep,name=forexes,proto3" json:"forexes,omitempty"`
}

func (x *ForexList) Reset() {
	*x = ForexList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_forexes_v1_forexes_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForexList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForexList) ProtoMessage() {}

func (x *ForexList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_forexes_v1_forexes_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForexList.ProtoReflect.Descriptor instead.
func (*ForexList) Descriptor() ([]byte, []int) {
	return file_proto_forexes_v1_forexes_proto_rawDescGZIP(), []int{5}
}

func (x *ForexList) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *ForexList) GetForexes() []string {
	if x != nil {
		return x.Forexes
	}
	return nil
}

type ForexDelete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *ForexDelete) Reset() {
	*x = ForexDelete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_forexes_v1_forexes_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForexDelete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForexDelete) ProtoMessage() {}

func (x *ForexDelete) ProtoReflect() protoreflect.Message {
	mi := &file_proto_forexes_v1_forexes_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForexDelete.ProtoReflect.Descriptor instead.
func (*ForexDelete) Descriptor() ([]byte, []int) {
	return file_proto_forexes_v1_forexes_proto_rawDescGZIP(), []int{6}
}

func (x *ForexDelete) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

var File_proto_forexes_v1_forexes_proto protoreflect.FileDescriptor

var file_proto_forexes_v1_forexes_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x66, 0x6f, 0x72, 0x65, 0x78, 0x65, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x66, 0x6f, 0x72, 0x65, 0x78, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0a, 0x66, 0x6f, 0x72, 0x65, 0x78, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e,
	0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x71, 0x75, 0x6f, 0x74,
	0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x24, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x69, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x30, 0x0a, 0x0c, 0x46, 0x6f, 0x72, 0x65,
	0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x98,
	0x01, 0x06, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x22, 0x38, 0x0a, 0x10, 0x46, 0x6f,
	0x72, 0x65, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24,
	0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x98, 0x01, 0x03, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x22, 0x4c, 0x0a, 0x12, 0x46, 0x6f, 0x72, 0x65, 0x78, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x98,
	0x01, 0x03, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x18, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x98, 0x01, 0x03, 0x52, 0x02,
	0x74, 0x6f, 0x22, 0x40, 0x0a, 0x12, 0x46, 0x6f, 0x72, 0x65, 0x78, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x07, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x10, 0xfa, 0x42, 0x05, 0x92, 0x01,
	0x02, 0x08, 0x01, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x18, 0x01, 0x52, 0x07, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x73, 0x22, 0xab, 0x02, 0x0a, 0x0a, 0x46, 0x6f, 0x72, 0x65, 0x78, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x05, 0x71,
	0x75, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x71, 0x75, 0x6f,
	0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x4c, 0x61, 0x73, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x04,
	0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x2c,
	0x0a, 0x02, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x39, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0x41, 0x0a, 0x09, 0x46, 0x6f, 0x72, 0x65, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x66,
	0x6f, 0x72, 0x65, 0x78, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x66, 0x6f,
	0x72, 0x65, 0x78, 0x65, 0x73, 0x22, 0x23, 0x0a, 0x0b, 0x46, 0x6f, 0x72, 0x65, 0x78, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x32, 0xf5, 0x02, 0x0a, 0x07, 0x46,
	0x6f, 0x72, 0x65, 0x78, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x18, 0x2e,
	0x66, 0x6f, 0x72, 0x65, 0x78, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x78,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x66, 0x6f, 0x72, 0x65, 0x78, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x78, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x6f, 0x72,
	0x65, 0x78, 0x65, 0x73, 0x2f, 0x7b, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x7d, 0x12, 0x61, 0x0a,
	0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x2e, 0x66, 0x6f, 0x72, 0x65, 0x78, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x66, 0x6f, 0x72, 0x65, 0x78, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x6f, 0x72, 0x65, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x6f, 0x72, 0x65, 0x78, 0x65, 0x73, 0x2f,
	0x7b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x7d, 0x2f, 0x70, 0x61, 0x69, 0x72, 0x73,
	0x12, 0x58, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x2e, 0x66, 0x6f, 0x72,
	0x65, 0x78, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x78, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x66, 0x6f, 0x72,
	0x65, 0x78, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x78, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x22, 0x0b, 0x2f, 0x76, 0x31, 0x2f,
	0x66, 0x6f, 0x72, 0x65, 0x78, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x56, 0x0a, 0x06, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x12, 0x1e, 0x2e, 0x66, 0x6f, 0x72, 0x65, 0x78, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x78, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x66, 0x6f, 0x72, 0x65, 0x78, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x78, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x13, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x2a, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x6f, 0x72, 0x65, 0x78,
	0x65, 0x73, 0x42, 0x81, 0x03, 0x0a, 0x19, 0x64, 0x65, 0x76, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f,
	0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72, 0x65, 0x78, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x42, 0x11, 0x41, 0x50, 0x49, 0x46, 0x6f, 0x72, 0x65, 0x78, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x56, 0x31, 0x50, 0x01, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x61, 0x72, 0x6b, 0x74, 0x6f, 0x73, 0x2d, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65,
	0x2f, 0x62, 0x75, 0x66, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x66, 0x6f, 0x72, 0x65, 0x78,
	0x65, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x66, 0x6f, 0x72, 0x65, 0x78, 0x65, 0x73, 0x5f, 0x76, 0x31,
	0x92, 0x41, 0x92, 0x02, 0x12, 0x7f, 0x0a, 0x0c, 0x46, 0x6f, 0x72, 0x65, 0x78, 0x65, 0x73, 0x20,
	0x41, 0x50, 0x49, 0x73, 0x12, 0x0c, 0x46, 0x6f, 0x72, 0x65, 0x78, 0x65, 0x73, 0x20, 0x41, 0x50,
	0x49, 0x73, 0x22, 0x5c, 0x0a, 0x16, 0x41, 0x72, 0x6b, 0x74, 0x6f, 0x73, 0x20, 0x56, 0x65, 0x6e,
	0x74, 0x75, 0x72, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x25, 0x68, 0x74,
	0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x61, 0x72, 0x6b, 0x74, 0x6f, 0x73, 0x2d, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x2f,
	0x62, 0x75, 0x66, 0x1a, 0x1b, 0x6f, 0x73, 0x73, 0x40, 0x61, 0x72, 0x6b, 0x74, 0x6f, 0x73, 0x2d,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x32, 0x03, 0x31, 0x2e, 0x30, 0x2a, 0x02, 0x01, 0x02, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x5a, 0x59, 0x0a,
	0x57, 0x0a, 0x06, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x12, 0x4d, 0x08, 0x02, 0x12, 0x38, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x2c, 0x20, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x64, 0x20, 0x62, 0x79,
	0x20, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x3a, 0x20, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x20,
	0x3c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x3e, 0x1a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x02, 0x62, 0x0c, 0x0a, 0x0a, 0x0a, 0x06, 0x62, 0x65,
	0x61, 0x72, 0x65, 0x72, 0x12, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_forexes_v1_forexes_proto_rawDescOnce sync.Once
	file_proto_forexes_v1_forexes_proto_rawDescData = file_proto_forexes_v1_forexes_proto_rawDesc
)

func file_proto_forexes_v1_forexes_proto_rawDescGZIP() []byte {
	file_proto_forexes_v1_forexes_proto_rawDescOnce.Do(func() {
		file_proto_forexes_v1_forexes_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_forexes_v1_forexes_proto_rawDescData)
	})
	return file_proto_forexes_v1_forexes_proto_rawDescData
}

var file_proto_forexes_v1_forexes_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_proto_forexes_v1_forexes_proto_goTypes = []interface{}{
	(*ForexRequest)(nil),          // 0: forexes.v1.ForexRequest
	(*ForexListRequest)(nil),      // 1: forexes.v1.ForexListRequest
	(*ForexCreateRequest)(nil),    // 2: forexes.v1.ForexCreateRequest
	(*ForexDeleteRequest)(nil),    // 3: forexes.v1.ForexDeleteRequest
	(*ForexReply)(nil),            // 4: forexes.v1.ForexReply
	(*ForexList)(nil),             // 5: forexes.v1.ForexList
	(*ForexDelete)(nil),           // 6: forexes.v1.ForexDelete
	(*v1.QuoteLastReply)(nil),     // 7: quotes.v1.QuoteLastReply
	(*v11.CurrencyReply)(nil),     // 8: currencies.v1.CurrencyReply
	(*timestamppb.Timestamp)(nil), // 9: google.protobuf.Timestamp
}
var file_proto_forexes_v1_forexes_proto_depIdxs = []int32{
	7, // 0: forexes.v1.ForexReply.quote:type_name -> quotes.v1.QuoteLastReply
	8, // 1: forexes.v1.ForexReply.from:type_name -> currencies.v1.CurrencyReply
	8, // 2: forexes.v1.ForexReply.to:type_name -> currencies.v1.CurrencyReply
	9, // 3: forexes.v1.ForexReply.created_at:type_name -> google.protobuf.Timestamp
	9, // 4: forexes.v1.ForexReply.updated_at:type_name -> google.protobuf.Timestamp
	0, // 5: forexes.v1.Forexes.Get:input_type -> forexes.v1.ForexRequest
	1, // 6: forexes.v1.Forexes.List:input_type -> forexes.v1.ForexListRequest
	2, // 7: forexes.v1.Forexes.Create:input_type -> forexes.v1.ForexCreateRequest
	3, // 8: forexes.v1.Forexes.Delete:input_type -> forexes.v1.ForexDeleteRequest
	4, // 9: forexes.v1.Forexes.Get:output_type -> forexes.v1.ForexReply
	5, // 10: forexes.v1.Forexes.List:output_type -> forexes.v1.ForexList
	4, // 11: forexes.v1.Forexes.Create:output_type -> forexes.v1.ForexReply
	6, // 12: forexes.v1.Forexes.Delete:output_type -> forexes.v1.ForexDelete
	9, // [9:13] is the sub-list for method output_type
	5, // [5:9] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_proto_forexes_v1_forexes_proto_init() }
func file_proto_forexes_v1_forexes_proto_init() {
	if File_proto_forexes_v1_forexes_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_forexes_v1_forexes_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_forexes_v1_forexes_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForexListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_forexes_v1_forexes_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForexCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_forexes_v1_forexes_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForexDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_forexes_v1_forexes_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForexReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_forexes_v1_forexes_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForexList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_forexes_v1_forexes_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForexDelete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_forexes_v1_forexes_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_forexes_v1_forexes_proto_goTypes,
		DependencyIndexes: file_proto_forexes_v1_forexes_proto_depIdxs,
		MessageInfos:      file_proto_forexes_v1_forexes_proto_msgTypes,
	}.Build()
	File_proto_forexes_v1_forexes_proto = out.File
	file_proto_forexes_v1_forexes_proto_rawDesc = nil
	file_proto_forexes_v1_forexes_proto_goTypes = nil
	file_proto_forexes_v1_forexes_proto_depIdxs = nil
}
