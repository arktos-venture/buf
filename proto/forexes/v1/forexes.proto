syntax = "proto3";

package forexes.v1;

import "google/api/annotations.proto";
import "validate/validate.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

import "proto/quotes/v1/quotes.proto";
import "proto/currencies/v1/currencies.proto";
import "proto/strategies/v1/strategies.proto";

option go_package = "github.com/arktos-venture/buf/proto/forexes/v1;v1Forexes";
option java_multiple_files = true;
option java_package = "dev.kratos.api.forexes.v1";
option java_outer_classname = "APIForexesProtoV1";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
	info: {
        title: "Forexes APIs";
		description: "Forexes APIs";
        version: "1.0";
		contact: {
			name: "Arktos Venture project";
			url: "https://github.com/arktos-venture/buf";
			email: "oss@arktos-consulting.cloud";
		};
  	};
	schemes: [HTTP, HTTPS];
	consumes: "application/json";
	produces: "application/json";
	security_definitions: {
	  	security: {
			key: "bearer"
			value: {
		  		type: TYPE_API_KEY
		  		in: IN_HEADER
		  		name: "Authorization"
		  		description: "Authentication token, prefixed by Bearer: Bearer <token>"
			}
	  	}
	}
	security: {
	  	security_requirement: {
			key: "bearer"
	  	}
	}
};

service Forexes {
	// Public API
	// Get Forexes properties
	rpc Get (ForexRequest) returns (ForexReply)  {
		option (google.api.http) = {
			get: "/v1/forexes/{ticker}"
		};
	}

	// Private API
	// Get Stats Forex
	rpc Stats (ForexRequest) returns (ForexStatsReply) {
		option (google.api.http) = {
			get: "/v1/forexes/{ticker}/stats"
	  	};
	}

	// Public API
	// Get Strategies Results Forex
	rpc Strategies (ForexStrategiesRequest) returns (strategies.v1.StrategiesReplies) {
		option (google.api.http) = {
			get: "/v1/forexes/{ticker}/strategies"
	  	};
	}

	// Public API
	// List Forexes available
	rpc List (ForexListRequest) returns (ForexList)  {
		option (google.api.http) = {
			get: "/v1/forexes/{currency}/pairs"
		};
	}

	// Private API
	// Create new Forexes
	rpc Create (ForexCreateRequest) returns (ForexReply)  {
		option (google.api.http) = {
			post: "/v1/forexes"
			body: "*"
		};
	}

	// Private API
	// Delete Forexes
	rpc Delete (ForexDeleteRequest) returns (ForexDelete)  {
		option (google.api.http) = {
			delete: "/v1/forexes"
		};
	}
}


// 
// Request
// 

message ForexRequest {
	string ticker = 1 [(validate.rules).string.len = 6];
}

message ForexStrategiesRequest {
	string account = 1 [(validate.rules).string = {min_len: 3, max_len: 36}];
	string ticker = 2 [(validate.rules).string.len = 6];
}

message ForexListRequest {
	string currency = 1 [(validate.rules).string.len = 3];
}

message ForexCreateRequest {
	string from = 1 [(validate.rules).string.len = 3];
	string to = 2 [(validate.rules).string.len = 3];
}

message ForexDeleteRequest {
	repeated string tickers = 1 [(validate.rules).repeated.min_items = 1, (validate.rules).repeated.unique = true];
}


// 
// Reply
// 

message ForexReply {
	string ticker = 1;
	quotes.v1.QuoteReply quote = 2;
	ForexStatsReply stats = 3;
	currencies.v1.CurrencyReply from = 4;
	currencies.v1.CurrencyReply to = 5;
	google.protobuf.Timestamp created_at = 6;
	google.protobuf.Timestamp updated_at = 7; 
}

message ForexStatsReply {
	message Price {
		float max_annual = 1;
		float min_annual = 2;
		float return_year = 3;
		float beta5y = 4;
		float start = 5;
	}
		
	message Volume {
		int64 volumeAvg10d = 1;
		int64 volumeAvg30d = 2;
		int64 volumeAvg90d = 3;
	}

	Price price = 1;
	Volume volume = 2;
	google.protobuf.Timestamp created_at = 3;
	google.protobuf.Timestamp updated_at = 4; 
}

message ForexList {
	string currency = 1;
	repeated string forexes = 2;
}

message ForexDelete {
	int64 total = 1;
}