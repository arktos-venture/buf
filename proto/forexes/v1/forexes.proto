syntax = "proto3";

package forexes.v1;

import "google/api/annotations.proto";
import "validate/validate.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "proto/quotes/v1/quotes.proto";

option go_package = "github.com/arktos-venture/buf/proto/forexes/v1;forexes_v1";
option java_multiple_files = true;
option java_package = "dev.kratos.api.forexes.v1";
option java_outer_classname = "APIForexesProtoV1";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
	info: {
        title: "Forexes APIs";
		description: "Forexes APIs";
        version: "1.0";
		contact: {
			name: "Arktos Venture project";
			url: "https://github.com/arktos-venture/buf";
			email: "oss@arktos-consulting.cloud";
		};
  	};
	schemes: [HTTP, HTTPS];
	consumes: "application/json";
	produces: "application/json";
	security_definitions: {
	  	security: {
			key: "bearer"
			value: {
		  		type: TYPE_API_KEY
		  		in: IN_HEADER
		  		name: "Authorization"
		  		description: "Authentication token, prefixed by Bearer: Bearer <token>"
			}
	  	}
	}
	security: {
	  	security_requirement: {
			key: "bearer"
	  	}
	}
};

service Forexes {
	// Public API
	// Get Forexes properties
	rpc Get (ForexRequest) returns (ForexReply)  {
		option (google.api.http) = {
			get: "/v1/forexes/{ticker}"
		};
	}

	// Public API
	// List Forexes available
	rpc List (ForexListRequest) returns (ForexListReply)  {
		option (google.api.http) = {
			get: "/v1/forexes/{currency}/pairs"
		};
	}

	// Private API
	// Create new Forexes
	rpc Create (ForexCreateRequest) returns (ForexReply)  {
		option (google.api.http) = {
			post: "/v1/forexes"
			body: "*"
		};
	}

	// Private API
	// Delete Forexes
	rpc Delete (ForexRequest) returns (ForexDeleteReply)  {
		option (google.api.http) = {
			delete: "/v1/forexes"
		};
	}
}


// 
// Request
// 

message ForexRequest {
	string ticker = 1 [(validate.rules).string.len = 6];
}

message ForexListRequest {
	string currency = 1 [(validate.rules).string.len = 3];
}

message ForexCreateRequest {
	string from = 1 [(validate.rules).string.len = 3];
	string to = 2 [(validate.rules).string.len = 3];
}

message ForexDeleteRequest {
	repeated string tickers = 1 [(validate.rules).repeated.min_items = 1, (validate.rules).repeated.unique = true];
}


// 
// Reply
// 

message ForexReply {
	message Currency {
		string name = 1;
		repeated string exchanges = 2;
	}

	string ticker = 1;
	quotes.v1.QuoteLastReply quote = 2;
	Currency from = 3;
	Currency to = 4;
	
}

message ForexListReply {
	string currency = 1;
	repeated string forexes = 2;
}

message ForexDeleteReply {
	int64 total = 1;
}