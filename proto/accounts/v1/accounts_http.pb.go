// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.1

package v1Accounts

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type AccountsHTTPServer interface {
	Create(context.Context, *AccountModifyRequest) (*AccountReply, error)
	Update(context.Context, *AccountModifyRequest) (*AccountReply, error)
}

func RegisterAccountsHTTPServer(s *http.Server, srv AccountsHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/accounts", _Accounts_Create2_HTTP_Handler(srv))
	r.PUT("/v1/account/{account}", _Accounts_Update2_HTTP_Handler(srv))
}

func _Accounts_Create2_HTTP_Handler(srv AccountsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AccountModifyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/accounts.v1.Accounts/Create")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Create(ctx, req.(*AccountModifyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AccountReply)
		return ctx.Result(200, reply)
	}
}

func _Accounts_Update2_HTTP_Handler(srv AccountsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AccountModifyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/accounts.v1.Accounts/Update")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Update(ctx, req.(*AccountModifyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AccountReply)
		return ctx.Result(200, reply)
	}
}

type AccountsHTTPClient interface {
	Create(ctx context.Context, req *AccountModifyRequest, opts ...http.CallOption) (rsp *AccountReply, err error)
	Update(ctx context.Context, req *AccountModifyRequest, opts ...http.CallOption) (rsp *AccountReply, err error)
}

type AccountsHTTPClientImpl struct {
	cc *http.Client
}

func NewAccountsHTTPClient(client *http.Client) AccountsHTTPClient {
	return &AccountsHTTPClientImpl{client}
}

func (c *AccountsHTTPClientImpl) Create(ctx context.Context, in *AccountModifyRequest, opts ...http.CallOption) (*AccountReply, error) {
	var out AccountReply
	pattern := "/v1/accounts"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/accounts.v1.Accounts/Create"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AccountsHTTPClientImpl) Update(ctx context.Context, in *AccountModifyRequest, opts ...http.CallOption) (*AccountReply, error) {
	var out AccountReply
	pattern := "/v1/account/{account}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/accounts.v1.Accounts/Update"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
