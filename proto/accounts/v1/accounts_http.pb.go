// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.1

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type AccountsHTTPServer interface {
	Create(context.Context, *AccountCreateRequest) (*AccountReply, error)
	Get(context.Context, *AccountRequest) (*AccountReply, error)
	Health(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	List(context.Context, *AccountListRequest) (*AccountReplies, error)
}

func RegisterAccountsHTTPServer(s *http.Server, srv AccountsHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/account/{account}", _Accounts_Get3_HTTP_Handler(srv))
	r.GET("/v1/accounts", _Accounts_List3_HTTP_Handler(srv))
	r.POST("/v1/account", _Accounts_Create0_HTTP_Handler(srv))
	r.GET("/healthz", _Accounts_Health9_HTTP_Handler(srv))
}

func _Accounts_Get3_HTTP_Handler(srv AccountsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AccountRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/accounts.v1.Accounts/Get")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Get(ctx, req.(*AccountRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AccountReply)
		return ctx.Result(200, reply)
	}
}

func _Accounts_List3_HTTP_Handler(srv AccountsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AccountListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/accounts.v1.Accounts/List")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.List(ctx, req.(*AccountListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AccountReplies)
		return ctx.Result(200, reply)
	}
}

func _Accounts_Create0_HTTP_Handler(srv AccountsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AccountCreateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/accounts.v1.Accounts/Create")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Create(ctx, req.(*AccountCreateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AccountReply)
		return ctx.Result(200, reply)
	}
}

func _Accounts_Health9_HTTP_Handler(srv AccountsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/accounts.v1.Accounts/Health")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Health(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type AccountsHTTPClient interface {
	Create(ctx context.Context, req *AccountCreateRequest, opts ...http.CallOption) (rsp *AccountReply, err error)
	Get(ctx context.Context, req *AccountRequest, opts ...http.CallOption) (rsp *AccountReply, err error)
	Health(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	List(ctx context.Context, req *AccountListRequest, opts ...http.CallOption) (rsp *AccountReplies, err error)
}

type AccountsHTTPClientImpl struct {
	cc *http.Client
}

func NewAccountsHTTPClient(client *http.Client) AccountsHTTPClient {
	return &AccountsHTTPClientImpl{client}
}

func (c *AccountsHTTPClientImpl) Create(ctx context.Context, in *AccountCreateRequest, opts ...http.CallOption) (*AccountReply, error) {
	var out AccountReply
	pattern := "/v1/account"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/accounts.v1.Accounts/Create"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AccountsHTTPClientImpl) Get(ctx context.Context, in *AccountRequest, opts ...http.CallOption) (*AccountReply, error) {
	var out AccountReply
	pattern := "/v1/account/{account}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/accounts.v1.Accounts/Get"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AccountsHTTPClientImpl) Health(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/healthz"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/accounts.v1.Accounts/Health"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AccountsHTTPClientImpl) List(ctx context.Context, in *AccountListRequest, opts ...http.CallOption) (*AccountReplies, error) {
	var out AccountReplies
	pattern := "/v1/accounts"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/accounts.v1.Accounts/List"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
