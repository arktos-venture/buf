// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/accounts/v1/accounts.proto

package accounts_v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _accounts_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on AccountRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccountRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AccountRequestMultiError,
// or nil if none found.
func (m *AccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetAccountId()); err != nil {
		err = AccountRequestValidationError{
			field:  "AccountId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AccountRequestMultiError(errors)
	}

	return nil
}

func (m *AccountRequest) _validateUuid(uuid string) error {
	if matched := _accounts_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// AccountRequestMultiError is an error wrapping multiple validation errors
// returned by AccountRequest.ValidateAll() if the designated constraints
// aren't met.
type AccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccountRequestMultiError) AllErrors() []error { return m }

// AccountRequestValidationError is the validation error returned by
// AccountRequest.Validate if the designated constraints aren't met.
type AccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountRequestValidationError) ErrorName() string { return "AccountRequestValidationError" }

// Error satisfies the builtin error interface
func (e AccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountRequestValidationError{}

// Validate checks the field values on AccountCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AccountCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccountCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AccountCreateRequestMultiError, or nil if none found.
func (m *AccountCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AccountCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 3 || l > 100 {
		err := AccountCreateRequestValidationError{
			field:  "Name",
			reason: "value length must be between 3 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetDescription()); l < 4 || l > 128 {
		err := AccountCreateRequestValidationError{
			field:  "Description",
			reason: "value length must be between 4 and 128 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCurrency()) != 3 {
		err := AccountCreateRequestValidationError{
			field:  "Currency",
			reason: "value length must be 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return AccountCreateRequestMultiError(errors)
	}

	return nil
}

// AccountCreateRequestMultiError is an error wrapping multiple validation
// errors returned by AccountCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type AccountCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccountCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccountCreateRequestMultiError) AllErrors() []error { return m }

// AccountCreateRequestValidationError is the validation error returned by
// AccountCreateRequest.Validate if the designated constraints aren't met.
type AccountCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountCreateRequestValidationError) ErrorName() string {
	return "AccountCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AccountCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountCreateRequestValidationError{}

// Validate checks the field values on AccountUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AccountUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccountUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AccountUpdateRequestMultiError, or nil if none found.
func (m *AccountUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AccountUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetAccountId()); err != nil {
		err = AccountUpdateRequestValidationError{
			field:  "AccountId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 3 || l > 100 {
		err := AccountUpdateRequestValidationError{
			field:  "Name",
			reason: "value length must be between 3 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetDescription()); l < 4 || l > 128 {
		err := AccountUpdateRequestValidationError{
			field:  "Description",
			reason: "value length must be between 4 and 128 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCurrency()) != 3 {
		err := AccountUpdateRequestValidationError{
			field:  "Currency",
			reason: "value length must be 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return AccountUpdateRequestMultiError(errors)
	}

	return nil
}

func (m *AccountUpdateRequest) _validateUuid(uuid string) error {
	if matched := _accounts_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// AccountUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by AccountUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type AccountUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccountUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccountUpdateRequestMultiError) AllErrors() []error { return m }

// AccountUpdateRequestValidationError is the validation error returned by
// AccountUpdateRequest.Validate if the designated constraints aren't met.
type AccountUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountUpdateRequestValidationError) ErrorName() string {
	return "AccountUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AccountUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountUpdateRequestValidationError{}

// Validate checks the field values on AccountPositionsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AccountPositionsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccountPositionsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AccountPositionsReplyMultiError, or nil if none found.
func (m *AccountPositionsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AccountPositionsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	for idx, item := range m.GetOrders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AccountPositionsReplyValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AccountPositionsReplyValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AccountPositionsReplyValidationError{
					field:  fmt.Sprintf("Orders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPositions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AccountPositionsReplyValidationError{
					field:  "Positions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AccountPositionsReplyValidationError{
					field:  "Positions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPositions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AccountPositionsReplyValidationError{
				field:  "Positions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AccountPositionsReplyMultiError(errors)
	}

	return nil
}

// AccountPositionsReplyMultiError is an error wrapping multiple validation
// errors returned by AccountPositionsReply.ValidateAll() if the designated
// constraints aren't met.
type AccountPositionsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccountPositionsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccountPositionsReplyMultiError) AllErrors() []error { return m }

// AccountPositionsReplyValidationError is the validation error returned by
// AccountPositionsReply.Validate if the designated constraints aren't met.
type AccountPositionsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountPositionsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountPositionsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountPositionsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountPositionsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountPositionsReplyValidationError) ErrorName() string {
	return "AccountPositionsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AccountPositionsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountPositionsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountPositionsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountPositionsReplyValidationError{}

// Validate checks the field values on AccountReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AccountReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccountReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AccountReplyMultiError, or
// nil if none found.
func (m *AccountReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AccountReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Currency

	if len(errors) > 0 {
		return AccountReplyMultiError(errors)
	}

	return nil
}

// AccountReplyMultiError is an error wrapping multiple validation errors
// returned by AccountReply.ValidateAll() if the designated constraints aren't met.
type AccountReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccountReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccountReplyMultiError) AllErrors() []error { return m }

// AccountReplyValidationError is the validation error returned by
// AccountReply.Validate if the designated constraints aren't met.
type AccountReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountReplyValidationError) ErrorName() string { return "AccountReplyValidationError" }

// Error satisfies the builtin error interface
func (e AccountReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountReplyValidationError{}

// Validate checks the field values on AccountPositionsReply_Positions with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AccountPositionsReply_Positions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccountPositionsReply_Positions with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AccountPositionsReply_PositionsMultiError, or nil if none found.
func (m *AccountPositionsReply_Positions) ValidateAll() error {
	return m.validate(true)
}

func (m *AccountPositionsReply_Positions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCompanies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AccountPositionsReply_PositionsValidationError{
						field:  fmt.Sprintf("Companies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AccountPositionsReply_PositionsValidationError{
						field:  fmt.Sprintf("Companies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AccountPositionsReply_PositionsValidationError{
					field:  fmt.Sprintf("Companies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetCurrencies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AccountPositionsReply_PositionsValidationError{
						field:  fmt.Sprintf("Currencies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AccountPositionsReply_PositionsValidationError{
						field:  fmt.Sprintf("Currencies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AccountPositionsReply_PositionsValidationError{
					field:  fmt.Sprintf("Currencies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AccountPositionsReply_PositionsMultiError(errors)
	}

	return nil
}

// AccountPositionsReply_PositionsMultiError is an error wrapping multiple
// validation errors returned by AccountPositionsReply_Positions.ValidateAll()
// if the designated constraints aren't met.
type AccountPositionsReply_PositionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccountPositionsReply_PositionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccountPositionsReply_PositionsMultiError) AllErrors() []error { return m }

// AccountPositionsReply_PositionsValidationError is the validation error
// returned by AccountPositionsReply_Positions.Validate if the designated
// constraints aren't met.
type AccountPositionsReply_PositionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountPositionsReply_PositionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountPositionsReply_PositionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountPositionsReply_PositionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountPositionsReply_PositionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountPositionsReply_PositionsValidationError) ErrorName() string {
	return "AccountPositionsReply_PositionsValidationError"
}

// Error satisfies the builtin error interface
func (e AccountPositionsReply_PositionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountPositionsReply_Positions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountPositionsReply_PositionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountPositionsReply_PositionsValidationError{}
