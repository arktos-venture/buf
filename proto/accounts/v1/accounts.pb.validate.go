// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/accounts/v1/accounts.proto

package v1Accounts

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AccountModifyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AccountModifyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccountModifyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AccountModifyRequestMultiError, or nil if none found.
func (m *AccountModifyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AccountModifyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetAccount()); l < 3 || l > 36 {
		err := AccountModifyRequestValidationError{
			field:  "Account",
			reason: "value length must be between 3 and 36 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetDescription()); l < 3 || l > 512 {
		err := AccountModifyRequestValidationError{
			field:  "Description",
			reason: "value length must be between 3 and 512 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCurrency()) != 3 {
		err := AccountModifyRequestValidationError{
			field:  "Currency",
			reason: "value length must be 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return AccountModifyRequestMultiError(errors)
	}

	return nil
}

// AccountModifyRequestMultiError is an error wrapping multiple validation
// errors returned by AccountModifyRequest.ValidateAll() if the designated
// constraints aren't met.
type AccountModifyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccountModifyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccountModifyRequestMultiError) AllErrors() []error { return m }

// AccountModifyRequestValidationError is the validation error returned by
// AccountModifyRequest.Validate if the designated constraints aren't met.
type AccountModifyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountModifyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountModifyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountModifyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountModifyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountModifyRequestValidationError) ErrorName() string {
	return "AccountModifyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AccountModifyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountModifyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountModifyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountModifyRequestValidationError{}

// Validate checks the field values on AccountReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AccountReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccountReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AccountReplyMultiError, or
// nil if none found.
func (m *AccountReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AccountReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Account

	// no validation rules for Description

	// no validation rules for Currency

	for idx, item := range m.GetPortfolios() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AccountReplyValidationError{
						field:  fmt.Sprintf("Portfolios[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AccountReplyValidationError{
						field:  fmt.Sprintf("Portfolios[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AccountReplyValidationError{
					field:  fmt.Sprintf("Portfolios[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AccountReplyMultiError(errors)
	}

	return nil
}

// AccountReplyMultiError is an error wrapping multiple validation errors
// returned by AccountReply.ValidateAll() if the designated constraints aren't met.
type AccountReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccountReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccountReplyMultiError) AllErrors() []error { return m }

// AccountReplyValidationError is the validation error returned by
// AccountReply.Validate if the designated constraints aren't met.
type AccountReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountReplyValidationError) ErrorName() string { return "AccountReplyValidationError" }

// Error satisfies the builtin error interface
func (e AccountReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountReplyValidationError{}
