syntax = "proto3";

package dividends.v1;

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "validate/validate.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "proto/quotes/v1/quotes.proto";

option go_package = "github.com/arktos-venture/buf/proto/dividends/v1;dividends_v1";
option java_multiple_files = true;
option java_package = "dev.kratos.api.dividend.v1";
option java_outer_classname = "APIDividendProtoV1";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
	info: {
        title: "Dividends APIs";
		description: "Dividends APIs";
        version: "1.0";
		contact: {
			name: "Arktos Venture project";
			url: "https://github.com/arktos-venture/buf";
			email: "oss@arktos-consulting.cloud";
		};
  	};
	schemes: [HTTP, HTTPS];
	consumes: "application/json";
	produces: "application/json";
	security_definitions: {
	  	security: {
			key: "bearer"
			value: {
		  		type: TYPE_API_KEY
		  		in: IN_HEADER
		  		name: "Authorization"
		  		description: "Authentication token, prefixed by Bearer: Bearer <token>"
			}
	  	}
	}
	security: {
	  	security_requirement: {
			key: "bearer"
	  	}
	}
};

service Dividends {
	rpc Last (DividendsLastRequest) returns (DividendsLastReply)  {
        option (google.api.http) = {
            get: "/v1/dividends/{exchange}/{ticker}"
        };
    }

  	rpc Search (DividendsRequest) returns (DividendsReply)  {
        option (google.api.http) = {
            post: "/v1/dividends"
			body: "*"
        };
    }

	rpc Health (google.protobuf.Empty) returns (google.protobuf.Empty)  {
		option (google.api.http) = {
			get: "/healthz"
		};

		option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
			security: { } // Disable security key
		};
	}
}


// 
// Request
// 

enum Interval {
	m = 0;
	q = 1;
	y = 2;
}
  
message Filter {
	quotes.v1.Operator operator = 1 [(validate.rules).enum = {defined_only: true}];
	quotes.v1.Argument argument = 2 [(validate.rules).enum = {defined_only: true}];
	string value = 3;
}
  
message DividendsRequest {
	Interval interval = 1 [(validate.rules).enum = {defined_only: true}];
	repeated quotes.v1.Filter filters = 2 [(validate.rules).repeated.min_items = 1, (validate.rules).repeated.max_items = 20];
}

message DividendsLastRequest {
	string exchange = 1;
	string ticker = 2;
}


// 
// Reply
// 

message DividendsLastReply {
	float values = 1;
	google.protobuf.Timestamp declarationDate = 2;
	google.protobuf.Timestamp recordDate = 3;
	google.protobuf.Timestamp paymentDate = 4;
	google.protobuf.Timestamp created_at = 5;
}

message DividendsReply {
	repeated float values = 1;
	repeated google.protobuf.Timestamp declarationDate = 2;
	repeated google.protobuf.Timestamp recordDate = 3;
	repeated google.protobuf.Timestamp paymentDate = 4;
	repeated google.protobuf.Timestamp created_at = 5;
}
