// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/dividends/v1/get/dividends.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DividendsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DividendsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DividendsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DividendsRequestMultiError, or nil if none found.
func (m *DividendsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DividendsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetTicker()); l < 1 || l > 8 {
		err := DividendsRequestValidationError{
			field:  "Ticker",
			reason: "value length must be between 1 and 8 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _DividendsRequest_Exchange_InLookup[m.GetExchange()]; !ok {
		err := DividendsRequestValidationError{
			field:  "Exchange",
			reason: "value must be in list [NASDAQ NYSE TO LSE PA BR AS SG SHE SHG HK]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCurrency()) != 3 {
		err := DividendsRequestValidationError{
			field:  "Currency",
			reason: "value length must be 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if _, ok := DividendsRequest_Interval_name[int32(m.GetInterval())]; !ok {
		err := DividendsRequestValidationError{
			field:  "Interval",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _DividendsRequest_Period_InLookup[m.GetPeriod()]; !ok {
		err := DividendsRequestValidationError{
			field:  "Period",
			reason: "value must be in list [last 1m 3m 6m 1y 2y 3y 5y 10y 20y 30y]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DividendsRequestMultiError(errors)
	}
	return nil
}

// DividendsRequestMultiError is an error wrapping multiple validation errors
// returned by DividendsRequest.ValidateAll() if the designated constraints
// aren't met.
type DividendsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DividendsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DividendsRequestMultiError) AllErrors() []error { return m }

// DividendsRequestValidationError is the validation error returned by
// DividendsRequest.Validate if the designated constraints aren't met.
type DividendsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DividendsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DividendsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DividendsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DividendsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DividendsRequestValidationError) ErrorName() string { return "DividendsRequestValidationError" }

// Error satisfies the builtin error interface
func (e DividendsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDividendsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DividendsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DividendsRequestValidationError{}

var _DividendsRequest_Exchange_InLookup = map[string]struct{}{
	"NASDAQ": {},
	"NYSE":   {},
	"TO":     {},
	"LSE":    {},
	"PA":     {},
	"BR":     {},
	"AS":     {},
	"SG":     {},
	"SHE":    {},
	"SHG":    {},
	"HK":     {},
}

var _DividendsRequest_Period_InLookup = map[string]struct{}{
	"last": {},
	"1m":   {},
	"3m":   {},
	"6m":   {},
	"1y":   {},
	"2y":   {},
	"3y":   {},
	"5y":   {},
	"10y":  {},
	"20y":  {},
	"30y":  {},
}

// Validate checks the field values on DividendsReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DividendsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DividendsReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DividendsReplyMultiError,
// or nil if none found.
func (m *DividendsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DividendsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ticker

	// no validation rules for Exchange

	// no validation rules for Currency

	if len(errors) > 0 {
		return DividendsReplyMultiError(errors)
	}
	return nil
}

// DividendsReplyMultiError is an error wrapping multiple validation errors
// returned by DividendsReply.ValidateAll() if the designated constraints
// aren't met.
type DividendsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DividendsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DividendsReplyMultiError) AllErrors() []error { return m }

// DividendsReplyValidationError is the validation error returned by
// DividendsReply.Validate if the designated constraints aren't met.
type DividendsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DividendsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DividendsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DividendsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DividendsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DividendsReplyValidationError) ErrorName() string { return "DividendsReplyValidationError" }

// Error satisfies the builtin error interface
func (e DividendsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDividendsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DividendsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DividendsReplyValidationError{}
