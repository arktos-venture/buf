// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/positions/v1/position.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PositionRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PositionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PositionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PositionRequestMultiError, or nil if none found.
func (m *PositionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PositionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := Broker_name[int32(m.GetBroker())]; !ok {
		err := PositionRequestValidationError{
			field:  "Broker",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetAccount()); l < 3 || l > 15 {
		err := PositionRequestValidationError{
			field:  "Account",
			reason: "value length must be between 3 and 15 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _PositionRequest_Interval_InLookup[m.GetInterval()]; !ok {
		err := PositionRequestValidationError{
			field:  "Interval",
			reason: "value must be in list [last 3d 1w 2w 1m 3m 6m 1y 3y 5y 10y]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PositionRequestMultiError(errors)
	}
	return nil
}

// PositionRequestMultiError is an error wrapping multiple validation errors
// returned by PositionRequest.ValidateAll() if the designated constraints
// aren't met.
type PositionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PositionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PositionRequestMultiError) AllErrors() []error { return m }

// PositionRequestValidationError is the validation error returned by
// PositionRequest.Validate if the designated constraints aren't met.
type PositionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PositionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PositionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PositionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PositionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PositionRequestValidationError) ErrorName() string { return "PositionRequestValidationError" }

// Error satisfies the builtin error interface
func (e PositionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPositionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PositionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PositionRequestValidationError{}

var _PositionRequest_Interval_InLookup = map[string]struct{}{
	"last": {},
	"3d":   {},
	"1w":   {},
	"2w":   {},
	"1m":   {},
	"3m":   {},
	"6m":   {},
	"1y":   {},
	"3y":   {},
	"5y":   {},
	"10y":  {},
}

// Validate checks the field values on PositionCompanyReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PositionCompanyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PositionCompanyReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PositionCompanyReplyMultiError, or nil if none found.
func (m *PositionCompanyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *PositionCompanyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Conid

	// no validation rules for Currency

	// no validation rules for Size

	// no validation rules for AverageCost

	// no validation rules for MarketPrice

	// no validation rules for Performance

	// no validation rules for Date

	if len(errors) > 0 {
		return PositionCompanyReplyMultiError(errors)
	}
	return nil
}

// PositionCompanyReplyMultiError is an error wrapping multiple validation
// errors returned by PositionCompanyReply.ValidateAll() if the designated
// constraints aren't met.
type PositionCompanyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PositionCompanyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PositionCompanyReplyMultiError) AllErrors() []error { return m }

// PositionCompanyReplyValidationError is the validation error returned by
// PositionCompanyReply.Validate if the designated constraints aren't met.
type PositionCompanyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PositionCompanyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PositionCompanyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PositionCompanyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PositionCompanyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PositionCompanyReplyValidationError) ErrorName() string {
	return "PositionCompanyReplyValidationError"
}

// Error satisfies the builtin error interface
func (e PositionCompanyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPositionCompanyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PositionCompanyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PositionCompanyReplyValidationError{}

// Validate checks the field values on PositionCompanyReplies with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PositionCompanyReplies) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PositionCompanyReplies with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PositionCompanyRepliesMultiError, or nil if none found.
func (m *PositionCompanyReplies) ValidateAll() error {
	return m.validate(true)
}

func (m *PositionCompanyReplies) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PositionCompanyRepliesValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PositionCompanyRepliesValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PositionCompanyRepliesValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for Date

	if len(errors) > 0 {
		return PositionCompanyRepliesMultiError(errors)
	}
	return nil
}

// PositionCompanyRepliesMultiError is an error wrapping multiple validation
// errors returned by PositionCompanyReplies.ValidateAll() if the designated
// constraints aren't met.
type PositionCompanyRepliesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PositionCompanyRepliesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PositionCompanyRepliesMultiError) AllErrors() []error { return m }

// PositionCompanyRepliesValidationError is the validation error returned by
// PositionCompanyReplies.Validate if the designated constraints aren't met.
type PositionCompanyRepliesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PositionCompanyRepliesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PositionCompanyRepliesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PositionCompanyRepliesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PositionCompanyRepliesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PositionCompanyRepliesValidationError) ErrorName() string {
	return "PositionCompanyRepliesValidationError"
}

// Error satisfies the builtin error interface
func (e PositionCompanyRepliesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPositionCompanyReplies.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PositionCompanyRepliesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PositionCompanyRepliesValidationError{}

// Validate checks the field values on PositionCurrencyReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PositionCurrencyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PositionCurrencyReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PositionCurrencyReplyMultiError, or nil if none found.
func (m *PositionCurrencyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *PositionCurrencyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Currency

	// no validation rules for Size

	// no validation rules for Date

	if len(errors) > 0 {
		return PositionCurrencyReplyMultiError(errors)
	}
	return nil
}

// PositionCurrencyReplyMultiError is an error wrapping multiple validation
// errors returned by PositionCurrencyReply.ValidateAll() if the designated
// constraints aren't met.
type PositionCurrencyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PositionCurrencyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PositionCurrencyReplyMultiError) AllErrors() []error { return m }

// PositionCurrencyReplyValidationError is the validation error returned by
// PositionCurrencyReply.Validate if the designated constraints aren't met.
type PositionCurrencyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PositionCurrencyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PositionCurrencyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PositionCurrencyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PositionCurrencyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PositionCurrencyReplyValidationError) ErrorName() string {
	return "PositionCurrencyReplyValidationError"
}

// Error satisfies the builtin error interface
func (e PositionCurrencyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPositionCurrencyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PositionCurrencyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PositionCurrencyReplyValidationError{}

// Validate checks the field values on PositionCurrencyReplies with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PositionCurrencyReplies) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PositionCurrencyReplies with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PositionCurrencyRepliesMultiError, or nil if none found.
func (m *PositionCurrencyReplies) ValidateAll() error {
	return m.validate(true)
}

func (m *PositionCurrencyReplies) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PositionCurrencyRepliesValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PositionCurrencyRepliesValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PositionCurrencyRepliesValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for Date

	if len(errors) > 0 {
		return PositionCurrencyRepliesMultiError(errors)
	}
	return nil
}

// PositionCurrencyRepliesMultiError is an error wrapping multiple validation
// errors returned by PositionCurrencyReplies.ValidateAll() if the designated
// constraints aren't met.
type PositionCurrencyRepliesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PositionCurrencyRepliesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PositionCurrencyRepliesMultiError) AllErrors() []error { return m }

// PositionCurrencyRepliesValidationError is the validation error returned by
// PositionCurrencyReplies.Validate if the designated constraints aren't met.
type PositionCurrencyRepliesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PositionCurrencyRepliesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PositionCurrencyRepliesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PositionCurrencyRepliesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PositionCurrencyRepliesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PositionCurrencyRepliesValidationError) ErrorName() string {
	return "PositionCurrencyRepliesValidationError"
}

// Error satisfies the builtin error interface
func (e PositionCurrencyRepliesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPositionCurrencyReplies.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PositionCurrencyRepliesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PositionCurrencyRepliesValidationError{}
