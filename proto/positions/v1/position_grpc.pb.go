// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package positions_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PositionClient is the client API for Position service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PositionClient interface {
	Companies(ctx context.Context, in *PositionRequest, opts ...grpc.CallOption) (*PositionCompanyReplies, error)
	Currencies(ctx context.Context, in *PositionRequest, opts ...grpc.CallOption) (*PositionCurrencyReplies, error)
	Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type positionClient struct {
	cc grpc.ClientConnInterface
}

func NewPositionClient(cc grpc.ClientConnInterface) PositionClient {
	return &positionClient{cc}
}

func (c *positionClient) Companies(ctx context.Context, in *PositionRequest, opts ...grpc.CallOption) (*PositionCompanyReplies, error) {
	out := new(PositionCompanyReplies)
	err := c.cc.Invoke(ctx, "/positions.v1.Position/Companies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *positionClient) Currencies(ctx context.Context, in *PositionRequest, opts ...grpc.CallOption) (*PositionCurrencyReplies, error) {
	out := new(PositionCurrencyReplies)
	err := c.cc.Invoke(ctx, "/positions.v1.Position/Currencies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *positionClient) Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/positions.v1.Position/Health", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PositionServer is the server API for Position service.
// All implementations must embed UnimplementedPositionServer
// for forward compatibility
type PositionServer interface {
	Companies(context.Context, *PositionRequest) (*PositionCompanyReplies, error)
	Currencies(context.Context, *PositionRequest) (*PositionCurrencyReplies, error)
	Health(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedPositionServer()
}

// UnimplementedPositionServer must be embedded to have forward compatible implementations.
type UnimplementedPositionServer struct {
}

func (UnimplementedPositionServer) Companies(context.Context, *PositionRequest) (*PositionCompanyReplies, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Companies not implemented")
}
func (UnimplementedPositionServer) Currencies(context.Context, *PositionRequest) (*PositionCurrencyReplies, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Currencies not implemented")
}
func (UnimplementedPositionServer) Health(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedPositionServer) mustEmbedUnimplementedPositionServer() {}

// UnsafePositionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PositionServer will
// result in compilation errors.
type UnsafePositionServer interface {
	mustEmbedUnimplementedPositionServer()
}

func RegisterPositionServer(s grpc.ServiceRegistrar, srv PositionServer) {
	s.RegisterService(&Position_ServiceDesc, srv)
}

func _Position_Companies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PositionServer).Companies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/positions.v1.Position/Companies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PositionServer).Companies(ctx, req.(*PositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Position_Currencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PositionServer).Currencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/positions.v1.Position/Currencies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PositionServer).Currencies(ctx, req.(*PositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Position_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PositionServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/positions.v1.Position/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PositionServer).Health(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Position_ServiceDesc is the grpc.ServiceDesc for Position service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Position_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "positions.v1.Position",
	HandlerType: (*PositionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Companies",
			Handler:    _Position_Companies_Handler,
		},
		{
			MethodName: "Currencies",
			Handler:    _Position_Currencies_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _Position_Health_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/positions/v1/position.proto",
}
