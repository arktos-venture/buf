// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/stats/v1/stats.proto

package stats_v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Price with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Price) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Price with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PriceMultiError, or nil if none found.
func (m *Price) ValidateAll() error {
	return m.validate(true)
}

func (m *Price) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Last

	// no validation rules for MaxAnnual

	// no validation rules for MinAnnual

	// no validation rules for ReturnYear

	if len(errors) > 0 {
		return PriceMultiError(errors)
	}

	return nil
}

// PriceMultiError is an error wrapping multiple validation errors returned by
// Price.ValidateAll() if the designated constraints aren't met.
type PriceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PriceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PriceMultiError) AllErrors() []error { return m }

// PriceValidationError is the validation error returned by Price.Validate if
// the designated constraints aren't met.
type PriceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PriceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PriceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PriceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PriceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PriceValidationError) ErrorName() string { return "PriceValidationError" }

// Error satisfies the builtin error interface
func (e PriceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrice.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PriceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PriceValidationError{}

// Validate checks the field values on Volume with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Volume) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Volume with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in VolumeMultiError, or nil if none found.
func (m *Volume) ValidateAll() error {
	return m.validate(true)
}

func (m *Volume) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Last

	// no validation rules for Volume10D

	// no validation rules for Volume30D

	// no validation rules for Volume90D

	if len(errors) > 0 {
		return VolumeMultiError(errors)
	}

	return nil
}

// VolumeMultiError is an error wrapping multiple validation errors returned by
// Volume.ValidateAll() if the designated constraints aren't met.
type VolumeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VolumeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VolumeMultiError) AllErrors() []error { return m }

// VolumeValidationError is the validation error returned by Volume.Validate if
// the designated constraints aren't met.
type VolumeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VolumeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VolumeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VolumeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VolumeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VolumeValidationError) ErrorName() string { return "VolumeValidationError" }

// Error satisfies the builtin error interface
func (e VolumeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVolume.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VolumeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VolumeValidationError{}

// Validate checks the field values on Dividend with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Dividend) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Dividend with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DividendMultiError, or nil
// if none found.
func (m *Dividend) ValidateAll() error {
	return m.validate(true)
}

func (m *Dividend) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Yield

	// no validation rules for Value

	if len(errors) > 0 {
		return DividendMultiError(errors)
	}

	return nil
}

// DividendMultiError is an error wrapping multiple validation errors returned
// by Dividend.ValidateAll() if the designated constraints aren't met.
type DividendMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DividendMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DividendMultiError) AllErrors() []error { return m }

// DividendValidationError is the validation error returned by
// Dividend.Validate if the designated constraints aren't met.
type DividendValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DividendValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DividendValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DividendValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DividendValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DividendValidationError) ErrorName() string { return "DividendValidationError" }

// Error satisfies the builtin error interface
func (e DividendValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDividend.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DividendValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DividendValidationError{}

// Validate checks the field values on Share with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Share) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Share with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ShareMultiError, or nil if none found.
func (m *Share) ValidateAll() error {
	return m.validate(true)
}

func (m *Share) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Out

	// no validation rules for Float

	if len(errors) > 0 {
		return ShareMultiError(errors)
	}

	return nil
}

// ShareMultiError is an error wrapping multiple validation errors returned by
// Share.ValidateAll() if the designated constraints aren't met.
type ShareMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShareMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShareMultiError) AllErrors() []error { return m }

// ShareValidationError is the validation error returned by Share.Validate if
// the designated constraints aren't met.
type ShareValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShareValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShareValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShareValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShareValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShareValidationError) ErrorName() string { return "ShareValidationError" }

// Error satisfies the builtin error interface
func (e ShareValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShare.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShareValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShareValidationError{}

// Validate checks the field values on StatRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StatRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StatRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StatRequestMultiError, or
// nil if none found.
func (m *StatRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StatRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetTicker()); l < 1 || l > 8 {
		err := StatRequestValidationError{
			field:  "Ticker",
			reason: "value length must be between 1 and 8 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetExchange()); l < 1 || l > 8 {
		err := StatRequestValidationError{
			field:  "Exchange",
			reason: "value length must be between 1 and 8 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return StatRequestMultiError(errors)
	}

	return nil
}

// StatRequestMultiError is an error wrapping multiple validation errors
// returned by StatRequest.ValidateAll() if the designated constraints aren't met.
type StatRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StatRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StatRequestMultiError) AllErrors() []error { return m }

// StatRequestValidationError is the validation error returned by
// StatRequest.Validate if the designated constraints aren't met.
type StatRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatRequestValidationError) ErrorName() string { return "StatRequestValidationError" }

// Error satisfies the builtin error interface
func (e StatRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatRequestValidationError{}

// Validate checks the field values on StatModifyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *StatModifyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StatModifyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StatModifyRequestMultiError, or nil if none found.
func (m *StatModifyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StatModifyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetTicker()); l < 1 || l > 16 {
		err := StatModifyRequestValidationError{
			field:  "Ticker",
			reason: "value length must be between 1 and 16 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetExchange()); l < 1 || l > 8 {
		err := StatModifyRequestValidationError{
			field:  "Exchange",
			reason: "value length must be between 1 and 8 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for MarketCapUsd

	if all {
		switch v := interface{}(m.GetPrice()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StatModifyRequestValidationError{
					field:  "Price",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StatModifyRequestValidationError{
					field:  "Price",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPrice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StatModifyRequestValidationError{
				field:  "Price",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetVolume()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StatModifyRequestValidationError{
					field:  "Volume",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StatModifyRequestValidationError{
					field:  "Volume",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVolume()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StatModifyRequestValidationError{
				field:  "Volume",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetShares()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StatModifyRequestValidationError{
					field:  "Shares",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StatModifyRequestValidationError{
					field:  "Shares",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShares()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StatModifyRequestValidationError{
				field:  "Shares",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDividends()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StatModifyRequestValidationError{
					field:  "Dividends",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StatModifyRequestValidationError{
					field:  "Dividends",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDividends()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StatModifyRequestValidationError{
				field:  "Dividends",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Beta5Y

	if len(errors) > 0 {
		return StatModifyRequestMultiError(errors)
	}

	return nil
}

// StatModifyRequestMultiError is an error wrapping multiple validation errors
// returned by StatModifyRequest.ValidateAll() if the designated constraints
// aren't met.
type StatModifyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StatModifyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StatModifyRequestMultiError) AllErrors() []error { return m }

// StatModifyRequestValidationError is the validation error returned by
// StatModifyRequest.Validate if the designated constraints aren't met.
type StatModifyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatModifyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatModifyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatModifyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatModifyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatModifyRequestValidationError) ErrorName() string {
	return "StatModifyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StatModifyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatModifyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatModifyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatModifyRequestValidationError{}

// Validate checks the field values on StatDeleteRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *StatDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StatDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StatDeleteRequestMultiError, or nil if none found.
func (m *StatDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StatDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	_StatDeleteRequest_Tickers_Unique := make(map[string]struct{}, len(m.GetTickers()))

	for idx, item := range m.GetTickers() {
		_, _ = idx, item

		if _, exists := _StatDeleteRequest_Tickers_Unique[item]; exists {
			err := StatDeleteRequestValidationError{
				field:  fmt.Sprintf("Tickers[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_StatDeleteRequest_Tickers_Unique[item] = struct{}{}
		}

		// no validation rules for Tickers[idx]
	}

	_StatDeleteRequest_Exchanges_Unique := make(map[string]struct{}, len(m.GetExchanges()))

	for idx, item := range m.GetExchanges() {
		_, _ = idx, item

		if _, exists := _StatDeleteRequest_Exchanges_Unique[item]; exists {
			err := StatDeleteRequestValidationError{
				field:  fmt.Sprintf("Exchanges[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_StatDeleteRequest_Exchanges_Unique[item] = struct{}{}
		}

		// no validation rules for Exchanges[idx]
	}

	if len(errors) > 0 {
		return StatDeleteRequestMultiError(errors)
	}

	return nil
}

// StatDeleteRequestMultiError is an error wrapping multiple validation errors
// returned by StatDeleteRequest.ValidateAll() if the designated constraints
// aren't met.
type StatDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StatDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StatDeleteRequestMultiError) AllErrors() []error { return m }

// StatDeleteRequestValidationError is the validation error returned by
// StatDeleteRequest.Validate if the designated constraints aren't met.
type StatDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatDeleteRequestValidationError) ErrorName() string {
	return "StatDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StatDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatDeleteRequestValidationError{}

// Validate checks the field values on StatReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StatReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StatReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StatReplyMultiError, or nil
// if none found.
func (m *StatReply) ValidateAll() error {
	return m.validate(true)
}

func (m *StatReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetTicker()); l < 1 || l > 16 {
		err := StatReplyValidationError{
			field:  "Ticker",
			reason: "value length must be between 1 and 16 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetExchange()); l < 1 || l > 8 {
		err := StatReplyValidationError{
			field:  "Exchange",
			reason: "value length must be between 1 and 8 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for MarketCapUsd

	if all {
		switch v := interface{}(m.GetPrice()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StatReplyValidationError{
					field:  "Price",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StatReplyValidationError{
					field:  "Price",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPrice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StatReplyValidationError{
				field:  "Price",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetVolume()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StatReplyValidationError{
					field:  "Volume",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StatReplyValidationError{
					field:  "Volume",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVolume()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StatReplyValidationError{
				field:  "Volume",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetShares()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StatReplyValidationError{
					field:  "Shares",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StatReplyValidationError{
					field:  "Shares",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShares()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StatReplyValidationError{
				field:  "Shares",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDividends()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StatReplyValidationError{
					field:  "Dividends",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StatReplyValidationError{
					field:  "Dividends",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDividends()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StatReplyValidationError{
				field:  "Dividends",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Beta5Y

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StatReplyValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StatReplyValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StatReplyValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StatReplyValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StatReplyValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StatReplyValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StatReplyMultiError(errors)
	}

	return nil
}

// StatReplyMultiError is an error wrapping multiple validation errors returned
// by StatReply.ValidateAll() if the designated constraints aren't met.
type StatReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StatReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StatReplyMultiError) AllErrors() []error { return m }

// StatReplyValidationError is the validation error returned by
// StatReply.Validate if the designated constraints aren't met.
type StatReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatReplyValidationError) ErrorName() string { return "StatReplyValidationError" }

// Error satisfies the builtin error interface
func (e StatReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatReplyValidationError{}

// Validate checks the field values on StatDelete with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StatDelete) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StatDelete with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StatDeleteMultiError, or
// nil if none found.
func (m *StatDelete) ValidateAll() error {
	return m.validate(true)
}

func (m *StatDelete) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	if len(errors) > 0 {
		return StatDeleteMultiError(errors)
	}

	return nil
}

// StatDeleteMultiError is an error wrapping multiple validation errors
// returned by StatDelete.ValidateAll() if the designated constraints aren't met.
type StatDeleteMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StatDeleteMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StatDeleteMultiError) AllErrors() []error { return m }

// StatDeleteValidationError is the validation error returned by
// StatDelete.Validate if the designated constraints aren't met.
type StatDeleteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatDeleteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatDeleteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatDeleteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatDeleteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatDeleteValidationError) ErrorName() string { return "StatDeleteValidationError" }

// Error satisfies the builtin error interface
func (e StatDeleteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatDelete.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatDeleteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatDeleteValidationError{}
