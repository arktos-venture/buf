// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.1

package stats_v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type StatsHTTPServer interface {
	Create(context.Context, *StatModifyRequest) (*StatReply, error)
	Delete(context.Context, *StatDeleteRequest) (*StatDelete, error)
	Get(context.Context, *StatRequest) (*StatReply, error)
	Update(context.Context, *StatModifyRequest) (*StatReply, error)
}

func RegisterStatsHTTPServer(s *http.Server, srv StatsHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/stats/{exchange}/{ticker}", _Stats_Get9_HTTP_Handler(srv))
	r.POST("/v1/stats", _Stats_Create8_HTTP_Handler(srv))
	r.PUT("/v1/stats/{exchange}/{ticker}", _Stats_Update5_HTTP_Handler(srv))
	r.DELETE("/v1/stats", _Stats_Delete13_HTTP_Handler(srv))
}

func _Stats_Get9_HTTP_Handler(srv StatsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in StatRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/stats.v1.Stats/Get")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Get(ctx, req.(*StatRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*StatReply)
		return ctx.Result(200, reply)
	}
}

func _Stats_Create8_HTTP_Handler(srv StatsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in StatModifyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/stats.v1.Stats/Create")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Create(ctx, req.(*StatModifyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*StatReply)
		return ctx.Result(200, reply)
	}
}

func _Stats_Update5_HTTP_Handler(srv StatsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in StatModifyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/stats.v1.Stats/Update")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Update(ctx, req.(*StatModifyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*StatReply)
		return ctx.Result(200, reply)
	}
}

func _Stats_Delete13_HTTP_Handler(srv StatsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in StatDeleteRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/stats.v1.Stats/Delete")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Delete(ctx, req.(*StatDeleteRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*StatDelete)
		return ctx.Result(200, reply)
	}
}

type StatsHTTPClient interface {
	Create(ctx context.Context, req *StatModifyRequest, opts ...http.CallOption) (rsp *StatReply, err error)
	Delete(ctx context.Context, req *StatDeleteRequest, opts ...http.CallOption) (rsp *StatDelete, err error)
	Get(ctx context.Context, req *StatRequest, opts ...http.CallOption) (rsp *StatReply, err error)
	Update(ctx context.Context, req *StatModifyRequest, opts ...http.CallOption) (rsp *StatReply, err error)
}

type StatsHTTPClientImpl struct {
	cc *http.Client
}

func NewStatsHTTPClient(client *http.Client) StatsHTTPClient {
	return &StatsHTTPClientImpl{client}
}

func (c *StatsHTTPClientImpl) Create(ctx context.Context, in *StatModifyRequest, opts ...http.CallOption) (*StatReply, error) {
	var out StatReply
	pattern := "/v1/stats"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/stats.v1.Stats/Create"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *StatsHTTPClientImpl) Delete(ctx context.Context, in *StatDeleteRequest, opts ...http.CallOption) (*StatDelete, error) {
	var out StatDelete
	pattern := "/v1/stats"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/stats.v1.Stats/Delete"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *StatsHTTPClientImpl) Get(ctx context.Context, in *StatRequest, opts ...http.CallOption) (*StatReply, error) {
	var out StatReply
	pattern := "/v1/stats/{exchange}/{ticker}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/stats.v1.Stats/Get"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *StatsHTTPClientImpl) Update(ctx context.Context, in *StatModifyRequest, opts ...http.CallOption) (*StatReply, error) {
	var out StatReply
	pattern := "/v1/stats/{exchange}/{ticker}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/stats.v1.Stats/Update"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
