// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/orders/v1/orders.proto

package v1Orders

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	v1Screener "github.com/arktos-venture/buf/proto/screener/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = v1Screener.Asset(0)
)

// define the regex for a UUID once up-front
var _orders_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on OrderStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrderStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrderStatusRequestMultiError, or nil if none found.
func (m *OrderStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetAccount()); l < 3 || l > 36 {
		err := OrderStatusRequestValidationError{
			field:  "Account",
			reason: "value length must be between 3 and 36 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetPortfolioUUID()); err != nil {
		err = OrderStatusRequestValidationError{
			field:  "PortfolioUUID",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetOrderUUID()); err != nil {
		err = OrderStatusRequestValidationError{
			field:  "OrderUUID",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return OrderStatusRequestMultiError(errors)
	}

	return nil
}

func (m *OrderStatusRequest) _validateUuid(uuid string) error {
	if matched := _orders_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// OrderStatusRequestMultiError is an error wrapping multiple validation errors
// returned by OrderStatusRequest.ValidateAll() if the designated constraints
// aren't met.
type OrderStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderStatusRequestMultiError) AllErrors() []error { return m }

// OrderStatusRequestValidationError is the validation error returned by
// OrderStatusRequest.Validate if the designated constraints aren't met.
type OrderStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderStatusRequestValidationError) ErrorName() string {
	return "OrderStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OrderStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderStatusRequestValidationError{}

// Validate checks the field values on OrderSearchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrderSearchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderSearchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrderSearchRequestMultiError, or nil if none found.
func (m *OrderSearchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderSearchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetAccount()); l < 3 || l > 36 {
		err := OrderSearchRequestValidationError{
			field:  "Account",
			reason: "value length must be between 3 and 36 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetPortfolioUUID()); err != nil {
		err = OrderSearchRequestValidationError{
			field:  "PortfolioUUID",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetSort() == nil {
		err := OrderSearchRequestValidationError{
			field:  "Sort",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetSort()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderSearchRequestValidationError{
					field:  "Sort",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderSearchRequestValidationError{
					field:  "Sort",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSort()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderSearchRequestValidationError{
				field:  "Sort",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OrderSearchRequestMultiError(errors)
	}

	return nil
}

func (m *OrderSearchRequest) _validateUuid(uuid string) error {
	if matched := _orders_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// OrderSearchRequestMultiError is an error wrapping multiple validation errors
// returned by OrderSearchRequest.ValidateAll() if the designated constraints
// aren't met.
type OrderSearchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderSearchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderSearchRequestMultiError) AllErrors() []error { return m }

// OrderSearchRequestValidationError is the validation error returned by
// OrderSearchRequest.Validate if the designated constraints aren't met.
type OrderSearchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderSearchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderSearchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderSearchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderSearchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderSearchRequestValidationError) ErrorName() string {
	return "OrderSearchRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OrderSearchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderSearchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderSearchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderSearchRequestValidationError{}

// Validate checks the field values on PositionRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PositionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PositionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PositionRequestMultiError, or nil if none found.
func (m *PositionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PositionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetAccount()); l < 3 || l > 36 {
		err := PositionRequestValidationError{
			field:  "Account",
			reason: "value length must be between 3 and 36 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetPortfolioUUID()); err != nil {
		err = PositionRequestValidationError{
			field:  "PortfolioUUID",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetSort() == nil {
		err := PositionRequestValidationError{
			field:  "Sort",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetSort()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PositionRequestValidationError{
					field:  "Sort",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PositionRequestValidationError{
					field:  "Sort",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSort()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PositionRequestValidationError{
				field:  "Sort",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PositionRequestMultiError(errors)
	}

	return nil
}

func (m *PositionRequest) _validateUuid(uuid string) error {
	if matched := _orders_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// PositionRequestMultiError is an error wrapping multiple validation errors
// returned by PositionRequest.ValidateAll() if the designated constraints
// aren't met.
type PositionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PositionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PositionRequestMultiError) AllErrors() []error { return m }

// PositionRequestValidationError is the validation error returned by
// PositionRequest.Validate if the designated constraints aren't met.
type PositionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PositionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PositionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PositionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PositionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PositionRequestValidationError) ErrorName() string { return "PositionRequestValidationError" }

// Error satisfies the builtin error interface
func (e PositionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPositionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PositionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PositionRequestValidationError{}

// Validate checks the field values on OrderCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrderCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrderCreateRequestMultiError, or nil if none found.
func (m *OrderCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetAccount()); l < 3 || l > 36 {
		err := OrderCreateRequestValidationError{
			field:  "Account",
			reason: "value length must be between 3 and 36 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetPortfolioUUID()); err != nil {
		err = OrderCreateRequestValidationError{
			field:  "PortfolioUUID",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetTicker()); l < 1 || l > 8 {
		err := OrderCreateRequestValidationError{
			field:  "Ticker",
			reason: "value length must be between 1 and 8 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetExchange()); l < 1 || l > 8 {
		err := OrderCreateRequestValidationError{
			field:  "Exchange",
			reason: "value length must be between 1 and 8 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := v1Screener.OrderAction_name[int32(m.GetAction())]; !ok {
		err := OrderCreateRequestValidationError{
			field:  "Action",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := v1Screener.OrderType_name[int32(m.GetOrderType())]; !ok {
		err := OrderCreateRequestValidationError{
			field:  "OrderType",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetSize(); val <= 0.01 || val >= 1e+08 {
		err := OrderCreateRequestValidationError{
			field:  "Size",
			reason: "value must be inside range (0.01, 1e+08)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := v1Screener.OrderDuration_name[int32(m.GetDuration())]; !ok {
		err := OrderCreateRequestValidationError{
			field:  "Duration",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPrice(); val <= 1e-06 || val >= 1e+08 {
		err := OrderCreateRequestValidationError{
			field:  "Price",
			reason: "value must be inside range (1e-06, 1e+08)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return OrderCreateRequestMultiError(errors)
	}

	return nil
}

func (m *OrderCreateRequest) _validateUuid(uuid string) error {
	if matched := _orders_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// OrderCreateRequestMultiError is an error wrapping multiple validation errors
// returned by OrderCreateRequest.ValidateAll() if the designated constraints
// aren't met.
type OrderCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderCreateRequestMultiError) AllErrors() []error { return m }

// OrderCreateRequestValidationError is the validation error returned by
// OrderCreateRequest.Validate if the designated constraints aren't met.
type OrderCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderCreateRequestValidationError) ErrorName() string {
	return "OrderCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OrderCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderCreateRequestValidationError{}

// Validate checks the field values on OrderUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrderUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrderUpdateRequestMultiError, or nil if none found.
func (m *OrderUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetAccount()); l < 3 || l > 36 {
		err := OrderUpdateRequestValidationError{
			field:  "Account",
			reason: "value length must be between 3 and 36 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetPortfolioUUID()); err != nil {
		err = OrderUpdateRequestValidationError{
			field:  "PortfolioUUID",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetOrderUUID()); err != nil {
		err = OrderUpdateRequestValidationError{
			field:  "OrderUUID",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := v1Screener.OrderAction_name[int32(m.GetAction())]; !ok {
		err := OrderUpdateRequestValidationError{
			field:  "Action",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := v1Screener.OrderType_name[int32(m.GetOrderType())]; !ok {
		err := OrderUpdateRequestValidationError{
			field:  "OrderType",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetSize(); val <= 0.01 || val >= 1e+08 {
		err := OrderUpdateRequestValidationError{
			field:  "Size",
			reason: "value must be inside range (0.01, 1e+08)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := v1Screener.OrderDuration_name[int32(m.GetDuration())]; !ok {
		err := OrderUpdateRequestValidationError{
			field:  "Duration",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPrice(); val <= 1e-06 || val >= 1e+08 {
		err := OrderUpdateRequestValidationError{
			field:  "Price",
			reason: "value must be inside range (1e-06, 1e+08)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return OrderUpdateRequestMultiError(errors)
	}

	return nil
}

func (m *OrderUpdateRequest) _validateUuid(uuid string) error {
	if matched := _orders_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// OrderUpdateRequestMultiError is an error wrapping multiple validation errors
// returned by OrderUpdateRequest.ValidateAll() if the designated constraints
// aren't met.
type OrderUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderUpdateRequestMultiError) AllErrors() []error { return m }

// OrderUpdateRequestValidationError is the validation error returned by
// OrderUpdateRequest.Validate if the designated constraints aren't met.
type OrderUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderUpdateRequestValidationError) ErrorName() string {
	return "OrderUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OrderUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderUpdateRequestValidationError{}

// Validate checks the field values on OrderCancelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrderCancelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderCancelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrderCancelRequestMultiError, or nil if none found.
func (m *OrderCancelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderCancelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetAccount()); l < 3 || l > 36 {
		err := OrderCancelRequestValidationError{
			field:  "Account",
			reason: "value length must be between 3 and 36 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetPortfolioUUID()); err != nil {
		err = OrderCancelRequestValidationError{
			field:  "PortfolioUUID",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetOrderUUID()); err != nil {
		err = OrderCancelRequestValidationError{
			field:  "OrderUUID",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return OrderCancelRequestMultiError(errors)
	}

	return nil
}

func (m *OrderCancelRequest) _validateUuid(uuid string) error {
	if matched := _orders_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// OrderCancelRequestMultiError is an error wrapping multiple validation errors
// returned by OrderCancelRequest.ValidateAll() if the designated constraints
// aren't met.
type OrderCancelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderCancelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderCancelRequestMultiError) AllErrors() []error { return m }

// OrderCancelRequestValidationError is the validation error returned by
// OrderCancelRequest.Validate if the designated constraints aren't met.
type OrderCancelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderCancelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderCancelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderCancelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderCancelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderCancelRequestValidationError) ErrorName() string {
	return "OrderCancelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OrderCancelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderCancelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderCancelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderCancelRequestValidationError{}

// Validate checks the field values on PositionReplies with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PositionReplies) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PositionReplies with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PositionRepliesMultiError, or nil if none found.
func (m *PositionReplies) ValidateAll() error {
	return m.validate(true)
}

func (m *PositionReplies) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PositionRepliesValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PositionRepliesValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PositionRepliesValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return PositionRepliesMultiError(errors)
	}

	return nil
}

// PositionRepliesMultiError is an error wrapping multiple validation errors
// returned by PositionReplies.ValidateAll() if the designated constraints
// aren't met.
type PositionRepliesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PositionRepliesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PositionRepliesMultiError) AllErrors() []error { return m }

// PositionRepliesValidationError is the validation error returned by
// PositionReplies.Validate if the designated constraints aren't met.
type PositionRepliesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PositionRepliesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PositionRepliesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PositionRepliesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PositionRepliesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PositionRepliesValidationError) ErrorName() string { return "PositionRepliesValidationError" }

// Error satisfies the builtin error interface
func (e PositionRepliesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPositionReplies.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PositionRepliesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PositionRepliesValidationError{}

// Validate checks the field values on OrderReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OrderReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OrderReplyMultiError, or
// nil if none found.
func (m *OrderReply) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Ticker

	// no validation rules for Exchange

	// no validation rules for Action

	// no validation rules for OrderType

	// no validation rules for Routing

	// no validation rules for Duration

	if all {
		switch v := interface{}(m.GetSize()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderReplyValidationError{
					field:  "Size",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderReplyValidationError{
					field:  "Size",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSize()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderReplyValidationError{
				field:  "Size",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPrice()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderReplyValidationError{
					field:  "Price",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderReplyValidationError{
					field:  "Price",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPrice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderReplyValidationError{
				field:  "Price",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderReplyValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderReplyValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderReplyValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderReplyValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderReplyValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderReplyValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OrderReplyMultiError(errors)
	}

	return nil
}

// OrderReplyMultiError is an error wrapping multiple validation errors
// returned by OrderReply.ValidateAll() if the designated constraints aren't met.
type OrderReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderReplyMultiError) AllErrors() []error { return m }

// OrderReplyValidationError is the validation error returned by
// OrderReply.Validate if the designated constraints aren't met.
type OrderReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderReplyValidationError) ErrorName() string { return "OrderReplyValidationError" }

// Error satisfies the builtin error interface
func (e OrderReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderReplyValidationError{}

// Validate checks the field values on OrderReplies with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OrderReplies) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderReplies with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OrderRepliesMultiError, or
// nil if none found.
func (m *OrderReplies) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderReplies) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OrderRepliesValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OrderRepliesValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OrderRepliesValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return OrderRepliesMultiError(errors)
	}

	return nil
}

// OrderRepliesMultiError is an error wrapping multiple validation errors
// returned by OrderReplies.ValidateAll() if the designated constraints aren't met.
type OrderRepliesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderRepliesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderRepliesMultiError) AllErrors() []error { return m }

// OrderRepliesValidationError is the validation error returned by
// OrderReplies.Validate if the designated constraints aren't met.
type OrderRepliesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderRepliesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderRepliesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderRepliesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderRepliesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderRepliesValidationError) ErrorName() string { return "OrderRepliesValidationError" }

// Error satisfies the builtin error interface
func (e OrderRepliesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderReplies.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderRepliesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderRepliesValidationError{}

// Validate checks the field values on OrderCancel with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OrderCancel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderCancel with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OrderCancelMultiError, or
// nil if none found.
func (m *OrderCancel) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderCancel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return OrderCancelMultiError(errors)
	}

	return nil
}

// OrderCancelMultiError is an error wrapping multiple validation errors
// returned by OrderCancel.ValidateAll() if the designated constraints aren't met.
type OrderCancelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderCancelMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderCancelMultiError) AllErrors() []error { return m }

// OrderCancelValidationError is the validation error returned by
// OrderCancel.Validate if the designated constraints aren't met.
type OrderCancelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderCancelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderCancelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderCancelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderCancelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderCancelValidationError) ErrorName() string { return "OrderCancelValidationError" }

// Error satisfies the builtin error interface
func (e OrderCancelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderCancel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderCancelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderCancelValidationError{}

// Validate checks the field values on PositionReplies_Result with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PositionReplies_Result) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PositionReplies_Result with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PositionReplies_ResultMultiError, or nil if none found.
func (m *PositionReplies_Result) ValidateAll() error {
	return m.validate(true)
}

func (m *PositionReplies_Result) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ticker

	// no validation rules for Exchange

	// no validation rules for Size

	if all {
		switch v := interface{}(m.GetCost()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PositionReplies_ResultValidationError{
					field:  "Cost",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PositionReplies_ResultValidationError{
					field:  "Cost",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCost()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PositionReplies_ResultValidationError{
				field:  "Cost",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPerformance()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PositionReplies_ResultValidationError{
					field:  "Performance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PositionReplies_ResultValidationError{
					field:  "Performance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPerformance()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PositionReplies_ResultValidationError{
				field:  "Performance",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PositionReplies_ResultValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PositionReplies_ResultValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PositionReplies_ResultValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PositionReplies_ResultValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PositionReplies_ResultValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PositionReplies_ResultValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PositionReplies_ResultMultiError(errors)
	}

	return nil
}

// PositionReplies_ResultMultiError is an error wrapping multiple validation
// errors returned by PositionReplies_Result.ValidateAll() if the designated
// constraints aren't met.
type PositionReplies_ResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PositionReplies_ResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PositionReplies_ResultMultiError) AllErrors() []error { return m }

// PositionReplies_ResultValidationError is the validation error returned by
// PositionReplies_Result.Validate if the designated constraints aren't met.
type PositionReplies_ResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PositionReplies_ResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PositionReplies_ResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PositionReplies_ResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PositionReplies_ResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PositionReplies_ResultValidationError) ErrorName() string {
	return "PositionReplies_ResultValidationError"
}

// Error satisfies the builtin error interface
func (e PositionReplies_ResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPositionReplies_Result.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PositionReplies_ResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PositionReplies_ResultValidationError{}

// Validate checks the field values on PositionReplies_Result_Performance with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *PositionReplies_Result_Performance) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PositionReplies_Result_Performance
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// PositionReplies_Result_PerformanceMultiError, or nil if none found.
func (m *PositionReplies_Result_Performance) ValidateAll() error {
	return m.validate(true)
}

func (m *PositionReplies_Result_Performance) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Percent

	// no validation rules for Money

	if len(errors) > 0 {
		return PositionReplies_Result_PerformanceMultiError(errors)
	}

	return nil
}

// PositionReplies_Result_PerformanceMultiError is an error wrapping multiple
// validation errors returned by
// PositionReplies_Result_Performance.ValidateAll() if the designated
// constraints aren't met.
type PositionReplies_Result_PerformanceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PositionReplies_Result_PerformanceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PositionReplies_Result_PerformanceMultiError) AllErrors() []error { return m }

// PositionReplies_Result_PerformanceValidationError is the validation error
// returned by PositionReplies_Result_Performance.Validate if the designated
// constraints aren't met.
type PositionReplies_Result_PerformanceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PositionReplies_Result_PerformanceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PositionReplies_Result_PerformanceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PositionReplies_Result_PerformanceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PositionReplies_Result_PerformanceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PositionReplies_Result_PerformanceValidationError) ErrorName() string {
	return "PositionReplies_Result_PerformanceValidationError"
}

// Error satisfies the builtin error interface
func (e PositionReplies_Result_PerformanceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPositionReplies_Result_Performance.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PositionReplies_Result_PerformanceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PositionReplies_Result_PerformanceValidationError{}

// Validate checks the field values on PositionReplies_Result_Cost with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PositionReplies_Result_Cost) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PositionReplies_Result_Cost with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PositionReplies_Result_CostMultiError, or nil if none found.
func (m *PositionReplies_Result_Cost) ValidateAll() error {
	return m.validate(true)
}

func (m *PositionReplies_Result_Cost) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Unit

	// no validation rules for Total

	if len(errors) > 0 {
		return PositionReplies_Result_CostMultiError(errors)
	}

	return nil
}

// PositionReplies_Result_CostMultiError is an error wrapping multiple
// validation errors returned by PositionReplies_Result_Cost.ValidateAll() if
// the designated constraints aren't met.
type PositionReplies_Result_CostMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PositionReplies_Result_CostMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PositionReplies_Result_CostMultiError) AllErrors() []error { return m }

// PositionReplies_Result_CostValidationError is the validation error returned
// by PositionReplies_Result_Cost.Validate if the designated constraints
// aren't met.
type PositionReplies_Result_CostValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PositionReplies_Result_CostValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PositionReplies_Result_CostValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PositionReplies_Result_CostValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PositionReplies_Result_CostValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PositionReplies_Result_CostValidationError) ErrorName() string {
	return "PositionReplies_Result_CostValidationError"
}

// Error satisfies the builtin error interface
func (e PositionReplies_Result_CostValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPositionReplies_Result_Cost.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PositionReplies_Result_CostValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PositionReplies_Result_CostValidationError{}

// Validate checks the field values on OrderReply_Size with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OrderReply_Size) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderReply_Size with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrderReply_SizeMultiError, or nil if none found.
func (m *OrderReply_Size) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderReply_Size) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ask

	// no validation rules for Buy

	if len(errors) > 0 {
		return OrderReply_SizeMultiError(errors)
	}

	return nil
}

// OrderReply_SizeMultiError is an error wrapping multiple validation errors
// returned by OrderReply_Size.ValidateAll() if the designated constraints
// aren't met.
type OrderReply_SizeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderReply_SizeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderReply_SizeMultiError) AllErrors() []error { return m }

// OrderReply_SizeValidationError is the validation error returned by
// OrderReply_Size.Validate if the designated constraints aren't met.
type OrderReply_SizeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderReply_SizeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderReply_SizeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderReply_SizeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderReply_SizeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderReply_SizeValidationError) ErrorName() string { return "OrderReply_SizeValidationError" }

// Error satisfies the builtin error interface
func (e OrderReply_SizeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderReply_Size.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderReply_SizeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderReply_SizeValidationError{}

// Validate checks the field values on OrderReply_Price with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OrderReply_Price) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderReply_Price with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrderReply_PriceMultiError, or nil if none found.
func (m *OrderReply_Price) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderReply_Price) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ask

	// no validation rules for Buy

	// no validation rules for Commission

	if len(errors) > 0 {
		return OrderReply_PriceMultiError(errors)
	}

	return nil
}

// OrderReply_PriceMultiError is an error wrapping multiple validation errors
// returned by OrderReply_Price.ValidateAll() if the designated constraints
// aren't met.
type OrderReply_PriceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderReply_PriceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderReply_PriceMultiError) AllErrors() []error { return m }

// OrderReply_PriceValidationError is the validation error returned by
// OrderReply_Price.Validate if the designated constraints aren't met.
type OrderReply_PriceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderReply_PriceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderReply_PriceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderReply_PriceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderReply_PriceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderReply_PriceValidationError) ErrorName() string { return "OrderReply_PriceValidationError" }

// Error satisfies the builtin error interface
func (e OrderReply_PriceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderReply_Price.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderReply_PriceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderReply_PriceValidationError{}
