syntax = "proto3";

package orders.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "validate/validate.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "proto/screener/v1/screener.proto";

option go_package = "github.com/arktos-venture/buf/proto/orders/v1;v1Orders";
option java_multiple_files = true;
option java_package = "dev.kratos.api.orders.v1";
option java_outer_classname = "APIOrdersProtoV1";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
	info: {
    title: "Orders APIs";
		description: "Orders APIs accounts";
    version: "1.0";
		contact: {
			name: "Arktos Venture project";
			url: "https://github.com/arktos-venture/buf";
			email: "oss@arktos-consulting.cloud";
		};
  };
	schemes: [HTTP, HTTPS];
	consumes: "application/json";
	produces: "application/json";
	security_definitions: {
	  security: {
		  key: "bearer"
		  value: {
		    type: TYPE_API_KEY
		    in: IN_HEADER
		    name: "Authorization"
		    description: "Authentication token, prefixed by Bearer: Bearer <token>"
		  }
	  }
  }
	security: {
	  security_requirement: {
			key: "bearer"
	  }
	}
};

service Orders {
  // Public API : Search Positions opened
  rpc Positions (PositionRequest) returns (PositionReplies)  {
    option (google.api.http) = {
      post: "/v1/positions/{account}/{portfolioUUID}"
      body: "*"
    };
  }
  
	// Public API: Status Order
  rpc Status (OrderStatusRequest) returns (OrderReply)  {
    option (google.api.http) = {
      get: "/v1/orders/{account}/{portfolioUUID}/{orderUUID}"
    };
  }

	// Public API: Search Orders
  rpc Search (OrderSearchRequest) returns (OrderReplies)  {
    option (google.api.http) = {
      post: "/v1/orders/{account}/{portfolioUUID}/search"
      body: "*"
    };
  }

	// Public API: Create Order
  rpc Create (OrderCreateRequest) returns (OrderModifyReply)  {
    option (google.api.http) = {
      post: "/v1/orders/{account}/{portfolioUUID}"
      body: "*"
    };
  }

	// Public API: Update existing Orders
  rpc Update (OrderUpdateRequest) returns (OrderModifyReply)  {
    option (google.api.http) = {
      patch: "/v1/orders/{account}/{portfolioUUID}/{orderUUID}"
      body: "*"
    };
  }
 
	// Private API: Cancel existing Orders
  rpc Cancel (OrderCancelRequest) returns (OrderCancel)  {
    option (google.api.http) = {
      delete: "/v1/orders/{account}/{portfolioUUID}/{orderUUID}/cancel"
    };
  }
}


// 
// Request
// 

message OrderStatusRequest {
  string account = 1 [(validate.rules).string = {min_len: 3, max_len: 36}];
  string portfolioUUID = 2 [(validate.rules).string.uuid = true];
	string orderUUID = 3 [(validate.rules).string.uuid = true];
}

message OrderSearchRequest {
  string account = 1 [(validate.rules).string = {min_len: 3, max_len: 36}];
  string portfolioUUID = 2 [(validate.rules).string.uuid = true];
  repeated screener.v1.Asset assets = 3;
	screener.v1.ScreenerRequest.Sort sort = 4 [(validate.rules).message.required = true];
}

message PositionRequest {
  string account = 1 [(validate.rules).string = {min_len: 3, max_len: 36}];
  string portfolioUUID = 2 [(validate.rules).string.uuid = true];
  repeated screener.v1.Asset assets = 3;
  screener.v1.ScreenerRequest.Sort sort = 4 [(validate.rules).message.required = true];
}

message OrderCreateRequest {  
  string account = 1 [(validate.rules).string = {min_len: 3, max_len: 36}];
  string portfolioUUID = 2 [(validate.rules).string.uuid = true];
  string ticker = 3 [(validate.rules).string = {min_len: 1, max_len: 8}];
  string exchange = 4 [(validate.rules).string = {min_len: 1, max_len: 8}];
  screener.v1.OrderAction action = 5 [(validate.rules).enum = {defined_only: true}];
  screener.v1.OrderType orderType = 6 [(validate.rules).enum = {defined_only: true}];
  float size = 7 [(validate.rules).float = {gt: 0.01, lt: 99999999}];
  screener.v1.OrderDuration duration = 8 [(validate.rules).enum = {defined_only: true}];
  float price = 9 [(validate.rules).float = {gt: 0.000001, lt: 99999999}];
}

message OrderUpdateRequest {  
  string account = 1 [(validate.rules).string = {min_len: 3, max_len: 36}];
  string portfolioUUID = 2 [(validate.rules).string.uuid = true];
  string orderUUID = 3 [(validate.rules).string.uuid = true];
  screener.v1.OrderAction action = 4 [(validate.rules).enum = {defined_only: true}];
  screener.v1.OrderType orderType = 5 [(validate.rules).enum = {defined_only: true}];
  float size = 6 [(validate.rules).float = {gt: 0.01, lt: 99999999}];
  screener.v1.OrderDuration duration = 7 [(validate.rules).enum = {defined_only: true}];
  float price = 8 [(validate.rules).float = {gt: 0.000001, lt: 99999999}];
}

message OrderCancelRequest {  
  string account = 1 [(validate.rules).string = {min_len: 3, max_len: 36}];
  string portfolioUUID = 2 [(validate.rules).string.uuid = true];
  string orderUUID = 3 [(validate.rules).string.uuid = true];
}


// 
// Reply
// 

message PositionReplies {
  message Result {
    message Performance {
      float percent = 1;
      float money = 2;
    }
  
    message Cost {
      float unit = 1;
      float total = 2;
    }
  
    string ticker = 1;
    string exchange = 2;
    float size = 3;
    Cost cost = 4;
    Performance performance = 5;
    google.protobuf.Timestamp created_at = 6;
    google.protobuf.Timestamp updated_at = 7;
  }

  repeated Result results = 1;
  int64 total = 2;
}

message OrderReply {
  message Size {
    float ask = 1;
    float buy = 2;
  }
  
  message Price {
    float ask = 1;
    float buy = 2;
    float commission = 3;
  }

  string id = 1;
  string ticker = 2;
  string exchange = 3;
  screener.v1.OrderAction action = 4;
  screener.v1.OrderType orderType = 5;
  string routing = 6;
  screener.v1.OrderDuration duration = 7;
  Size size = 8;
  Price price = 9;
  screener.v1.OrderStatus status = 10;
  google.protobuf.Timestamp created_at = 11;
  google.protobuf.Timestamp updated_at = 12;
}

message OrderModifyReply {  
  string ticker = 1;
  string exchange = 2;
  screener.v1.OrderAction action = 3;
  screener.v1.OrderType orderType = 4;
  string routing = 5;
  screener.v1.OrderDuration duration = 6;
  float size = 7;
  float price = 8;
  screener.v1.OrderStatus status = 9;
}

message OrderReplies {
  repeated OrderReply results = 1;
  int64 total = 2;
}

message OrderCancel {
  string id = 1;
}