syntax = "proto3";

package orders.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "validate/validate.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "proto/screener/v1/screener.proto";

option go_package = "github.com/arktos-venture/buf/proto/orders/v1;orders_v1";
option java_multiple_files = true;
option java_package = "dev.kratos.api.orders.v1";
option java_outer_classname = "APIOrdersProtoV1";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
	info: {
    title: "Orders APIs";
		description: "Orders APIs accounts";
    version: "1.0";
		contact: {
			name: "Arktos Venture project";
			url: "https://github.com/arktos-venture/buf";
			email: "oss@arktos-consulting.cloud";
		};
  };
	schemes: [HTTP, HTTPS];
	consumes: "application/json";
	produces: "application/json";
	security_definitions: {
	  security: {
		  key: "bearer"
		  value: {
		    type: TYPE_API_KEY
		    in: IN_HEADER
		    name: "Authorization"
		    description: "Authentication token, prefixed by Bearer: Bearer <token>"
		  }
	  }
  }
	security: {
	  security_requirement: {
			key: "bearer"
	  }
	}
};

service Orders {
	// Public API
	// Search Orders open or executed
  rpc Search (OrderSearchRequest) returns (OrderReplies)  {
    option (google.api.http) = {
      post: "/v1/orders/{account}/search"
      body: "*"
    };
  }

	// Public API
	// Create Orders
  rpc Create (OrderModifyRequest) returns (OrderReply)  {
    option (google.api.http) = {
      post: "/v1/order/{account}"
      body: "*"
    };
  }

	// Public API
	// Update existing Orders
  rpc Update (OrderModifyRequest) returns (OrderReply)  {
    option (google.api.http) = {
      put: "/v1/order/{account}"
      body: "*"
    };
  }

	// Private API
	// Delete/cancel existing Orders
  rpc Delete (OrderDeleteRequest) returns (OrderDelete)  {
    option (google.api.http) = {
      delete: "/v1/orders/{account}"
    };
  }
}


// 
// Request
// 

enum OrderType {
  LMT = 0;
  MKT = 1;
  STP = 2;
  IBALGO = 3;
  MIDPRICE = 4;
  OALL = 5;
}

enum Duration {
  DAY = 0;
  GTC = 1;
}

enum Action {
  BUY = 0;
  SELL = 1;
  HOLD = 2;
}

enum Status {
  SUBMITTED = 0;
  PRESUBMITED = 1;
  CLOSE = 2;
  OPEN = 3;
}

enum Argument {
	Ticker = 0;
	Exchange = 1;
	Currency = 2;
	Price = 3;
	Size = 4;
	Isin = 5;
	Id = 6;
  oAction = 7;
  oDuration = 8;
  oType = 9;
  oStatus = 10;
  Time = 11;
}

message Filter {
	screener.v1.Operator operator = 1 [(validate.rules).enum = {defined_only: true}];
	Argument argument = 2 [(validate.rules).enum = {defined_only: true}];
	repeated string values = 3 [(validate.rules).repeated.min_items = 1, (validate.rules).repeated.max_items = 1000];
}

message OrderRequest {
  string account = 1 [(validate.rules).string = {min_len: 3, max_len: 36}];
  string ticker = 2 [(validate.rules).string = {min_len: 1, max_len: 8}];
  string exchange = 3 [(validate.rules).string = {min_len: 1, max_len: 8}];
}

message OrderSearchRequest {
	message Sort {
		Argument argument = 1 [(validate.rules).enum = {defined_only: true}];
		screener.v1.ScreenerRequest.Sort.Orientation orientation = 2 [(validate.rules).enum = {defined_only: true}];
	}

  string account = 1 [(validate.rules).string = {min_len: 3, max_len: 36}];
	repeated Filter filters = 2 [(validate.rules).repeated.min_items = 1, (validate.rules).repeated.max_items = 20];
	Sort sort = 3 [(validate.rules).message.required = true];
  int32 limit = 4 [(validate.rules).int32 = {gt: 0, lte: 10000}];
}

message OrderModifyRequest {  
  string account = 1 [(validate.rules).string = {min_len: 3, max_len: 36}];
  string ticker = 2 [(validate.rules).string = {min_len: 1, max_len: 8}];
  string exchange = 3 [(validate.rules).string = {min_len: 1, max_len: 8}];
  Action action = 5 [(validate.rules).enum = {defined_only: true}];
  OrderType orderType = 6 [(validate.rules).enum = {defined_only: true}];
  float size = 7 [(validate.rules).float = {gt: 0.01, lt: 99999999}];
  Duration duration = 8 [(validate.rules).enum = {defined_only: true}];
  float price = 9 [(validate.rules).float = {gt: 0.000001, lt: 99999999}];
}

message OrderDeleteRequest {  
  string account = 1 [(validate.rules).string = {min_len: 3, max_len: 36}];
  repeated string tickers = 2 [(validate.rules).repeated.min_items = 0, (validate.rules).repeated.unique = true];
  repeated string exchanges = 3 [(validate.rules).repeated.min_items = 0, (validate.rules).repeated.unique = true];
}


// 
// Reply
// 

message OrderReply {
  message Size {
    float ask = 1;
    float buy = 2;
  }
  
  message Price {
    float ask = 1;
    float buy = 2;
    float commission = 3;
  }

  string ticker = 1;
  string exchange = 2;
  Action action = 3;
  OrderType orderType = 4;
  string routing = 5;
  Duration duration = 6;
  Size size = 7;
  Price price = 8;
  Status status = 9;
  google.protobuf.Timestamp created_at = 10;
  google.protobuf.Timestamp updated_at = 11;
}

message OrderReplies {
  repeated OrderReply results = 1;
  int64 total = 2;
}

message OrderDelete {
  int64 total = 1;
}