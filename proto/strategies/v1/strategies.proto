syntax = "proto3";

package strategies.v1;

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "validate/validate.proto";

option go_package = "grpc-api/api/strategies/v1;v1";
option java_multiple_files = true;
option java_package = "dev.kratos.api.strategies.v1";
option java_outer_classname = "StrategiesProtoV1";

service Strategies {
	rpc Execute (StrategyRequest) returns (StrategyReply)  {
		option (google.api.http) = {
		  	post: "/v1/strategy/execute"
		  	body: "*"
		};
	}

	rpc Health (google.protobuf.Empty) returns (google.protobuf.Empty)  {
		option (google.api.http) = {
			get: "/healthz"
		};
	}
}
// 
// Request
// 

enum Interval {
	d = 0;
	w = 1;
	m = 2;
	y = 3;
}

enum TSDB {
	Companies = 0;
	Currencies = 1;
	Industries = 2;
	Exchanges = 3;
	Countries = 4;
	Indexes = 5;
	Accounts = 6;
}
  
enum Operator {
	Equal = 0;
	Greater = 1;
	GreaterEqual = 2;
	Less = 3;
	LessEqual = 4;
}
  
enum Argument {
	Ticker = 0;
	Exchange = 1;
	Industry = 2;
	Index = 3;
	Country = 4;
	Currency = 5;
	Time = 6;
}
  
message Filter {
	Operator operator = 1 [(validate.rules).enum = {defined_only: true}];
	Argument argument = 2 [(validate.rules).enum = {defined_only: true}];
	string value = 3;
}

message Strategy {
	string name = 1;
	map<string, int32> params = 2 [(validate.rules).map = {min_pairs: 2, max_pairs: 10}];
	float inject = 3;
}
  
message StrategyRequest {
	TSDB tsdb = 1 [(validate.rules).enum = {defined_only: true}];
	Interval interval = 2 [(validate.rules).enum = {defined_only: true}];
	Strategy strategy = 3;
	repeated Filter filters = 4 [(validate.rules).repeated.min_items = 1, (validate.rules).repeated.max_items = 20];
}

// 
// Reply
// 

message StrategyReply {
	enum Action {
		HOLD = 0;
		BUY = 1;
		SELL = 2;
	}

	Action action = 1;
	google.protobuf.Timestamp date = 2;
	float last_quote = 3;
	google.protobuf.Timestamp last_quote_date = 4;
}
