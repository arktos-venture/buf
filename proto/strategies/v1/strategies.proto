syntax = "proto3";

package strategies.v1;

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "validate/validate.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "proto/quotes/v1/quotes.proto";

option go_package = "github.com/arktos-venture/buf/proto/strategies/v1;strategies_v1";
option java_multiple_files = true;
option java_package = "dev.kratos.api.strategies.v1";
option java_outer_classname = "APIStrategiesProtoV1";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
	info: {
        title: "Strategies APIs";
		description: "Strategies APIs";
        version: "1.0";
		contact: {
			name: "Arktos Venture project";
			url: "https://github.com/arktos-venture/buf";
			email: "oss@arktos-consulting.cloud";
		};
  	};
	schemes: [HTTP, HTTPS];
	consumes: "application/json";
	produces: "application/json";
	security_definitions: {
	  	security: {
			key: "bearer"
			value: {
		  		type: TYPE_API_KEY
		  		in: IN_HEADER
		  		name: "Authorization"
		  		description: "Authentication token, prefixed by Bearer: Bearer <token>"
			}
	  	}
	}
	security: {
	  	security_requirement: {
			key: "bearer"
	  	}
	}
};

service Strategies {
	rpc Get (StrategyRequest) returns (StrategyReply)  {
		option (google.api.http) = {
		  	get: "/v1/strategy/{ticker}"
		};
	}

	rpc List (google.protobuf.Empty) returns (StrategyReplies)  {
		option (google.api.http) = {
		  	get: "/v1/strategies"
		};
	}

	rpc Create (StrategyUpdateRequest) returns (StrategyReply)  {
		option (google.api.http) = {
		  	post: "/v1/strategy"
			body: "*"
		};
	}

	rpc Update (StrategyUpdateRequest) returns (StrategyReply)  {
		option (google.api.http) = {
			put: "/v1/strategy/{ticker}"
			body: "*"
		};
	}

	rpc Delete (StrategyRequest) returns (google.protobuf.Empty)  {
		option (google.api.http) = {
		  	delete: "/v1/strategy/{ticker}"
		};
	}

	rpc Execute (StrategyExecuteRequest) returns (StrategyExecutedReply)  {
		option (google.api.http) = {
		  	post: "/v1/strategy/{strategy.ticker}/execute"
		  	body: "*"
		};
	}
}


// Transverse
message Request {
	map<string, int32> parameters = 1;
	map<string, int32> period = 2;
}


// 
// Request
// 

message StrategyRequest {
	string ticker = 1;
}

message StrategyUpdateRequest {
	string ticker = 1;
	string account = 2;
	string name = 3;
	string description = 4;
	Request parameters = 5;
}
  
message StrategyExecuteRequest {
	message Strategy {
		string ticker = 1;
		map<string, int32> params = 2 [(validate.rules).map = {min_pairs: 2, max_pairs: 10}];
		float inject = 3;
	}

	quotes.v1.TSDB tsdb = 1 [(validate.rules).enum = {defined_only: true}];
	quotes.v1.Interval interval = 2 [(validate.rules).enum = {defined_only: true}];
	Strategy strategy = 3;
	repeated quotes.v1.Filter filters = 4 [(validate.rules).repeated.min_items = 1, (validate.rules).repeated.max_items = 20];
}

// 
// Reply
// 

message StrategyReply {
	string ticker = 1;
	string description = 2;
	string account = 3;
	Request request = 4;
	google.protobuf.Timestamp created_at = 5;
	google.protobuf.Timestamp updated_at = 6; 
}

message StrategyReplies {
	repeated StrategyReply results = 1;
	int32 total = 2; 
}

message StrategyExecutedReply {
	enum Action {
		BUY = 0;
		SELL = 1;
		HOLD = 2;
	}

	Action action = 1;
	google.protobuf.Timestamp date = 2;
	float last_quote = 3;
	google.protobuf.Timestamp last_quote_date = 4;
}
