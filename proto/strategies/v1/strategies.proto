syntax = "proto3";

package strategies.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "validate/validate.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "proto/screener/v1/screener.proto";

option go_package = "github.com/arktos-venture/buf/proto/strategies/v1;v1Strategies";
option java_multiple_files = true;
option java_package = "dev.kratos.api.strategies.v1";
option java_outer_classname = "APIStrategiesProtoV1";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
	info: {
        title: "Strategies APIs";
		description: "Strategies APIs";
        version: "1.0";
		contact: {
			name: "Arktos Venture project";
			url: "https://github.com/arktos-venture/buf";
			email: "oss@arktos-consulting.cloud";
		};
  	};
	schemes: [HTTP, HTTPS];
	consumes: "application/json";
	produces: "application/json";
	security_definitions: {
	  	security: {
			key: "bearer"
			value: {
		  		type: TYPE_API_KEY
		  		in: IN_HEADER
		  		name: "Authorization"
		  		description: "Authentication token, prefixed by Bearer: Bearer <token>"
			}
	  	}
	}
	security: {
	  	security_requirement: {
			key: "bearer"
	  	}
	}
};

service Strategies {
	// Public API
	// Get Strategy properties
	rpc Get (StrategyRequest) returns (StrategyReply)  {
		option (google.api.http) = {
		  	get: "/v1/strategy/{ticker}"
		};
	}

	// Public API
	// List Strategies
	rpc List (StrategyListRequest) returns (StrategyReplies)  {
		option (google.api.http) = {
		  	get: "/v1/strategies"
		};
	}

	// Public API
	// Search Strategies
	rpc Search (StrategySearchRequest) returns (StrategySearchReplies)  {
		option (google.api.http) = {
		  	post: "/v1/strategies/search"
			body: "*"
		};
	}

	// Public API
	// Create Strategy
	rpc Create (StrategyModifyRequest) returns (StrategyReply)  {
		option (google.api.http) = {
		  	post: "/v1/strategies"
			body: "*"
		};
	}

	// Public API
	// Update Strategy properties
	rpc Update (StrategyModifyRequest) returns (StrategyReply)  {
		option (google.api.http) = {
			put: "/v1/strategy/{ticker}"
			body: "*"
		};
	}

	// Public API
	// Delete Strategy
	rpc Delete (StrategyDeleteRequest) returns (StrategyDelete)  {
		option (google.api.http) = {
		  	delete: "/v1/strategies"
		};
	}
}


// Transverse
message Parameters {
	map<string, float> values = 1 [(validate.rules).map.min_pairs = 1];
	map<string, int32> period = 2 [(validate.rules).map.min_pairs = 1];
}


// 
// Request
// 

message StrategyRequest {
	string account = 1 [(validate.rules).string = {min_len: 3, max_len: 36}];
	string ticker = 2 [(validate.rules).string = {min_len: 1, max_len: 16}];
}

message StrategyListRequest {
	string account = 1 [(validate.rules).string = {min_len: 3, max_len: 36}];
}

message StrategySearchRequest {
	string account = 1 [(validate.rules).string = {min_len: 3, max_len: 36}];
	screener.v1.TSDB tsdb = 2 [(validate.rules).enum = {defined_only: true}];
  	repeated screener.v1.FilterSimple filters = 3 [(validate.rules).repeated.min_items = 1, (validate.rules).repeated.max_items = 20];
}

message StrategyModifyRequest {
	string account = 1 [(validate.rules).string = {min_len: 3, max_len: 36}];
	string ticker = 2 [(validate.rules).string = {min_len: 1, max_len: 16}];
	string name = 3 [(validate.rules).string = {min_len: 1, max_len: 64}];
	string description = 4 [(validate.rules).string = {min_len: 1, max_len: 8164}];
	Parameters parameters = 5 [(validate.rules).message.required = true];
}

message StrategyDeleteRequest {
	string account = 1 [(validate.rules).string = {min_len: 3, max_len: 36}];
	repeated string tickers = 2 [(validate.rules).repeated.min_items = 1, (validate.rules).repeated.unique = true];
}


// 
// Reply
// 

message StrategyReply {
	string ticker = 1;
	string name = 2;
	string description = 3;
	Parameters parameters = 4;
	google.protobuf.Timestamp created_at = 5;
	google.protobuf.Timestamp updated_at = 6; 
}

message StrategyReplies {
	message Result {
		string ticker = 1;
		string name = 2;
		google.protobuf.Timestamp created_at = 3;
		google.protobuf.Timestamp updated_at = 4; 
	}

	repeated Result results = 1;
	int64 total = 2; 
}

message StrategySearchReplies {
	message Result {
		repeated screener.v1.Interval period = 1;
		repeated screener.v1.OrderAction status = 2; 
		repeated float breakout = 3;
		repeated google.protobuf.Timestamp status_ago = 4;
		repeated google.protobuf.Timestamp created_at = 5;
		repeated google.protobuf.Timestamp updated_at = 6; 
	}
	
	map<string, Result> Results = 1;
	int64 total = 2; 
}

message StrategyDelete {
	int64 total = 1;
}