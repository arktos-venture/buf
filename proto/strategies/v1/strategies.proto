syntax = "proto3";

package strategies.v1;

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "validate/validate.proto";
import "proto/quotes/v1/quotes.proto";

option go_package = "github.com/arktos-venture/buf/proto/strategies/v1;strategies_v1";
option java_multiple_files = true;
option java_package = "dev.kratos.api.strategies.v1";
option java_outer_classname = "APIStrategiesProtoV1";

service Strategies {
	rpc Execute (StrategyRequest) returns (StrategyReply)  {
		option (google.api.http) = {
		  	post: "/v1/strategy/execute"
		  	body: "*"
		};
	}

	rpc Health (google.protobuf.Empty) returns (google.protobuf.Empty)  {
		option (google.api.http) = {
			get: "/healthz"
		};
	}
}
// 
// Request
// 

message Strategy {
	string name = 1;
	map<string, int32> params = 2 [(validate.rules).map = {min_pairs: 2, max_pairs: 10}];
	float inject = 3;
}
  
message StrategyRequest {
	quotes.v1.TSDB tsdb = 1 [(validate.rules).enum = {defined_only: true}];
	quotes.v1.Interval interval = 2 [(validate.rules).enum = {defined_only: true}];
	Strategy strategy = 3;
	repeated quotes.v1.Filter filters = 4 [(validate.rules).repeated.min_items = 1, (validate.rules).repeated.max_items = 20];
}

// 
// Reply
// 

message StrategyReply {
	enum Action {
		BUY = 0;
		SELL = 1;
		HOLD = 2;
	}

	Action action = 1;
	google.protobuf.Timestamp date = 2;
	float last_quote = 3;
	google.protobuf.Timestamp last_quote_date = 4;
}
