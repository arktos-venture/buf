// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/strategies/v1/strategies.proto

package v1Strategies

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	v1Screener "github.com/arktos-venture/buf/proto/screener/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = v1Screener.Interval(0)
)

// Validate checks the field values on Parameters with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Parameters) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Parameters with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ParametersMultiError, or
// nil if none found.
func (m *Parameters) ValidateAll() error {
	return m.validate(true)
}

func (m *Parameters) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetValues()) < 1 {
		err := ParametersValidationError{
			field:  "Values",
			reason: "value must contain at least 1 pair(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetPeriod()) < 1 {
		err := ParametersValidationError{
			field:  "Period",
			reason: "value must contain at least 1 pair(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ParametersMultiError(errors)
	}

	return nil
}

// ParametersMultiError is an error wrapping multiple validation errors
// returned by Parameters.ValidateAll() if the designated constraints aren't met.
type ParametersMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ParametersMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ParametersMultiError) AllErrors() []error { return m }

// ParametersValidationError is the validation error returned by
// Parameters.Validate if the designated constraints aren't met.
type ParametersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParametersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParametersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParametersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParametersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParametersValidationError) ErrorName() string { return "ParametersValidationError" }

// Error satisfies the builtin error interface
func (e ParametersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParameters.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParametersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParametersValidationError{}

// Validate checks the field values on StrategyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *StrategyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StrategyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StrategyRequestMultiError, or nil if none found.
func (m *StrategyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StrategyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetAccount()); l < 3 || l > 36 {
		err := StrategyRequestValidationError{
			field:  "Account",
			reason: "value length must be between 3 and 36 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetTicker()); l < 1 || l > 16 {
		err := StrategyRequestValidationError{
			field:  "Ticker",
			reason: "value length must be between 1 and 16 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return StrategyRequestMultiError(errors)
	}

	return nil
}

// StrategyRequestMultiError is an error wrapping multiple validation errors
// returned by StrategyRequest.ValidateAll() if the designated constraints
// aren't met.
type StrategyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StrategyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StrategyRequestMultiError) AllErrors() []error { return m }

// StrategyRequestValidationError is the validation error returned by
// StrategyRequest.Validate if the designated constraints aren't met.
type StrategyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StrategyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StrategyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StrategyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StrategyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StrategyRequestValidationError) ErrorName() string { return "StrategyRequestValidationError" }

// Error satisfies the builtin error interface
func (e StrategyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStrategyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StrategyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StrategyRequestValidationError{}

// Validate checks the field values on StrategyListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StrategyListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StrategyListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StrategyListRequestMultiError, or nil if none found.
func (m *StrategyListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StrategyListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetAccount()); l < 3 || l > 36 {
		err := StrategyListRequestValidationError{
			field:  "Account",
			reason: "value length must be between 3 and 36 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return StrategyListRequestMultiError(errors)
	}

	return nil
}

// StrategyListRequestMultiError is an error wrapping multiple validation
// errors returned by StrategyListRequest.ValidateAll() if the designated
// constraints aren't met.
type StrategyListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StrategyListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StrategyListRequestMultiError) AllErrors() []error { return m }

// StrategyListRequestValidationError is the validation error returned by
// StrategyListRequest.Validate if the designated constraints aren't met.
type StrategyListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StrategyListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StrategyListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StrategyListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StrategyListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StrategyListRequestValidationError) ErrorName() string {
	return "StrategyListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StrategyListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStrategyListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StrategyListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StrategyListRequestValidationError{}

// Validate checks the field values on StrategyModifyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StrategyModifyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StrategyModifyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StrategyModifyRequestMultiError, or nil if none found.
func (m *StrategyModifyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StrategyModifyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetAccount()); l < 3 || l > 36 {
		err := StrategyModifyRequestValidationError{
			field:  "Account",
			reason: "value length must be between 3 and 36 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetTicker()); l < 1 || l > 16 {
		err := StrategyModifyRequestValidationError{
			field:  "Ticker",
			reason: "value length must be between 1 and 16 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 64 {
		err := StrategyModifyRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetDescription()); l < 1 || l > 8164 {
		err := StrategyModifyRequestValidationError{
			field:  "Description",
			reason: "value length must be between 1 and 8164 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetParameters() == nil {
		err := StrategyModifyRequestValidationError{
			field:  "Parameters",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetParameters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StrategyModifyRequestValidationError{
					field:  "Parameters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StrategyModifyRequestValidationError{
					field:  "Parameters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParameters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StrategyModifyRequestValidationError{
				field:  "Parameters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StrategyModifyRequestMultiError(errors)
	}

	return nil
}

// StrategyModifyRequestMultiError is an error wrapping multiple validation
// errors returned by StrategyModifyRequest.ValidateAll() if the designated
// constraints aren't met.
type StrategyModifyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StrategyModifyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StrategyModifyRequestMultiError) AllErrors() []error { return m }

// StrategyModifyRequestValidationError is the validation error returned by
// StrategyModifyRequest.Validate if the designated constraints aren't met.
type StrategyModifyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StrategyModifyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StrategyModifyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StrategyModifyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StrategyModifyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StrategyModifyRequestValidationError) ErrorName() string {
	return "StrategyModifyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StrategyModifyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStrategyModifyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StrategyModifyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StrategyModifyRequestValidationError{}

// Validate checks the field values on StrategyDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StrategyDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StrategyDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StrategyDeleteRequestMultiError, or nil if none found.
func (m *StrategyDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StrategyDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetAccount()); l < 3 || l > 36 {
		err := StrategyDeleteRequestValidationError{
			field:  "Account",
			reason: "value length must be between 3 and 36 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetTickers()) < 1 {
		err := StrategyDeleteRequestValidationError{
			field:  "Tickers",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_StrategyDeleteRequest_Tickers_Unique := make(map[string]struct{}, len(m.GetTickers()))

	for idx, item := range m.GetTickers() {
		_, _ = idx, item

		if _, exists := _StrategyDeleteRequest_Tickers_Unique[item]; exists {
			err := StrategyDeleteRequestValidationError{
				field:  fmt.Sprintf("Tickers[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_StrategyDeleteRequest_Tickers_Unique[item] = struct{}{}
		}

		// no validation rules for Tickers[idx]
	}

	if len(errors) > 0 {
		return StrategyDeleteRequestMultiError(errors)
	}

	return nil
}

// StrategyDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by StrategyDeleteRequest.ValidateAll() if the designated
// constraints aren't met.
type StrategyDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StrategyDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StrategyDeleteRequestMultiError) AllErrors() []error { return m }

// StrategyDeleteRequestValidationError is the validation error returned by
// StrategyDeleteRequest.Validate if the designated constraints aren't met.
type StrategyDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StrategyDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StrategyDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StrategyDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StrategyDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StrategyDeleteRequestValidationError) ErrorName() string {
	return "StrategyDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StrategyDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStrategyDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StrategyDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StrategyDeleteRequestValidationError{}

// Validate checks the field values on StrategyReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StrategyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StrategyReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StrategyReplyMultiError, or
// nil if none found.
func (m *StrategyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *StrategyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ticker

	// no validation rules for Name

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetParameters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StrategyReplyValidationError{
					field:  "Parameters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StrategyReplyValidationError{
					field:  "Parameters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParameters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StrategyReplyValidationError{
				field:  "Parameters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StrategyReplyValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StrategyReplyValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StrategyReplyValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StrategyReplyValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StrategyReplyValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StrategyReplyValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StrategyReplyMultiError(errors)
	}

	return nil
}

// StrategyReplyMultiError is an error wrapping multiple validation errors
// returned by StrategyReply.ValidateAll() if the designated constraints
// aren't met.
type StrategyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StrategyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StrategyReplyMultiError) AllErrors() []error { return m }

// StrategyReplyValidationError is the validation error returned by
// StrategyReply.Validate if the designated constraints aren't met.
type StrategyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StrategyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StrategyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StrategyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StrategyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StrategyReplyValidationError) ErrorName() string { return "StrategyReplyValidationError" }

// Error satisfies the builtin error interface
func (e StrategyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStrategyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StrategyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StrategyReplyValidationError{}

// Validate checks the field values on StrategyReplies with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *StrategyReplies) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StrategyReplies with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StrategyRepliesMultiError, or nil if none found.
func (m *StrategyReplies) ValidateAll() error {
	return m.validate(true)
}

func (m *StrategyReplies) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StrategyRepliesValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StrategyRepliesValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StrategyRepliesValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return StrategyRepliesMultiError(errors)
	}

	return nil
}

// StrategyRepliesMultiError is an error wrapping multiple validation errors
// returned by StrategyReplies.ValidateAll() if the designated constraints
// aren't met.
type StrategyRepliesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StrategyRepliesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StrategyRepliesMultiError) AllErrors() []error { return m }

// StrategyRepliesValidationError is the validation error returned by
// StrategyReplies.Validate if the designated constraints aren't met.
type StrategyRepliesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StrategyRepliesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StrategyRepliesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StrategyRepliesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StrategyRepliesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StrategyRepliesValidationError) ErrorName() string { return "StrategyRepliesValidationError" }

// Error satisfies the builtin error interface
func (e StrategyRepliesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStrategyReplies.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StrategyRepliesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StrategyRepliesValidationError{}

// Validate checks the field values on StrategiesReplies with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *StrategiesReplies) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StrategiesReplies with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StrategiesRepliesMultiError, or nil if none found.
func (m *StrategiesReplies) ValidateAll() error {
	return m.validate(true)
}

func (m *StrategiesReplies) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetStrategies()))
		i := 0
		for key := range m.GetStrategies() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetStrategies()[key]
			_ = val

			// no validation rules for Strategies[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, StrategiesRepliesValidationError{
							field:  fmt.Sprintf("Strategies[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, StrategiesRepliesValidationError{
							field:  fmt.Sprintf("Strategies[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return StrategiesRepliesValidationError{
						field:  fmt.Sprintf("Strategies[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for Total

	if len(errors) > 0 {
		return StrategiesRepliesMultiError(errors)
	}

	return nil
}

// StrategiesRepliesMultiError is an error wrapping multiple validation errors
// returned by StrategiesReplies.ValidateAll() if the designated constraints
// aren't met.
type StrategiesRepliesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StrategiesRepliesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StrategiesRepliesMultiError) AllErrors() []error { return m }

// StrategiesRepliesValidationError is the validation error returned by
// StrategiesReplies.Validate if the designated constraints aren't met.
type StrategiesRepliesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StrategiesRepliesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StrategiesRepliesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StrategiesRepliesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StrategiesRepliesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StrategiesRepliesValidationError) ErrorName() string {
	return "StrategiesRepliesValidationError"
}

// Error satisfies the builtin error interface
func (e StrategiesRepliesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStrategiesReplies.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StrategiesRepliesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StrategiesRepliesValidationError{}

// Validate checks the field values on StrategyDelete with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StrategyDelete) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StrategyDelete with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StrategyDeleteMultiError,
// or nil if none found.
func (m *StrategyDelete) ValidateAll() error {
	return m.validate(true)
}

func (m *StrategyDelete) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	if len(errors) > 0 {
		return StrategyDeleteMultiError(errors)
	}

	return nil
}

// StrategyDeleteMultiError is an error wrapping multiple validation errors
// returned by StrategyDelete.ValidateAll() if the designated constraints
// aren't met.
type StrategyDeleteMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StrategyDeleteMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StrategyDeleteMultiError) AllErrors() []error { return m }

// StrategyDeleteValidationError is the validation error returned by
// StrategyDelete.Validate if the designated constraints aren't met.
type StrategyDeleteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StrategyDeleteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StrategyDeleteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StrategyDeleteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StrategyDeleteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StrategyDeleteValidationError) ErrorName() string { return "StrategyDeleteValidationError" }

// Error satisfies the builtin error interface
func (e StrategyDeleteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStrategyDelete.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StrategyDeleteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StrategyDeleteValidationError{}

// Validate checks the field values on StrategyReplies_Result with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StrategyReplies_Result) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StrategyReplies_Result with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StrategyReplies_ResultMultiError, or nil if none found.
func (m *StrategyReplies_Result) ValidateAll() error {
	return m.validate(true)
}

func (m *StrategyReplies_Result) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ticker

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StrategyReplies_ResultValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StrategyReplies_ResultValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StrategyReplies_ResultValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StrategyReplies_ResultValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StrategyReplies_ResultValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StrategyReplies_ResultValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StrategyReplies_ResultMultiError(errors)
	}

	return nil
}

// StrategyReplies_ResultMultiError is an error wrapping multiple validation
// errors returned by StrategyReplies_Result.ValidateAll() if the designated
// constraints aren't met.
type StrategyReplies_ResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StrategyReplies_ResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StrategyReplies_ResultMultiError) AllErrors() []error { return m }

// StrategyReplies_ResultValidationError is the validation error returned by
// StrategyReplies_Result.Validate if the designated constraints aren't met.
type StrategyReplies_ResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StrategyReplies_ResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StrategyReplies_ResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StrategyReplies_ResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StrategyReplies_ResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StrategyReplies_ResultValidationError) ErrorName() string {
	return "StrategyReplies_ResultValidationError"
}

// Error satisfies the builtin error interface
func (e StrategyReplies_ResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStrategyReplies_Result.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StrategyReplies_ResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StrategyReplies_ResultValidationError{}

// Validate checks the field values on StrategiesReplies_Period with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StrategiesReplies_Period) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StrategiesReplies_Period with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StrategiesReplies_PeriodMultiError, or nil if none found.
func (m *StrategiesReplies_Period) ValidateAll() error {
	return m.validate(true)
}

func (m *StrategiesReplies_Period) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ticker

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StrategiesReplies_PeriodValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StrategiesReplies_PeriodValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StrategiesReplies_PeriodValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StrategiesReplies_PeriodMultiError(errors)
	}

	return nil
}

// StrategiesReplies_PeriodMultiError is an error wrapping multiple validation
// errors returned by StrategiesReplies_Period.ValidateAll() if the designated
// constraints aren't met.
type StrategiesReplies_PeriodMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StrategiesReplies_PeriodMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StrategiesReplies_PeriodMultiError) AllErrors() []error { return m }

// StrategiesReplies_PeriodValidationError is the validation error returned by
// StrategiesReplies_Period.Validate if the designated constraints aren't met.
type StrategiesReplies_PeriodValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StrategiesReplies_PeriodValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StrategiesReplies_PeriodValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StrategiesReplies_PeriodValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StrategiesReplies_PeriodValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StrategiesReplies_PeriodValidationError) ErrorName() string {
	return "StrategiesReplies_PeriodValidationError"
}

// Error satisfies the builtin error interface
func (e StrategiesReplies_PeriodValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStrategiesReplies_Period.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StrategiesReplies_PeriodValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StrategiesReplies_PeriodValidationError{}

// Validate checks the field values on StrategiesReplies_Period_Result with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StrategiesReplies_Period_Result) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StrategiesReplies_Period_Result with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// StrategiesReplies_Period_ResultMultiError, or nil if none found.
func (m *StrategiesReplies_Period_Result) ValidateAll() error {
	return m.validate(true)
}

func (m *StrategiesReplies_Period_Result) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Breakout

	if all {
		switch v := interface{}(m.GetStatusAgo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StrategiesReplies_Period_ResultValidationError{
					field:  "StatusAgo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StrategiesReplies_Period_ResultValidationError{
					field:  "StatusAgo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatusAgo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StrategiesReplies_Period_ResultValidationError{
				field:  "StatusAgo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StrategiesReplies_Period_ResultValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StrategiesReplies_Period_ResultValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StrategiesReplies_Period_ResultValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StrategiesReplies_Period_ResultValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StrategiesReplies_Period_ResultValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StrategiesReplies_Period_ResultValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StrategiesReplies_Period_ResultMultiError(errors)
	}

	return nil
}

// StrategiesReplies_Period_ResultMultiError is an error wrapping multiple
// validation errors returned by StrategiesReplies_Period_Result.ValidateAll()
// if the designated constraints aren't met.
type StrategiesReplies_Period_ResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StrategiesReplies_Period_ResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StrategiesReplies_Period_ResultMultiError) AllErrors() []error { return m }

// StrategiesReplies_Period_ResultValidationError is the validation error
// returned by StrategiesReplies_Period_Result.Validate if the designated
// constraints aren't met.
type StrategiesReplies_Period_ResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StrategiesReplies_Period_ResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StrategiesReplies_Period_ResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StrategiesReplies_Period_ResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StrategiesReplies_Period_ResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StrategiesReplies_Period_ResultValidationError) ErrorName() string {
	return "StrategiesReplies_Period_ResultValidationError"
}

// Error satisfies the builtin error interface
func (e StrategiesReplies_Period_ResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStrategiesReplies_Period_Result.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StrategiesReplies_Period_ResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StrategiesReplies_Period_ResultValidationError{}
