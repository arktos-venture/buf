// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package strategies_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StrategiesClient is the client API for Strategies service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StrategiesClient interface {
	Get(ctx context.Context, in *StrategyRequest, opts ...grpc.CallOption) (*StrategyReply, error)
	List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StrategyReplies, error)
	Create(ctx context.Context, in *StrategyUpdateRequest, opts ...grpc.CallOption) (*StrategyReply, error)
	Update(ctx context.Context, in *StrategyUpdateRequest, opts ...grpc.CallOption) (*StrategyReply, error)
	Delete(ctx context.Context, in *StrategyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Execute(ctx context.Context, in *StrategyExecuteRequest, opts ...grpc.CallOption) (*StrategyExecutedReply, error)
}

type strategiesClient struct {
	cc grpc.ClientConnInterface
}

func NewStrategiesClient(cc grpc.ClientConnInterface) StrategiesClient {
	return &strategiesClient{cc}
}

func (c *strategiesClient) Get(ctx context.Context, in *StrategyRequest, opts ...grpc.CallOption) (*StrategyReply, error) {
	out := new(StrategyReply)
	err := c.cc.Invoke(ctx, "/strategies.v1.Strategies/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strategiesClient) List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StrategyReplies, error) {
	out := new(StrategyReplies)
	err := c.cc.Invoke(ctx, "/strategies.v1.Strategies/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strategiesClient) Create(ctx context.Context, in *StrategyUpdateRequest, opts ...grpc.CallOption) (*StrategyReply, error) {
	out := new(StrategyReply)
	err := c.cc.Invoke(ctx, "/strategies.v1.Strategies/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strategiesClient) Update(ctx context.Context, in *StrategyUpdateRequest, opts ...grpc.CallOption) (*StrategyReply, error) {
	out := new(StrategyReply)
	err := c.cc.Invoke(ctx, "/strategies.v1.Strategies/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strategiesClient) Delete(ctx context.Context, in *StrategyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/strategies.v1.Strategies/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strategiesClient) Execute(ctx context.Context, in *StrategyExecuteRequest, opts ...grpc.CallOption) (*StrategyExecutedReply, error) {
	out := new(StrategyExecutedReply)
	err := c.cc.Invoke(ctx, "/strategies.v1.Strategies/Execute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StrategiesServer is the server API for Strategies service.
// All implementations must embed UnimplementedStrategiesServer
// for forward compatibility
type StrategiesServer interface {
	Get(context.Context, *StrategyRequest) (*StrategyReply, error)
	List(context.Context, *emptypb.Empty) (*StrategyReplies, error)
	Create(context.Context, *StrategyUpdateRequest) (*StrategyReply, error)
	Update(context.Context, *StrategyUpdateRequest) (*StrategyReply, error)
	Delete(context.Context, *StrategyRequest) (*emptypb.Empty, error)
	Execute(context.Context, *StrategyExecuteRequest) (*StrategyExecutedReply, error)
	mustEmbedUnimplementedStrategiesServer()
}

// UnimplementedStrategiesServer must be embedded to have forward compatible implementations.
type UnimplementedStrategiesServer struct {
}

func (UnimplementedStrategiesServer) Get(context.Context, *StrategyRequest) (*StrategyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedStrategiesServer) List(context.Context, *emptypb.Empty) (*StrategyReplies, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedStrategiesServer) Create(context.Context, *StrategyUpdateRequest) (*StrategyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedStrategiesServer) Update(context.Context, *StrategyUpdateRequest) (*StrategyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedStrategiesServer) Delete(context.Context, *StrategyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedStrategiesServer) Execute(context.Context, *StrategyExecuteRequest) (*StrategyExecutedReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedStrategiesServer) mustEmbedUnimplementedStrategiesServer() {}

// UnsafeStrategiesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StrategiesServer will
// result in compilation errors.
type UnsafeStrategiesServer interface {
	mustEmbedUnimplementedStrategiesServer()
}

func RegisterStrategiesServer(s grpc.ServiceRegistrar, srv StrategiesServer) {
	s.RegisterService(&Strategies_ServiceDesc, srv)
}

func _Strategies_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StrategyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrategiesServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strategies.v1.Strategies/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrategiesServer).Get(ctx, req.(*StrategyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Strategies_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrategiesServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strategies.v1.Strategies/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrategiesServer).List(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Strategies_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StrategyUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrategiesServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strategies.v1.Strategies/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrategiesServer).Create(ctx, req.(*StrategyUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Strategies_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StrategyUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrategiesServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strategies.v1.Strategies/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrategiesServer).Update(ctx, req.(*StrategyUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Strategies_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StrategyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrategiesServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strategies.v1.Strategies/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrategiesServer).Delete(ctx, req.(*StrategyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Strategies_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StrategyExecuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrategiesServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strategies.v1.Strategies/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrategiesServer).Execute(ctx, req.(*StrategyExecuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Strategies_ServiceDesc is the grpc.ServiceDesc for Strategies service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Strategies_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "strategies.v1.Strategies",
	HandlerType: (*StrategiesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Strategies_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Strategies_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Strategies_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Strategies_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Strategies_Delete_Handler,
		},
		{
			MethodName: "Execute",
			Handler:    _Strategies_Execute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/strategies/v1/strategies.proto",
}
