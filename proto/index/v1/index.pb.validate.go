// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/index/v1/index.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Page with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Page) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Page with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PageMultiError, or nil if none found.
func (m *Page) ValidateAll() error {
	return m.validate(true)
}

func (m *Page) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetNumber(); val <= 0 || val >= 10000 {
		err := PageValidationError{
			field:  "Number",
			reason: "value must be inside range (0, 10000)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetLimit(); val <= 1 || val >= 150 {
		err := PageValidationError{
			field:  "Limit",
			reason: "value must be inside range (1, 150)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PageMultiError(errors)
	}

	return nil
}

// PageMultiError is an error wrapping multiple validation errors returned by
// Page.ValidateAll() if the designated constraints aren't met.
type PageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageMultiError) AllErrors() []error { return m }

// PageValidationError is the validation error returned by Page.Validate if the
// designated constraints aren't met.
type PageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageValidationError) ErrorName() string { return "PageValidationError" }

// Error satisfies the builtin error interface
func (e PageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageValidationError{}

// Validate checks the field values on IndexRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IndexRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IndexRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IndexRequestMultiError, or
// nil if none found.
func (m *IndexRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IndexRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetAccount()); l < 3 || l > 32 {
		err := IndexRequestValidationError{
			field:  "Account",
			reason: "value length must be between 3 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 3 || l > 32 {
		err := IndexRequestValidationError{
			field:  "Name",
			reason: "value length must be between 3 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPage() == nil {
		err := IndexRequestValidationError{
			field:  "Page",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IndexRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IndexRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IndexRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IndexRequestMultiError(errors)
	}

	return nil
}

// IndexRequestMultiError is an error wrapping multiple validation errors
// returned by IndexRequest.ValidateAll() if the designated constraints aren't met.
type IndexRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IndexRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IndexRequestMultiError) AllErrors() []error { return m }

// IndexRequestValidationError is the validation error returned by
// IndexRequest.Validate if the designated constraints aren't met.
type IndexRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IndexRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IndexRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IndexRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IndexRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IndexRequestValidationError) ErrorName() string { return "IndexRequestValidationError" }

// Error satisfies the builtin error interface
func (e IndexRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIndexRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IndexRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IndexRequestValidationError{}

// Validate checks the field values on IndexCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IndexCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IndexCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IndexCreateRequestMultiError, or nil if none found.
func (m *IndexCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IndexCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 3 || l > 24 {
		err := IndexCreateRequestValidationError{
			field:  "Name",
			reason: "value length must be between 3 and 24 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetDescription()); l < 16 || l > 256 {
		err := IndexCreateRequestValidationError{
			field:  "Description",
			reason: "value length must be between 16 and 256 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetCompanies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IndexCreateRequestValidationError{
						field:  fmt.Sprintf("Companies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IndexCreateRequestValidationError{
						field:  fmt.Sprintf("Companies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IndexCreateRequestValidationError{
					field:  fmt.Sprintf("Companies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return IndexCreateRequestMultiError(errors)
	}

	return nil
}

// IndexCreateRequestMultiError is an error wrapping multiple validation errors
// returned by IndexCreateRequest.ValidateAll() if the designated constraints
// aren't met.
type IndexCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IndexCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IndexCreateRequestMultiError) AllErrors() []error { return m }

// IndexCreateRequestValidationError is the validation error returned by
// IndexCreateRequest.Validate if the designated constraints aren't met.
type IndexCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IndexCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IndexCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IndexCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IndexCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IndexCreateRequestValidationError) ErrorName() string {
	return "IndexCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IndexCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIndexCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IndexCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IndexCreateRequestValidationError{}

// Validate checks the field values on IndexReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IndexReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IndexReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IndexReplyMultiError, or
// nil if none found.
func (m *IndexReply) ValidateAll() error {
	return m.validate(true)
}

func (m *IndexReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Description

	if len(errors) > 0 {
		return IndexReplyMultiError(errors)
	}

	return nil
}

// IndexReplyMultiError is an error wrapping multiple validation errors
// returned by IndexReply.ValidateAll() if the designated constraints aren't met.
type IndexReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IndexReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IndexReplyMultiError) AllErrors() []error { return m }

// IndexReplyValidationError is the validation error returned by
// IndexReply.Validate if the designated constraints aren't met.
type IndexReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IndexReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IndexReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IndexReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IndexReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IndexReplyValidationError) ErrorName() string { return "IndexReplyValidationError" }

// Error satisfies the builtin error interface
func (e IndexReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIndexReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IndexReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IndexReplyValidationError{}

// Validate checks the field values on IndexReplies with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IndexReplies) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IndexReplies with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IndexRepliesMultiError, or
// nil if none found.
func (m *IndexReplies) ValidateAll() error {
	return m.validate(true)
}

func (m *IndexReplies) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IndexRepliesValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IndexRepliesValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IndexRepliesValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return IndexRepliesMultiError(errors)
	}

	return nil
}

// IndexRepliesMultiError is an error wrapping multiple validation errors
// returned by IndexReplies.ValidateAll() if the designated constraints aren't met.
type IndexRepliesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IndexRepliesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IndexRepliesMultiError) AllErrors() []error { return m }

// IndexRepliesValidationError is the validation error returned by
// IndexReplies.Validate if the designated constraints aren't met.
type IndexRepliesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IndexRepliesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IndexRepliesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IndexRepliesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IndexRepliesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IndexRepliesValidationError) ErrorName() string { return "IndexRepliesValidationError" }

// Error satisfies the builtin error interface
func (e IndexRepliesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIndexReplies.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IndexRepliesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IndexRepliesValidationError{}

// Validate checks the field values on IndexCreateRequest_Company with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IndexCreateRequest_Company) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IndexCreateRequest_Company with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IndexCreateRequest_CompanyMultiError, or nil if none found.
func (m *IndexCreateRequest_Company) ValidateAll() error {
	return m.validate(true)
}

func (m *IndexCreateRequest_Company) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetCurrency()) != 3 {
		err := IndexCreateRequest_CompanyValidationError{
			field:  "Currency",
			reason: "value length must be 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if l := utf8.RuneCountInString(m.GetExchange()); l < 1 || l > 8 {
		err := IndexCreateRequest_CompanyValidationError{
			field:  "Exchange",
			reason: "value length must be between 1 and 8 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetTicker()); l < 1 || l > 8 {
		err := IndexCreateRequest_CompanyValidationError{
			field:  "Ticker",
			reason: "value length must be between 1 and 8 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Size

	if len(errors) > 0 {
		return IndexCreateRequest_CompanyMultiError(errors)
	}

	return nil
}

// IndexCreateRequest_CompanyMultiError is an error wrapping multiple
// validation errors returned by IndexCreateRequest_Company.ValidateAll() if
// the designated constraints aren't met.
type IndexCreateRequest_CompanyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IndexCreateRequest_CompanyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IndexCreateRequest_CompanyMultiError) AllErrors() []error { return m }

// IndexCreateRequest_CompanyValidationError is the validation error returned
// by IndexCreateRequest_Company.Validate if the designated constraints aren't met.
type IndexCreateRequest_CompanyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IndexCreateRequest_CompanyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IndexCreateRequest_CompanyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IndexCreateRequest_CompanyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IndexCreateRequest_CompanyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IndexCreateRequest_CompanyValidationError) ErrorName() string {
	return "IndexCreateRequest_CompanyValidationError"
}

// Error satisfies the builtin error interface
func (e IndexCreateRequest_CompanyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIndexCreateRequest_Company.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IndexCreateRequest_CompanyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IndexCreateRequest_CompanyValidationError{}
