// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/exchange/v1/exchange.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ExchangeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ExchangeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExchangeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExchangeRequestMultiError, or nil if none found.
func (m *ExchangeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExchangeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _ExchangeRequest_Exchange_InLookup[m.GetExchange()]; !ok {
		err := ExchangeRequestValidationError{
			field:  "Exchange",
			reason: "value must be in list [NASDAQ NYSE TO LSE PA BR AS SG SHE SHG HK COMM FOREX INDX CC]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ExchangeRequestMultiError(errors)
	}
	return nil
}

// ExchangeRequestMultiError is an error wrapping multiple validation errors
// returned by ExchangeRequest.ValidateAll() if the designated constraints
// aren't met.
type ExchangeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExchangeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExchangeRequestMultiError) AllErrors() []error { return m }

// ExchangeRequestValidationError is the validation error returned by
// ExchangeRequest.Validate if the designated constraints aren't met.
type ExchangeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExchangeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExchangeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExchangeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExchangeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExchangeRequestValidationError) ErrorName() string { return "ExchangeRequestValidationError" }

// Error satisfies the builtin error interface
func (e ExchangeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExchangeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExchangeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExchangeRequestValidationError{}

var _ExchangeRequest_Exchange_InLookup = map[string]struct{}{
	"NASDAQ": {},
	"NYSE":   {},
	"TO":     {},
	"LSE":    {},
	"PA":     {},
	"BR":     {},
	"AS":     {},
	"SG":     {},
	"SHE":    {},
	"SHG":    {},
	"HK":     {},
	"COMM":   {},
	"FOREX":  {},
	"INDX":   {},
	"CC":     {},
}

// Validate checks the field values on Code with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Code) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Code with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CodeMultiError, or nil if none found.
func (m *Code) ValidateAll() error {
	return m.validate(true)
}

func (m *Code) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Eod

	// no validation rules for Ibkr

	// no validation rules for Tradingview

	if len(errors) > 0 {
		return CodeMultiError(errors)
	}
	return nil
}

// CodeMultiError is an error wrapping multiple validation errors returned by
// Code.ValidateAll() if the designated constraints aren't met.
type CodeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CodeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CodeMultiError) AllErrors() []error { return m }

// CodeValidationError is the validation error returned by Code.Validate if the
// designated constraints aren't met.
type CodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CodeValidationError) ErrorName() string { return "CodeValidationError" }

// Error satisfies the builtin error interface
func (e CodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CodeValidationError{}

// Validate checks the field values on TradingHours with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TradingHours) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TradingHours with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TradingHoursMultiError, or
// nil if none found.
func (m *TradingHours) ValidateAll() error {
	return m.validate(true)
}

func (m *TradingHours) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Open

	// no validation rules for Close

	if len(errors) > 0 {
		return TradingHoursMultiError(errors)
	}
	return nil
}

// TradingHoursMultiError is an error wrapping multiple validation errors
// returned by TradingHours.ValidateAll() if the designated constraints aren't met.
type TradingHoursMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TradingHoursMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TradingHoursMultiError) AllErrors() []error { return m }

// TradingHoursValidationError is the validation error returned by
// TradingHours.Validate if the designated constraints aren't met.
type TradingHoursValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TradingHoursValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TradingHoursValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TradingHoursValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TradingHoursValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TradingHoursValidationError) ErrorName() string { return "TradingHoursValidationError" }

// Error satisfies the builtin error interface
func (e TradingHoursValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTradingHours.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TradingHoursValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TradingHoursValidationError{}

// Validate checks the field values on ExchangeReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ExchangeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExchangeReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ExchangeReplyMultiError, or
// nil if none found.
func (m *ExchangeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ExchangeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetCode()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExchangeReplyValidationError{
					field:  "Code",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExchangeReplyValidationError{
					field:  "Code",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExchangeReplyValidationError{
				field:  "Code",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Country

	// no validation rules for Currency

	// no validation rules for Timezone

	for idx, item := range m.GetHolidays() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExchangeReplyValidationError{
						field:  fmt.Sprintf("Holidays[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExchangeReplyValidationError{
						field:  fmt.Sprintf("Holidays[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExchangeReplyValidationError{
					field:  fmt.Sprintf("Holidays[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetTradingHours()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExchangeReplyValidationError{
					field:  "TradingHours",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExchangeReplyValidationError{
					field:  "TradingHours",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTradingHours()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExchangeReplyValidationError{
				field:  "TradingHours",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetCompanies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExchangeReplyValidationError{
						field:  fmt.Sprintf("Companies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExchangeReplyValidationError{
						field:  fmt.Sprintf("Companies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExchangeReplyValidationError{
					field:  fmt.Sprintf("Companies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ExchangeReplyMultiError(errors)
	}
	return nil
}

// ExchangeReplyMultiError is an error wrapping multiple validation errors
// returned by ExchangeReply.ValidateAll() if the designated constraints
// aren't met.
type ExchangeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExchangeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExchangeReplyMultiError) AllErrors() []error { return m }

// ExchangeReplyValidationError is the validation error returned by
// ExchangeReply.Validate if the designated constraints aren't met.
type ExchangeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExchangeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExchangeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExchangeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExchangeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExchangeReplyValidationError) ErrorName() string { return "ExchangeReplyValidationError" }

// Error satisfies the builtin error interface
func (e ExchangeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExchangeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExchangeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExchangeReplyValidationError{}

// Validate checks the field values on ExchangeIsOpenReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExchangeIsOpenReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExchangeIsOpenReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExchangeIsOpenReplyMultiError, or nil if none found.
func (m *ExchangeIsOpenReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ExchangeIsOpenReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Timezone

	if all {
		switch v := interface{}(m.GetTradingHours()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExchangeIsOpenReplyValidationError{
					field:  "TradingHours",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExchangeIsOpenReplyValidationError{
					field:  "TradingHours",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTradingHours()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExchangeIsOpenReplyValidationError{
				field:  "TradingHours",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Open

	// no validation rules for TimeBeforeClosing

	if len(errors) > 0 {
		return ExchangeIsOpenReplyMultiError(errors)
	}
	return nil
}

// ExchangeIsOpenReplyMultiError is an error wrapping multiple validation
// errors returned by ExchangeIsOpenReply.ValidateAll() if the designated
// constraints aren't met.
type ExchangeIsOpenReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExchangeIsOpenReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExchangeIsOpenReplyMultiError) AllErrors() []error { return m }

// ExchangeIsOpenReplyValidationError is the validation error returned by
// ExchangeIsOpenReply.Validate if the designated constraints aren't met.
type ExchangeIsOpenReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExchangeIsOpenReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExchangeIsOpenReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExchangeIsOpenReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExchangeIsOpenReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExchangeIsOpenReplyValidationError) ErrorName() string {
	return "ExchangeIsOpenReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ExchangeIsOpenReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExchangeIsOpenReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExchangeIsOpenReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExchangeIsOpenReplyValidationError{}

// Validate checks the field values on ExchangeShortReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExchangeShortReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExchangeShortReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExchangeShortReplyMultiError, or nil if none found.
func (m *ExchangeShortReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ExchangeShortReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Country

	// no validation rules for Currency

	if all {
		switch v := interface{}(m.GetCode()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExchangeShortReplyValidationError{
					field:  "Code",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExchangeShortReplyValidationError{
					field:  "Code",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExchangeShortReplyValidationError{
				field:  "Code",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExchangeShortReplyMultiError(errors)
	}
	return nil
}

// ExchangeShortReplyMultiError is an error wrapping multiple validation errors
// returned by ExchangeShortReply.ValidateAll() if the designated constraints
// aren't met.
type ExchangeShortReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExchangeShortReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExchangeShortReplyMultiError) AllErrors() []error { return m }

// ExchangeShortReplyValidationError is the validation error returned by
// ExchangeShortReply.Validate if the designated constraints aren't met.
type ExchangeShortReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExchangeShortReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExchangeShortReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExchangeShortReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExchangeShortReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExchangeShortReplyValidationError) ErrorName() string {
	return "ExchangeShortReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ExchangeShortReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExchangeShortReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExchangeShortReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExchangeShortReplyValidationError{}

// Validate checks the field values on ExchangeReplies with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ExchangeReplies) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExchangeReplies with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExchangeRepliesMultiError, or nil if none found.
func (m *ExchangeReplies) ValidateAll() error {
	return m.validate(true)
}

func (m *ExchangeReplies) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExchangeRepliesValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExchangeRepliesValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExchangeRepliesValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ExchangeRepliesMultiError(errors)
	}
	return nil
}

// ExchangeRepliesMultiError is an error wrapping multiple validation errors
// returned by ExchangeReplies.ValidateAll() if the designated constraints
// aren't met.
type ExchangeRepliesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExchangeRepliesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExchangeRepliesMultiError) AllErrors() []error { return m }

// ExchangeRepliesValidationError is the validation error returned by
// ExchangeReplies.Validate if the designated constraints aren't met.
type ExchangeRepliesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExchangeRepliesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExchangeRepliesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExchangeRepliesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExchangeRepliesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExchangeRepliesValidationError) ErrorName() string { return "ExchangeRepliesValidationError" }

// Error satisfies the builtin error interface
func (e ExchangeRepliesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExchangeReplies.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExchangeRepliesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExchangeRepliesValidationError{}

// Validate checks the field values on ExchangeReply_Holiday with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExchangeReply_Holiday) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExchangeReply_Holiday with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExchangeReply_HolidayMultiError, or nil if none found.
func (m *ExchangeReply_Holiday) ValidateAll() error {
	return m.validate(true)
}

func (m *ExchangeReply_Holiday) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Official

	if len(errors) > 0 {
		return ExchangeReply_HolidayMultiError(errors)
	}
	return nil
}

// ExchangeReply_HolidayMultiError is an error wrapping multiple validation
// errors returned by ExchangeReply_Holiday.ValidateAll() if the designated
// constraints aren't met.
type ExchangeReply_HolidayMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExchangeReply_HolidayMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExchangeReply_HolidayMultiError) AllErrors() []error { return m }

// ExchangeReply_HolidayValidationError is the validation error returned by
// ExchangeReply_Holiday.Validate if the designated constraints aren't met.
type ExchangeReply_HolidayValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExchangeReply_HolidayValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExchangeReply_HolidayValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExchangeReply_HolidayValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExchangeReply_HolidayValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExchangeReply_HolidayValidationError) ErrorName() string {
	return "ExchangeReply_HolidayValidationError"
}

// Error satisfies the builtin error interface
func (e ExchangeReply_HolidayValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExchangeReply_Holiday.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExchangeReply_HolidayValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExchangeReply_HolidayValidationError{}

// Validate checks the field values on ExchangeReply_Company with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExchangeReply_Company) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExchangeReply_Company with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExchangeReply_CompanyMultiError, or nil if none found.
func (m *ExchangeReply_Company) ValidateAll() error {
	return m.validate(true)
}

func (m *ExchangeReply_Company) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ticker

	// no validation rules for Name

	// no validation rules for Isin

	if len(errors) > 0 {
		return ExchangeReply_CompanyMultiError(errors)
	}
	return nil
}

// ExchangeReply_CompanyMultiError is an error wrapping multiple validation
// errors returned by ExchangeReply_Company.ValidateAll() if the designated
// constraints aren't met.
type ExchangeReply_CompanyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExchangeReply_CompanyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExchangeReply_CompanyMultiError) AllErrors() []error { return m }

// ExchangeReply_CompanyValidationError is the validation error returned by
// ExchangeReply_Company.Validate if the designated constraints aren't met.
type ExchangeReply_CompanyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExchangeReply_CompanyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExchangeReply_CompanyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExchangeReply_CompanyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExchangeReply_CompanyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExchangeReply_CompanyValidationError) ErrorName() string {
	return "ExchangeReply_CompanyValidationError"
}

// Error satisfies the builtin error interface
func (e ExchangeReply_CompanyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExchangeReply_Company.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExchangeReply_CompanyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExchangeReply_CompanyValidationError{}

// Validate checks the field values on ExchangeReplies_Company with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExchangeReplies_Company) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExchangeReplies_Company with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExchangeReplies_CompanyMultiError, or nil if none found.
func (m *ExchangeReplies_Company) ValidateAll() error {
	return m.validate(true)
}

func (m *ExchangeReplies_Company) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ticker

	// no validation rules for Name

	// no validation rules for Isin

	if len(errors) > 0 {
		return ExchangeReplies_CompanyMultiError(errors)
	}
	return nil
}

// ExchangeReplies_CompanyMultiError is an error wrapping multiple validation
// errors returned by ExchangeReplies_Company.ValidateAll() if the designated
// constraints aren't met.
type ExchangeReplies_CompanyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExchangeReplies_CompanyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExchangeReplies_CompanyMultiError) AllErrors() []error { return m }

// ExchangeReplies_CompanyValidationError is the validation error returned by
// ExchangeReplies_Company.Validate if the designated constraints aren't met.
type ExchangeReplies_CompanyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExchangeReplies_CompanyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExchangeReplies_CompanyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExchangeReplies_CompanyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExchangeReplies_CompanyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExchangeReplies_CompanyValidationError) ErrorName() string {
	return "ExchangeReplies_CompanyValidationError"
}

// Error satisfies the builtin error interface
func (e ExchangeReplies_CompanyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExchangeReplies_Company.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExchangeReplies_CompanyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExchangeReplies_CompanyValidationError{}
