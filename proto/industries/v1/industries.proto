syntax = "proto3";

package industries.v1;

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "validate/validate.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/arktos-venture/buf/proto/industries/v1;industries_v1";
option java_multiple_files = true;
option java_package = "dev.kratos.api.industries.v1";
option java_outer_classname = "APIIndustriesProtoV1";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
	info: {
    title: "Industries APIs";
		description: "Industries APIs";
    version: "1.0";
		contact: {
			name: "Arktos Venture project";
			url: "https://github.com/arktos-venture/buf";
			email: "oss@arktos-consulting.cloud";
		};
  };
	schemes: [HTTP, HTTPS];
	consumes: "application/json";
	produces: "application/json";
	security_definitions: {
	  	security: {
			key: "bearer"
			value: {
		  		type: TYPE_API_KEY
		  		in: IN_HEADER
		  		name: "Authorization"
		  		description: "Authentication token, prefixed by Bearer: Bearer <token>"
			}
	  }
	}
	security: {
	  security_requirement: {
			key: "bearer"
	  }
	}
};

service Industries {
  rpc List (google.protobuf.Empty) returns (IndustryReply)  {
    option (google.api.http) = {
      get: "/v1/industries"
    };
  }

  rpc Search (IndustrySearchRequest) returns (IndustrySearchReply)  {
    option (google.api.http) = {
      post: "/v1/industries"
      body: "*"
    };
  }

  rpc Health (google.protobuf.Empty) returns (google.protobuf.Empty)  {
    option (google.api.http) = {
      get: "/healthz"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
		  security: { } // Disable security key
		};
  }
}


// 
// Request
// 

message IndustrySearchRequest {
  repeated int64 refs = 1 [(validate.rules).repeated.unique = true];
}


// 
// Reply
// 

message IndustryReply {
  message Ref {
    enum Classication {
      EconomicSector = 0;
      BusinessSector = 1;
      IndustryGroup = 2;
      Industry = 3;
      Activity = 4;
    }

    Classication classication = 1;
    string name = 2;
    map<int64, Ref> next = 3;
  }

  map<int64, Ref> results = 1;
}

message IndustrySearchReply {
  repeated int64 results = 1;
}