// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TrendClient is the client API for Trend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrendClient interface {
	GetTrendId(ctx context.Context, in *TrendRequest, opts ...grpc.CallOption) (*TrendIdReply, error)
	SearchTrends(ctx context.Context, in *TrendRequest, opts ...grpc.CallOption) (*TrendReply, error)
	Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type trendClient struct {
	cc grpc.ClientConnInterface
}

func NewTrendClient(cc grpc.ClientConnInterface) TrendClient {
	return &trendClient{cc}
}

func (c *trendClient) GetTrendId(ctx context.Context, in *TrendRequest, opts ...grpc.CallOption) (*TrendIdReply, error) {
	out := new(TrendIdReply)
	err := c.cc.Invoke(ctx, "/trend.v1.Trend/GetTrendId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trendClient) SearchTrends(ctx context.Context, in *TrendRequest, opts ...grpc.CallOption) (*TrendReply, error) {
	out := new(TrendReply)
	err := c.cc.Invoke(ctx, "/trend.v1.Trend/SearchTrends", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trendClient) Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/trend.v1.Trend/Health", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrendServer is the server API for Trend service.
// All implementations must embed UnimplementedTrendServer
// for forward compatibility
type TrendServer interface {
	GetTrendId(context.Context, *TrendRequest) (*TrendIdReply, error)
	SearchTrends(context.Context, *TrendRequest) (*TrendReply, error)
	Health(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedTrendServer()
}

// UnimplementedTrendServer must be embedded to have forward compatible implementations.
type UnimplementedTrendServer struct {
}

func (UnimplementedTrendServer) GetTrendId(context.Context, *TrendRequest) (*TrendIdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrendId not implemented")
}
func (UnimplementedTrendServer) SearchTrends(context.Context, *TrendRequest) (*TrendReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchTrends not implemented")
}
func (UnimplementedTrendServer) Health(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedTrendServer) mustEmbedUnimplementedTrendServer() {}

// UnsafeTrendServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrendServer will
// result in compilation errors.
type UnsafeTrendServer interface {
	mustEmbedUnimplementedTrendServer()
}

func RegisterTrendServer(s grpc.ServiceRegistrar, srv TrendServer) {
	s.RegisterService(&Trend_ServiceDesc, srv)
}

func _Trend_GetTrendId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrendServer).GetTrendId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trend.v1.Trend/GetTrendId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrendServer).GetTrendId(ctx, req.(*TrendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trend_SearchTrends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrendServer).SearchTrends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trend.v1.Trend/SearchTrends",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrendServer).SearchTrends(ctx, req.(*TrendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trend_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrendServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trend.v1.Trend/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrendServer).Health(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Trend_ServiceDesc is the grpc.ServiceDesc for Trend service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Trend_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "trend.v1.Trend",
	HandlerType: (*TrendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTrendId",
			Handler:    _Trend_GetTrendId_Handler,
		},
		{
			MethodName: "SearchTrends",
			Handler:    _Trend_SearchTrends_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _Trend_Health_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/trend/v1/trend.proto",
}
