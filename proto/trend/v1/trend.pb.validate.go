// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/trend/v1/trend.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on TrendRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TrendRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TrendRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TrendRequestMultiError, or
// nil if none found.
func (m *TrendRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TrendRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetTicker()); l < 1 || l > 8 {
		err := TrendRequestValidationError{
			field:  "Ticker",
			reason: "value length must be between 1 and 8 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCurrency()) != 3 {
		err := TrendRequestValidationError{
			field:  "Currency",
			reason: "value length must be 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if l := utf8.RuneCountInString(m.GetExchange()); l < 1 || l > 8 {
		err := TrendRequestValidationError{
			field:  "Exchange",
			reason: "value length must be between 1 and 8 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return TrendRequestMultiError(errors)
	}

	return nil
}

// TrendRequestMultiError is an error wrapping multiple validation errors
// returned by TrendRequest.ValidateAll() if the designated constraints aren't met.
type TrendRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TrendRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TrendRequestMultiError) AllErrors() []error { return m }

// TrendRequestValidationError is the validation error returned by
// TrendRequest.Validate if the designated constraints aren't met.
type TrendRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrendRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrendRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrendRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrendRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrendRequestValidationError) ErrorName() string { return "TrendRequestValidationError" }

// Error satisfies the builtin error interface
func (e TrendRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrendRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrendRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrendRequestValidationError{}

// Validate checks the field values on TrendIdReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TrendIdReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TrendIdReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TrendIdReplyMultiError, or
// nil if none found.
func (m *TrendIdReply) ValidateAll() error {
	return m.validate(true)
}

func (m *TrendIdReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ticker

	// no validation rules for Currency

	// no validation rules for Exchange

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TrendIdReplyValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TrendIdReplyValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TrendIdReplyValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetRelated() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TrendIdReplyValidationError{
						field:  fmt.Sprintf("Related[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TrendIdReplyValidationError{
						field:  fmt.Sprintf("Related[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TrendIdReplyValidationError{
					field:  fmt.Sprintf("Related[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TrendIdReplyMultiError(errors)
	}

	return nil
}

// TrendIdReplyMultiError is an error wrapping multiple validation errors
// returned by TrendIdReply.ValidateAll() if the designated constraints aren't met.
type TrendIdReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TrendIdReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TrendIdReplyMultiError) AllErrors() []error { return m }

// TrendIdReplyValidationError is the validation error returned by
// TrendIdReply.Validate if the designated constraints aren't met.
type TrendIdReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrendIdReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrendIdReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrendIdReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrendIdReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrendIdReplyValidationError) ErrorName() string { return "TrendIdReplyValidationError" }

// Error satisfies the builtin error interface
func (e TrendIdReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrendIdReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrendIdReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrendIdReplyValidationError{}

// Validate checks the field values on TrendReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TrendReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TrendReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TrendReplyMultiError, or
// nil if none found.
func (m *TrendReply) ValidateAll() error {
	return m.validate(true)
}

func (m *TrendReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ref

	for idx, item := range m.GetRelated() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TrendReplyValidationError{
						field:  fmt.Sprintf("Related[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TrendReplyValidationError{
						field:  fmt.Sprintf("Related[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TrendReplyValidationError{
					field:  fmt.Sprintf("Related[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetGeomap() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TrendReplyValidationError{
						field:  fmt.Sprintf("Geomap[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TrendReplyValidationError{
						field:  fmt.Sprintf("Geomap[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TrendReplyValidationError{
					field:  fmt.Sprintf("Geomap[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TrendReplyMultiError(errors)
	}

	return nil
}

// TrendReplyMultiError is an error wrapping multiple validation errors
// returned by TrendReply.ValidateAll() if the designated constraints aren't met.
type TrendReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TrendReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TrendReplyMultiError) AllErrors() []error { return m }

// TrendReplyValidationError is the validation error returned by
// TrendReply.Validate if the designated constraints aren't met.
type TrendReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrendReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrendReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrendReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrendReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrendReplyValidationError) ErrorName() string { return "TrendReplyValidationError" }

// Error satisfies the builtin error interface
func (e TrendReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrendReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrendReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrendReplyValidationError{}

// Validate checks the field values on TrendIdReply_Trend with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TrendIdReply_Trend) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TrendIdReply_Trend with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TrendIdReply_TrendMultiError, or nil if none found.
func (m *TrendIdReply_Trend) ValidateAll() error {
	return m.validate(true)
}

func (m *TrendIdReply_Trend) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Ref

	if len(errors) > 0 {
		return TrendIdReply_TrendMultiError(errors)
	}

	return nil
}

// TrendIdReply_TrendMultiError is an error wrapping multiple validation errors
// returned by TrendIdReply_Trend.ValidateAll() if the designated constraints
// aren't met.
type TrendIdReply_TrendMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TrendIdReply_TrendMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TrendIdReply_TrendMultiError) AllErrors() []error { return m }

// TrendIdReply_TrendValidationError is the validation error returned by
// TrendIdReply_Trend.Validate if the designated constraints aren't met.
type TrendIdReply_TrendValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrendIdReply_TrendValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrendIdReply_TrendValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrendIdReply_TrendValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrendIdReply_TrendValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrendIdReply_TrendValidationError) ErrorName() string {
	return "TrendIdReply_TrendValidationError"
}

// Error satisfies the builtin error interface
func (e TrendIdReply_TrendValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrendIdReply_Trend.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrendIdReply_TrendValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrendIdReply_TrendValidationError{}

// Validate checks the field values on TrendReply_Related with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TrendReply_Related) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TrendReply_Related with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TrendReply_RelatedMultiError, or nil if none found.
func (m *TrendReply_Related) ValidateAll() error {
	return m.validate(true)
}

func (m *TrendReply_Related) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	// no validation rules for Mid

	// no validation rules for Link

	// no validation rules for Value

	if len(errors) > 0 {
		return TrendReply_RelatedMultiError(errors)
	}

	return nil
}

// TrendReply_RelatedMultiError is an error wrapping multiple validation errors
// returned by TrendReply_Related.ValidateAll() if the designated constraints
// aren't met.
type TrendReply_RelatedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TrendReply_RelatedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TrendReply_RelatedMultiError) AllErrors() []error { return m }

// TrendReply_RelatedValidationError is the validation error returned by
// TrendReply_Related.Validate if the designated constraints aren't met.
type TrendReply_RelatedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrendReply_RelatedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrendReply_RelatedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrendReply_RelatedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrendReply_RelatedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrendReply_RelatedValidationError) ErrorName() string {
	return "TrendReply_RelatedValidationError"
}

// Error satisfies the builtin error interface
func (e TrendReply_RelatedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrendReply_Related.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrendReply_RelatedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrendReply_RelatedValidationError{}

// Validate checks the field values on TrendReply_GeoMap with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TrendReply_GeoMap) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TrendReply_GeoMap with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TrendReply_GeoMapMultiError, or nil if none found.
func (m *TrendReply_GeoMap) ValidateAll() error {
	return m.validate(true)
}

func (m *TrendReply_GeoMap) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Value

	if len(errors) > 0 {
		return TrendReply_GeoMapMultiError(errors)
	}

	return nil
}

// TrendReply_GeoMapMultiError is an error wrapping multiple validation errors
// returned by TrendReply_GeoMap.ValidateAll() if the designated constraints
// aren't met.
type TrendReply_GeoMapMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TrendReply_GeoMapMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TrendReply_GeoMapMultiError) AllErrors() []error { return m }

// TrendReply_GeoMapValidationError is the validation error returned by
// TrendReply_GeoMap.Validate if the designated constraints aren't met.
type TrendReply_GeoMapValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrendReply_GeoMapValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrendReply_GeoMapValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrendReply_GeoMapValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrendReply_GeoMapValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrendReply_GeoMapValidationError) ErrorName() string {
	return "TrendReply_GeoMapValidationError"
}

// Error satisfies the builtin error interface
func (e TrendReply_GeoMapValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrendReply_GeoMap.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrendReply_GeoMapValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrendReply_GeoMapValidationError{}
