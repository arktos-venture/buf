syntax = "proto3";

package instruments_quotes.v1;

import "google/api/annotations.proto";
import "validate/validate.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

import "proto/screener/v1/screener.proto";
import "proto/quotes/v1/quotes.proto";

option go_package = "github.com/arktos-venture/buf/proto/instruments-quotes/v1;v1InstrumentsQuotes";
option java_multiple_files = true;
option java_package = "dev.kratos.api.instruments_quotes.v1";
option java_outer_classname = "APInstrumentsQuotesProtoV1";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
	info: {
        title: "Quotes APIs";
		description: "Instruments Quotes APIs";
        version: "1.0";
		contact: {
			name: "Arktos Venture project";
			url: "https://github.com/arktos-venture/buf";
			email: "oss@arktos-consulting.cloud";
		};
  	};
	schemes: [HTTP, HTTPS];
	consumes: "application/json";
	produces: "application/json";
	security_definitions: {
	  	security: {
			key: "bearer"
			value: {
		  		type: TYPE_API_KEY
		  		in: IN_HEADER
		  		name: "Authorization"
		  		description: "Authentication token, prefixed by Bearer: Bearer <token>"
			}
	  	}
	}
	security: {
	  	security_requirement: {
			key: "bearer"
	  	}
	}
};

service quotes {
	// Public API
	// Get last Quotes Instrument
	rpc Last (QuoteRequest) returns (.quotes.v1.QuoteReply) {
		option (google.api.http) = {
			get: "/v1/quote/{id}/last"
	  	};
	}

	// Public API
	// Get Quotes Instrument
	rpc Search (QuoteSearchRequest) returns (.quotes.v1.QuoteReplies) {
		option (google.api.http) = {
			post: "/v1/quotes"
			body: "*"
	  	};
	}
}

// 
// Request
// 

message QuoteRequest {
	int64 id = 1 [(validate.rules).int64 = {lt: 0}];
}

message QuoteSearchRequest {
	screener.v1.Interval interval = 1 [(validate.rules).enum = {defined_only: true}];
	repeated screener.v1.Filter filters = 2 [(validate.rules).repeated.min_items = 1, (validate.rules).repeated.max_items = 20];
}
