// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/companies/v1/companies.proto

package companies_v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CompanyRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CompanyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompanyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CompanyRequestMultiError,
// or nil if none found.
func (m *CompanyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CompanyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetTicker()); l < 1 || l > 8 {
		err := CompanyRequestValidationError{
			field:  "Ticker",
			reason: "value length must be between 1 and 8 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetExchange()); l < 1 || l > 8 {
		err := CompanyRequestValidationError{
			field:  "Exchange",
			reason: "value length must be between 1 and 8 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CompanyRequestMultiError(errors)
	}

	return nil
}

// CompanyRequestMultiError is an error wrapping multiple validation errors
// returned by CompanyRequest.ValidateAll() if the designated constraints
// aren't met.
type CompanyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompanyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompanyRequestMultiError) AllErrors() []error { return m }

// CompanyRequestValidationError is the validation error returned by
// CompanyRequest.Validate if the designated constraints aren't met.
type CompanyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompanyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompanyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompanyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompanyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompanyRequestValidationError) ErrorName() string { return "CompanyRequestValidationError" }

// Error satisfies the builtin error interface
func (e CompanyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompanyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompanyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompanyRequestValidationError{}

// Validate checks the field values on CompanyListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompanyListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompanyListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompanyListRequestMultiError, or nil if none found.
func (m *CompanyListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CompanyListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetExchange()); l < 1 || l > 8 {
		err := CompanyListRequestValidationError{
			field:  "Exchange",
			reason: "value length must be between 1 and 8 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CompanyListRequestMultiError(errors)
	}

	return nil
}

// CompanyListRequestMultiError is an error wrapping multiple validation errors
// returned by CompanyListRequest.ValidateAll() if the designated constraints
// aren't met.
type CompanyListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompanyListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompanyListRequestMultiError) AllErrors() []error { return m }

// CompanyListRequestValidationError is the validation error returned by
// CompanyListRequest.Validate if the designated constraints aren't met.
type CompanyListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompanyListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompanyListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompanyListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompanyListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompanyListRequestValidationError) ErrorName() string {
	return "CompanyListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CompanyListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompanyListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompanyListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompanyListRequestValidationError{}

// Validate checks the field values on CompanyCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompanyCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompanyCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompanyCreateRequestMultiError, or nil if none found.
func (m *CompanyCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CompanyCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() >= 0 {
		err := CompanyCreateRequestValidationError{
			field:  "Id",
			reason: "value must be less than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetTicker()); l < 1 || l > 16 {
		err := CompanyCreateRequestValidationError{
			field:  "Ticker",
			reason: "value length must be between 1 and 16 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetTickerIBKR()); l < 0 || l > 16 {
		err := CompanyCreateRequestValidationError{
			field:  "TickerIBKR",
			reason: "value length must be between 0 and 16 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetExchange()); l < 1 || l > 8 {
		err := CompanyCreateRequestValidationError{
			field:  "Exchange",
			reason: "value length must be between 1 and 8 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 64 {
		err := CompanyCreateRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetIsin()) != 16 {
		err := CompanyCreateRequestValidationError{
			field:  "Isin",
			reason: "value length must be 16 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if l := utf8.RuneCountInString(m.GetDescription()); l < 1 || l > 8164 {
		err := CompanyCreateRequestValidationError{
			field:  "Description",
			reason: "value length must be between 1 and 8164 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetActivity() > 50 {
		err := CompanyCreateRequestValidationError{
			field:  "Activity",
			reason: "value must be less than or equal to 50",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Adr

	if m.GetFiscalMonthEnd() >= 1 {
		err := CompanyCreateRequestValidationError{
			field:  "FiscalMonthEnd",
			reason: "value must be less than 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCurrencyReport()) != 3 {
		err := CompanyCreateRequestValidationError{
			field:  "CurrencyReport",
			reason: "value length must be 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if m.GetEmployees() != 0 {

	}

	if m.GetSharesPerListing() != 0 {

	}

	if m.GetSharesOut() != 0 {

	}

	if m.GetSharesFloat() != 0 {

	}

	if m.GetEmail() != "" {

	}

	if m.GetWebsite() != "" {

	}

	if m.GetPhone() != "" {

	}

	if m.GetStreet() != "" {

	}

	if m.GetCity() != "" {

	}

	if m.GetState() != "" {

	}

	if utf8.RuneCountInString(m.GetCountry()) != 2 {
		err := CompanyCreateRequestValidationError{
			field:  "Country",
			reason: "value length must be 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return CompanyCreateRequestMultiError(errors)
	}

	return nil
}

// CompanyCreateRequestMultiError is an error wrapping multiple validation
// errors returned by CompanyCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type CompanyCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompanyCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompanyCreateRequestMultiError) AllErrors() []error { return m }

// CompanyCreateRequestValidationError is the validation error returned by
// CompanyCreateRequest.Validate if the designated constraints aren't met.
type CompanyCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompanyCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompanyCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompanyCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompanyCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompanyCreateRequestValidationError) ErrorName() string {
	return "CompanyCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CompanyCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompanyCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompanyCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompanyCreateRequestValidationError{}

// Validate checks the field values on CompanyUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompanyUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompanyUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompanyUpdateRequestMultiError, or nil if none found.
func (m *CompanyUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CompanyUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetTicker()); l < 1 || l > 16 {
		err := CompanyUpdateRequestValidationError{
			field:  "Ticker",
			reason: "value length must be between 1 and 16 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetTickerIBKR()); l < 0 || l > 16 {
		err := CompanyUpdateRequestValidationError{
			field:  "TickerIBKR",
			reason: "value length must be between 0 and 16 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetExchange()); l < 1 || l > 8 {
		err := CompanyUpdateRequestValidationError{
			field:  "Exchange",
			reason: "value length must be between 1 and 8 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 64 {
		err := CompanyUpdateRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetIsin()) != 16 {
		err := CompanyUpdateRequestValidationError{
			field:  "Isin",
			reason: "value length must be 16 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if l := utf8.RuneCountInString(m.GetDescription()); l < 1 || l > 8164 {
		err := CompanyUpdateRequestValidationError{
			field:  "Description",
			reason: "value length must be between 1 and 8164 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetActivity() > 50 {
		err := CompanyUpdateRequestValidationError{
			field:  "Activity",
			reason: "value must be less than or equal to 50",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Adr

	if m.GetFiscalMonthEnd() >= 1 {
		err := CompanyUpdateRequestValidationError{
			field:  "FiscalMonthEnd",
			reason: "value must be less than 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCurrencyReport()) != 3 {
		err := CompanyUpdateRequestValidationError{
			field:  "CurrencyReport",
			reason: "value length must be 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if m.GetEmployees() != 0 {

	}

	if m.GetSharesPerListing() != 0 {

	}

	if m.GetSharesOut() > 1 {
		err := CompanyUpdateRequestValidationError{
			field:  "SharesOut",
			reason: "value must be less than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetSharesFloat() > 1 {
		err := CompanyUpdateRequestValidationError{
			field:  "SharesFloat",
			reason: "value must be less than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetEmail() != "" {

	}

	if m.GetWebsite() != "" {

	}

	if m.GetPhone() != "" {

	}

	if m.GetStreet() != "" {

	}

	if m.GetCity() != "" {

	}

	if m.GetState() != "" {

	}

	if utf8.RuneCountInString(m.GetCountry()) != 2 {
		err := CompanyUpdateRequestValidationError{
			field:  "Country",
			reason: "value length must be 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return CompanyUpdateRequestMultiError(errors)
	}

	return nil
}

// CompanyUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by CompanyUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type CompanyUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompanyUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompanyUpdateRequestMultiError) AllErrors() []error { return m }

// CompanyUpdateRequestValidationError is the validation error returned by
// CompanyUpdateRequest.Validate if the designated constraints aren't met.
type CompanyUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompanyUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompanyUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompanyUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompanyUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompanyUpdateRequestValidationError) ErrorName() string {
	return "CompanyUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CompanyUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompanyUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompanyUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompanyUpdateRequestValidationError{}

// Validate checks the field values on CompanyDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompanyDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompanyDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompanyDeleteRequestMultiError, or nil if none found.
func (m *CompanyDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CompanyDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	_CompanyDeleteRequest_Tickers_Unique := make(map[string]struct{}, len(m.GetTickers()))

	for idx, item := range m.GetTickers() {
		_, _ = idx, item

		if _, exists := _CompanyDeleteRequest_Tickers_Unique[item]; exists {
			err := CompanyDeleteRequestValidationError{
				field:  fmt.Sprintf("Tickers[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_CompanyDeleteRequest_Tickers_Unique[item] = struct{}{}
		}

		// no validation rules for Tickers[idx]
	}

	_CompanyDeleteRequest_Exchanges_Unique := make(map[string]struct{}, len(m.GetExchanges()))

	for idx, item := range m.GetExchanges() {
		_, _ = idx, item

		if _, exists := _CompanyDeleteRequest_Exchanges_Unique[item]; exists {
			err := CompanyDeleteRequestValidationError{
				field:  fmt.Sprintf("Exchanges[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_CompanyDeleteRequest_Exchanges_Unique[item] = struct{}{}
		}

		// no validation rules for Exchanges[idx]
	}

	if len(errors) > 0 {
		return CompanyDeleteRequestMultiError(errors)
	}

	return nil
}

// CompanyDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by CompanyDeleteRequest.ValidateAll() if the designated
// constraints aren't met.
type CompanyDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompanyDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompanyDeleteRequestMultiError) AllErrors() []error { return m }

// CompanyDeleteRequestValidationError is the validation error returned by
// CompanyDeleteRequest.Validate if the designated constraints aren't met.
type CompanyDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompanyDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompanyDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompanyDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompanyDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompanyDeleteRequestValidationError) ErrorName() string {
	return "CompanyDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CompanyDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompanyDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompanyDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompanyDeleteRequestValidationError{}

// Validate checks the field values on CompanyAddress with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CompanyAddress) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompanyAddress with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CompanyAddressMultiError,
// or nil if none found.
func (m *CompanyAddress) ValidateAll() error {
	return m.validate(true)
}

func (m *CompanyAddress) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Street

	// no validation rules for City

	// no validation rules for State

	// no validation rules for Country

	if len(errors) > 0 {
		return CompanyAddressMultiError(errors)
	}

	return nil
}

// CompanyAddressMultiError is an error wrapping multiple validation errors
// returned by CompanyAddress.ValidateAll() if the designated constraints
// aren't met.
type CompanyAddressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompanyAddressMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompanyAddressMultiError) AllErrors() []error { return m }

// CompanyAddressValidationError is the validation error returned by
// CompanyAddress.Validate if the designated constraints aren't met.
type CompanyAddressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompanyAddressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompanyAddressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompanyAddressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompanyAddressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompanyAddressValidationError) ErrorName() string { return "CompanyAddressValidationError" }

// Error satisfies the builtin error interface
func (e CompanyAddressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompanyAddress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompanyAddressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompanyAddressValidationError{}

// Validate checks the field values on CompanyContact with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CompanyContact) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompanyContact with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CompanyContactMultiError,
// or nil if none found.
func (m *CompanyContact) ValidateAll() error {
	return m.validate(true)
}

func (m *CompanyContact) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Phone

	// no validation rules for Website

	// no validation rules for Email

	if len(errors) > 0 {
		return CompanyContactMultiError(errors)
	}

	return nil
}

// CompanyContactMultiError is an error wrapping multiple validation errors
// returned by CompanyContact.ValidateAll() if the designated constraints
// aren't met.
type CompanyContactMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompanyContactMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompanyContactMultiError) AllErrors() []error { return m }

// CompanyContactValidationError is the validation error returned by
// CompanyContact.Validate if the designated constraints aren't met.
type CompanyContactValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompanyContactValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompanyContactValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompanyContactValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompanyContactValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompanyContactValidationError) ErrorName() string { return "CompanyContactValidationError" }

// Error satisfies the builtin error interface
func (e CompanyContactValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompanyContact.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompanyContactValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompanyContactValidationError{}

// Validate checks the field values on CompanyReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CompanyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompanyReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CompanyReplyMultiError, or
// nil if none found.
func (m *CompanyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CompanyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Ticker

	// no validation rules for TickerAlternative

	// no validation rules for Name

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetExchange()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CompanyReplyValidationError{
					field:  "Exchange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CompanyReplyValidationError{
					field:  "Exchange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExchange()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompanyReplyValidationError{
				field:  "Exchange",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Isin

	// no validation rules for Adr

	// no validation rules for Activity

	if all {
		switch v := interface{}(m.GetQuote()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CompanyReplyValidationError{
					field:  "Quote",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CompanyReplyValidationError{
					field:  "Quote",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQuote()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompanyReplyValidationError{
				field:  "Quote",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDividends()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CompanyReplyValidationError{
					field:  "Dividends",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CompanyReplyValidationError{
					field:  "Dividends",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDividends()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompanyReplyValidationError{
				field:  "Dividends",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStats()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CompanyReplyValidationError{
					field:  "Stats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CompanyReplyValidationError{
					field:  "Stats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStats()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompanyReplyValidationError{
				field:  "Stats",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Employees

	// no validation rules for CurrencyReport

	// no validation rules for FiscalYearEnd

	if all {
		switch v := interface{}(m.GetContact()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CompanyReplyValidationError{
					field:  "Contact",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CompanyReplyValidationError{
					field:  "Contact",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContact()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompanyReplyValidationError{
				field:  "Contact",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CompanyReplyValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CompanyReplyValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompanyReplyValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CompanyReplyValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CompanyReplyValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompanyReplyValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CompanyReplyValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CompanyReplyValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompanyReplyValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CompanyReplyMultiError(errors)
	}

	return nil
}

// CompanyReplyMultiError is an error wrapping multiple validation errors
// returned by CompanyReply.ValidateAll() if the designated constraints aren't met.
type CompanyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompanyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompanyReplyMultiError) AllErrors() []error { return m }

// CompanyReplyValidationError is the validation error returned by
// CompanyReply.Validate if the designated constraints aren't met.
type CompanyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompanyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompanyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompanyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompanyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompanyReplyValidationError) ErrorName() string { return "CompanyReplyValidationError" }

// Error satisfies the builtin error interface
func (e CompanyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompanyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompanyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompanyReplyValidationError{}

// Validate checks the field values on CompanyReplies with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CompanyReplies) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompanyReplies with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CompanyRepliesMultiError,
// or nil if none found.
func (m *CompanyReplies) ValidateAll() error {
	return m.validate(true)
}

func (m *CompanyReplies) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CompanyRepliesValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CompanyRepliesValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CompanyRepliesValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return CompanyRepliesMultiError(errors)
	}

	return nil
}

// CompanyRepliesMultiError is an error wrapping multiple validation errors
// returned by CompanyReplies.ValidateAll() if the designated constraints
// aren't met.
type CompanyRepliesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompanyRepliesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompanyRepliesMultiError) AllErrors() []error { return m }

// CompanyRepliesValidationError is the validation error returned by
// CompanyReplies.Validate if the designated constraints aren't met.
type CompanyRepliesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompanyRepliesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompanyRepliesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompanyRepliesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompanyRepliesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompanyRepliesValidationError) ErrorName() string { return "CompanyRepliesValidationError" }

// Error satisfies the builtin error interface
func (e CompanyRepliesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompanyReplies.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompanyRepliesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompanyRepliesValidationError{}

// Validate checks the field values on CompanyDelete with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CompanyDelete) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompanyDelete with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CompanyDeleteMultiError, or
// nil if none found.
func (m *CompanyDelete) ValidateAll() error {
	return m.validate(true)
}

func (m *CompanyDelete) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	if len(errors) > 0 {
		return CompanyDeleteMultiError(errors)
	}

	return nil
}

// CompanyDeleteMultiError is an error wrapping multiple validation errors
// returned by CompanyDelete.ValidateAll() if the designated constraints
// aren't met.
type CompanyDeleteMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompanyDeleteMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompanyDeleteMultiError) AllErrors() []error { return m }

// CompanyDeleteValidationError is the validation error returned by
// CompanyDelete.Validate if the designated constraints aren't met.
type CompanyDeleteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompanyDeleteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompanyDeleteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompanyDeleteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompanyDeleteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompanyDeleteValidationError) ErrorName() string { return "CompanyDeleteValidationError" }

// Error satisfies the builtin error interface
func (e CompanyDeleteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompanyDelete.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompanyDeleteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompanyDeleteValidationError{}

// Validate checks the field values on CompanyReply_Exchange with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompanyReply_Exchange) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompanyReply_Exchange with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompanyReply_ExchangeMultiError, or nil if none found.
func (m *CompanyReply_Exchange) ValidateAll() error {
	return m.validate(true)
}

func (m *CompanyReply_Exchange) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ticker

	// no validation rules for Routing

	// no validation rules for Open

	if len(errors) > 0 {
		return CompanyReply_ExchangeMultiError(errors)
	}

	return nil
}

// CompanyReply_ExchangeMultiError is an error wrapping multiple validation
// errors returned by CompanyReply_Exchange.ValidateAll() if the designated
// constraints aren't met.
type CompanyReply_ExchangeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompanyReply_ExchangeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompanyReply_ExchangeMultiError) AllErrors() []error { return m }

// CompanyReply_ExchangeValidationError is the validation error returned by
// CompanyReply_Exchange.Validate if the designated constraints aren't met.
type CompanyReply_ExchangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompanyReply_ExchangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompanyReply_ExchangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompanyReply_ExchangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompanyReply_ExchangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompanyReply_ExchangeValidationError) ErrorName() string {
	return "CompanyReply_ExchangeValidationError"
}

// Error satisfies the builtin error interface
func (e CompanyReply_ExchangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompanyReply_Exchange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompanyReply_ExchangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompanyReply_ExchangeValidationError{}

// Validate checks the field values on CompanyReply_Dividend with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompanyReply_Dividend) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompanyReply_Dividend with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompanyReply_DividendMultiError, or nil if none found.
func (m *CompanyReply_Dividend) ValidateAll() error {
	return m.validate(true)
}

func (m *CompanyReply_Dividend) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCreatedAt() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CompanyReply_DividendValidationError{
						field:  fmt.Sprintf("CreatedAt[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CompanyReply_DividendValidationError{
						field:  fmt.Sprintf("CreatedAt[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CompanyReply_DividendValidationError{
					field:  fmt.Sprintf("CreatedAt[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CompanyReply_DividendMultiError(errors)
	}

	return nil
}

// CompanyReply_DividendMultiError is an error wrapping multiple validation
// errors returned by CompanyReply_Dividend.ValidateAll() if the designated
// constraints aren't met.
type CompanyReply_DividendMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompanyReply_DividendMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompanyReply_DividendMultiError) AllErrors() []error { return m }

// CompanyReply_DividendValidationError is the validation error returned by
// CompanyReply_Dividend.Validate if the designated constraints aren't met.
type CompanyReply_DividendValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompanyReply_DividendValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompanyReply_DividendValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompanyReply_DividendValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompanyReply_DividendValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompanyReply_DividendValidationError) ErrorName() string {
	return "CompanyReply_DividendValidationError"
}

// Error satisfies the builtin error interface
func (e CompanyReply_DividendValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompanyReply_Dividend.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompanyReply_DividendValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompanyReply_DividendValidationError{}

// Validate checks the field values on CompanyReply_Stats with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompanyReply_Stats) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompanyReply_Stats with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompanyReply_StatsMultiError, or nil if none found.
func (m *CompanyReply_Stats) ValidateAll() error {
	return m.validate(true)
}

func (m *CompanyReply_Stats) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPrice()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CompanyReply_StatsValidationError{
					field:  "Price",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CompanyReply_StatsValidationError{
					field:  "Price",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPrice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompanyReply_StatsValidationError{
				field:  "Price",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetVolume()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CompanyReply_StatsValidationError{
					field:  "Volume",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CompanyReply_StatsValidationError{
					field:  "Volume",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVolume()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompanyReply_StatsValidationError{
				field:  "Volume",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetShares()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CompanyReply_StatsValidationError{
					field:  "Shares",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CompanyReply_StatsValidationError{
					field:  "Shares",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShares()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompanyReply_StatsValidationError{
				field:  "Shares",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CompanyReply_StatsValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CompanyReply_StatsValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompanyReply_StatsValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CompanyReply_StatsMultiError(errors)
	}

	return nil
}

// CompanyReply_StatsMultiError is an error wrapping multiple validation errors
// returned by CompanyReply_Stats.ValidateAll() if the designated constraints
// aren't met.
type CompanyReply_StatsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompanyReply_StatsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompanyReply_StatsMultiError) AllErrors() []error { return m }

// CompanyReply_StatsValidationError is the validation error returned by
// CompanyReply_Stats.Validate if the designated constraints aren't met.
type CompanyReply_StatsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompanyReply_StatsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompanyReply_StatsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompanyReply_StatsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompanyReply_StatsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompanyReply_StatsValidationError) ErrorName() string {
	return "CompanyReply_StatsValidationError"
}

// Error satisfies the builtin error interface
func (e CompanyReply_StatsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompanyReply_Stats.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompanyReply_StatsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompanyReply_StatsValidationError{}

// Validate checks the field values on CompanyReply_Stats_Shares with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompanyReply_Stats_Shares) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompanyReply_Stats_Shares with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompanyReply_Stats_SharesMultiError, or nil if none found.
func (m *CompanyReply_Stats_Shares) ValidateAll() error {
	return m.validate(true)
}

func (m *CompanyReply_Stats_Shares) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Outstanding

	// no validation rules for Float

	// no validation rules for Div

	if len(errors) > 0 {
		return CompanyReply_Stats_SharesMultiError(errors)
	}

	return nil
}

// CompanyReply_Stats_SharesMultiError is an error wrapping multiple validation
// errors returned by CompanyReply_Stats_Shares.ValidateAll() if the
// designated constraints aren't met.
type CompanyReply_Stats_SharesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompanyReply_Stats_SharesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompanyReply_Stats_SharesMultiError) AllErrors() []error { return m }

// CompanyReply_Stats_SharesValidationError is the validation error returned by
// CompanyReply_Stats_Shares.Validate if the designated constraints aren't met.
type CompanyReply_Stats_SharesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompanyReply_Stats_SharesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompanyReply_Stats_SharesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompanyReply_Stats_SharesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompanyReply_Stats_SharesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompanyReply_Stats_SharesValidationError) ErrorName() string {
	return "CompanyReply_Stats_SharesValidationError"
}

// Error satisfies the builtin error interface
func (e CompanyReply_Stats_SharesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompanyReply_Stats_Shares.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompanyReply_Stats_SharesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompanyReply_Stats_SharesValidationError{}

// Validate checks the field values on CompanyReplies_Result with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompanyReplies_Result) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompanyReplies_Result with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompanyReplies_ResultMultiError, or nil if none found.
func (m *CompanyReplies_Result) ValidateAll() error {
	return m.validate(true)
}

func (m *CompanyReplies_Result) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Ticker

	// no validation rules for TickerAlternative

	// no validation rules for Name

	// no validation rules for Exchange

	// no validation rules for Isin

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CompanyReplies_ResultValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CompanyReplies_ResultValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompanyReplies_ResultValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CompanyReplies_ResultValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CompanyReplies_ResultValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompanyReplies_ResultValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CompanyReplies_ResultMultiError(errors)
	}

	return nil
}

// CompanyReplies_ResultMultiError is an error wrapping multiple validation
// errors returned by CompanyReplies_Result.ValidateAll() if the designated
// constraints aren't met.
type CompanyReplies_ResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompanyReplies_ResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompanyReplies_ResultMultiError) AllErrors() []error { return m }

// CompanyReplies_ResultValidationError is the validation error returned by
// CompanyReplies_Result.Validate if the designated constraints aren't met.
type CompanyReplies_ResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompanyReplies_ResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompanyReplies_ResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompanyReplies_ResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompanyReplies_ResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompanyReplies_ResultValidationError) ErrorName() string {
	return "CompanyReplies_ResultValidationError"
}

// Error satisfies the builtin error interface
func (e CompanyReplies_ResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompanyReplies_Result.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompanyReplies_ResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompanyReplies_ResultValidationError{}
