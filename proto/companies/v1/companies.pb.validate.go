// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/companies/v1/companies.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CompanyRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CompanyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompanyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CompanyRequestMultiError,
// or nil if none found.
func (m *CompanyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CompanyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetTicker()); l < 1 || l > 8 {
		err := CompanyRequestValidationError{
			field:  "Ticker",
			reason: "value length must be between 1 and 8 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetExchange()); l < 1 || l > 8 {
		err := CompanyRequestValidationError{
			field:  "Exchange",
			reason: "value length must be between 1 and 8 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CompanyRequestMultiError(errors)
	}

	return nil
}

// CompanyRequestMultiError is an error wrapping multiple validation errors
// returned by CompanyRequest.ValidateAll() if the designated constraints
// aren't met.
type CompanyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompanyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompanyRequestMultiError) AllErrors() []error { return m }

// CompanyRequestValidationError is the validation error returned by
// CompanyRequest.Validate if the designated constraints aren't met.
type CompanyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompanyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompanyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompanyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompanyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompanyRequestValidationError) ErrorName() string { return "CompanyRequestValidationError" }

// Error satisfies the builtin error interface
func (e CompanyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompanyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompanyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompanyRequestValidationError{}

// Validate checks the field values on CompanyAddress with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CompanyAddress) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompanyAddress with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CompanyAddressMultiError,
// or nil if none found.
func (m *CompanyAddress) ValidateAll() error {
	return m.validate(true)
}

func (m *CompanyAddress) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Street

	// no validation rules for City

	// no validation rules for State

	// no validation rules for Country

	if len(errors) > 0 {
		return CompanyAddressMultiError(errors)
	}

	return nil
}

// CompanyAddressMultiError is an error wrapping multiple validation errors
// returned by CompanyAddress.ValidateAll() if the designated constraints
// aren't met.
type CompanyAddressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompanyAddressMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompanyAddressMultiError) AllErrors() []error { return m }

// CompanyAddressValidationError is the validation error returned by
// CompanyAddress.Validate if the designated constraints aren't met.
type CompanyAddressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompanyAddressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompanyAddressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompanyAddressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompanyAddressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompanyAddressValidationError) ErrorName() string { return "CompanyAddressValidationError" }

// Error satisfies the builtin error interface
func (e CompanyAddressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompanyAddress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompanyAddressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompanyAddressValidationError{}

// Validate checks the field values on CompanyContact with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CompanyContact) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompanyContact with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CompanyContactMultiError,
// or nil if none found.
func (m *CompanyContact) ValidateAll() error {
	return m.validate(true)
}

func (m *CompanyContact) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Phone

	// no validation rules for Website

	// no validation rules for Email

	if len(errors) > 0 {
		return CompanyContactMultiError(errors)
	}

	return nil
}

// CompanyContactMultiError is an error wrapping multiple validation errors
// returned by CompanyContact.ValidateAll() if the designated constraints
// aren't met.
type CompanyContactMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompanyContactMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompanyContactMultiError) AllErrors() []error { return m }

// CompanyContactValidationError is the validation error returned by
// CompanyContact.Validate if the designated constraints aren't met.
type CompanyContactValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompanyContactValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompanyContactValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompanyContactValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompanyContactValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompanyContactValidationError) ErrorName() string { return "CompanyContactValidationError" }

// Error satisfies the builtin error interface
func (e CompanyContactValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompanyContact.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompanyContactValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompanyContactValidationError{}

// Validate checks the field values on CompanyReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CompanyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompanyReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CompanyReplyMultiError, or
// nil if none found.
func (m *CompanyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CompanyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Ticker

	// no validation rules for TickerAlternative

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Exchange

	// no validation rules for Routing

	// no validation rules for Isin

	// no validation rules for Employees

	// no validation rules for Adr

	if all {
		switch v := interface{}(m.GetActivity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CompanyReplyValidationError{
					field:  "Activity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CompanyReplyValidationError{
					field:  "Activity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetActivity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompanyReplyValidationError{
				field:  "Activity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetShares()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CompanyReplyValidationError{
					field:  "Shares",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CompanyReplyValidationError{
					field:  "Shares",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShares()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompanyReplyValidationError{
				field:  "Shares",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CurrencyReport

	// no validation rules for FiscalYearEnd

	if all {
		switch v := interface{}(m.GetContact()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CompanyReplyValidationError{
					field:  "Contact",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CompanyReplyValidationError{
					field:  "Contact",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContact()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompanyReplyValidationError{
				field:  "Contact",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CompanyReplyValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CompanyReplyValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompanyReplyValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CompanyReplyValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CompanyReplyValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompanyReplyValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CompanyReplyValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CompanyReplyValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompanyReplyValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CompanyReplyMultiError(errors)
	}

	return nil
}

// CompanyReplyMultiError is an error wrapping multiple validation errors
// returned by CompanyReply.ValidateAll() if the designated constraints aren't met.
type CompanyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompanyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompanyReplyMultiError) AllErrors() []error { return m }

// CompanyReplyValidationError is the validation error returned by
// CompanyReply.Validate if the designated constraints aren't met.
type CompanyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompanyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompanyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompanyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompanyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompanyReplyValidationError) ErrorName() string { return "CompanyReplyValidationError" }

// Error satisfies the builtin error interface
func (e CompanyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompanyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompanyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompanyReplyValidationError{}

// Validate checks the field values on CompanyStatsReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CompanyStatsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompanyStatsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompanyStatsReplyMultiError, or nil if none found.
func (m *CompanyStatsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CompanyStatsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetShares()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CompanyStatsReplyValidationError{
					field:  "Shares",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CompanyStatsReplyValidationError{
					field:  "Shares",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShares()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompanyStatsReplyValidationError{
				field:  "Shares",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPricing()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CompanyStatsReplyValidationError{
					field:  "Pricing",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CompanyStatsReplyValidationError{
					field:  "Pricing",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPricing()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompanyStatsReplyValidationError{
				field:  "Pricing",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDividends()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CompanyStatsReplyValidationError{
					field:  "Dividends",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CompanyStatsReplyValidationError{
					field:  "Dividends",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDividends()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompanyStatsReplyValidationError{
				field:  "Dividends",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetVolume()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CompanyStatsReplyValidationError{
					field:  "Volume",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CompanyStatsReplyValidationError{
					field:  "Volume",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVolume()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompanyStatsReplyValidationError{
				field:  "Volume",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CompanyStatsReplyValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CompanyStatsReplyValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompanyStatsReplyValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CompanyStatsReplyValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CompanyStatsReplyValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompanyStatsReplyValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CompanyStatsReplyMultiError(errors)
	}

	return nil
}

// CompanyStatsReplyMultiError is an error wrapping multiple validation errors
// returned by CompanyStatsReply.ValidateAll() if the designated constraints
// aren't met.
type CompanyStatsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompanyStatsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompanyStatsReplyMultiError) AllErrors() []error { return m }

// CompanyStatsReplyValidationError is the validation error returned by
// CompanyStatsReply.Validate if the designated constraints aren't met.
type CompanyStatsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompanyStatsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompanyStatsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompanyStatsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompanyStatsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompanyStatsReplyValidationError) ErrorName() string {
	return "CompanyStatsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CompanyStatsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompanyStatsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompanyStatsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompanyStatsReplyValidationError{}

// Validate checks the field values on CompanySimilarsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompanySimilarsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompanySimilarsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompanySimilarsReplyMultiError, or nil if none found.
func (m *CompanySimilarsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CompanySimilarsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CompanySimilarsReplyValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CompanySimilarsReplyValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CompanySimilarsReplyValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return CompanySimilarsReplyMultiError(errors)
	}

	return nil
}

// CompanySimilarsReplyMultiError is an error wrapping multiple validation
// errors returned by CompanySimilarsReply.ValidateAll() if the designated
// constraints aren't met.
type CompanySimilarsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompanySimilarsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompanySimilarsReplyMultiError) AllErrors() []error { return m }

// CompanySimilarsReplyValidationError is the validation error returned by
// CompanySimilarsReply.Validate if the designated constraints aren't met.
type CompanySimilarsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompanySimilarsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompanySimilarsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompanySimilarsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompanySimilarsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompanySimilarsReplyValidationError) ErrorName() string {
	return "CompanySimilarsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CompanySimilarsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompanySimilarsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompanySimilarsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompanySimilarsReplyValidationError{}

// Validate checks the field values on CompanyReply_Activity with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompanyReply_Activity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompanyReply_Activity with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompanyReply_ActivityMultiError, or nil if none found.
func (m *CompanyReply_Activity) ValidateAll() error {
	return m.validate(true)
}

func (m *CompanyReply_Activity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EconomicSector

	// no validation rules for BusinessSector

	// no validation rules for IndustryGroup

	// no validation rules for Industry

	// no validation rules for Activity

	if len(errors) > 0 {
		return CompanyReply_ActivityMultiError(errors)
	}

	return nil
}

// CompanyReply_ActivityMultiError is an error wrapping multiple validation
// errors returned by CompanyReply_Activity.ValidateAll() if the designated
// constraints aren't met.
type CompanyReply_ActivityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompanyReply_ActivityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompanyReply_ActivityMultiError) AllErrors() []error { return m }

// CompanyReply_ActivityValidationError is the validation error returned by
// CompanyReply_Activity.Validate if the designated constraints aren't met.
type CompanyReply_ActivityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompanyReply_ActivityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompanyReply_ActivityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompanyReply_ActivityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompanyReply_ActivityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompanyReply_ActivityValidationError) ErrorName() string {
	return "CompanyReply_ActivityValidationError"
}

// Error satisfies the builtin error interface
func (e CompanyReply_ActivityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompanyReply_Activity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompanyReply_ActivityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompanyReply_ActivityValidationError{}

// Validate checks the field values on CompanyReply_Shares with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompanyReply_Shares) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompanyReply_Shares with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompanyReply_SharesMultiError, or nil if none found.
func (m *CompanyReply_Shares) ValidateAll() error {
	return m.validate(true)
}

func (m *CompanyReply_Shares) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Outstanding

	// no validation rules for Float

	if len(errors) > 0 {
		return CompanyReply_SharesMultiError(errors)
	}

	return nil
}

// CompanyReply_SharesMultiError is an error wrapping multiple validation
// errors returned by CompanyReply_Shares.ValidateAll() if the designated
// constraints aren't met.
type CompanyReply_SharesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompanyReply_SharesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompanyReply_SharesMultiError) AllErrors() []error { return m }

// CompanyReply_SharesValidationError is the validation error returned by
// CompanyReply_Shares.Validate if the designated constraints aren't met.
type CompanyReply_SharesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompanyReply_SharesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompanyReply_SharesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompanyReply_SharesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompanyReply_SharesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompanyReply_SharesValidationError) ErrorName() string {
	return "CompanyReply_SharesValidationError"
}

// Error satisfies the builtin error interface
func (e CompanyReply_SharesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompanyReply_Shares.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompanyReply_SharesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompanyReply_SharesValidationError{}

// Validate checks the field values on CompanyStatsReply_Shares with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompanyStatsReply_Shares) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompanyStatsReply_Shares with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompanyStatsReply_SharesMultiError, or nil if none found.
func (m *CompanyStatsReply_Shares) ValidateAll() error {
	return m.validate(true)
}

func (m *CompanyStatsReply_Shares) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Outstanding

	// no validation rules for Float

	if len(errors) > 0 {
		return CompanyStatsReply_SharesMultiError(errors)
	}

	return nil
}

// CompanyStatsReply_SharesMultiError is an error wrapping multiple validation
// errors returned by CompanyStatsReply_Shares.ValidateAll() if the designated
// constraints aren't met.
type CompanyStatsReply_SharesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompanyStatsReply_SharesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompanyStatsReply_SharesMultiError) AllErrors() []error { return m }

// CompanyStatsReply_SharesValidationError is the validation error returned by
// CompanyStatsReply_Shares.Validate if the designated constraints aren't met.
type CompanyStatsReply_SharesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompanyStatsReply_SharesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompanyStatsReply_SharesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompanyStatsReply_SharesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompanyStatsReply_SharesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompanyStatsReply_SharesValidationError) ErrorName() string {
	return "CompanyStatsReply_SharesValidationError"
}

// Error satisfies the builtin error interface
func (e CompanyStatsReply_SharesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompanyStatsReply_Shares.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompanyStatsReply_SharesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompanyStatsReply_SharesValidationError{}

// Validate checks the field values on CompanyStatsReply_Pricing with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompanyStatsReply_Pricing) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompanyStatsReply_Pricing with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompanyStatsReply_PricingMultiError, or nil if none found.
func (m *CompanyStatsReply_Pricing) ValidateAll() error {
	return m.validate(true)
}

func (m *CompanyStatsReply_Pricing) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Last

	// no validation rules for MinYear

	// no validation rules for MaxYear

	// no validation rules for ReturnYear

	// no validation rules for Marketcap

	// no validation rules for Beta5Y

	if len(errors) > 0 {
		return CompanyStatsReply_PricingMultiError(errors)
	}

	return nil
}

// CompanyStatsReply_PricingMultiError is an error wrapping multiple validation
// errors returned by CompanyStatsReply_Pricing.ValidateAll() if the
// designated constraints aren't met.
type CompanyStatsReply_PricingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompanyStatsReply_PricingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompanyStatsReply_PricingMultiError) AllErrors() []error { return m }

// CompanyStatsReply_PricingValidationError is the validation error returned by
// CompanyStatsReply_Pricing.Validate if the designated constraints aren't met.
type CompanyStatsReply_PricingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompanyStatsReply_PricingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompanyStatsReply_PricingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompanyStatsReply_PricingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompanyStatsReply_PricingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompanyStatsReply_PricingValidationError) ErrorName() string {
	return "CompanyStatsReply_PricingValidationError"
}

// Error satisfies the builtin error interface
func (e CompanyStatsReply_PricingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompanyStatsReply_Pricing.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompanyStatsReply_PricingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompanyStatsReply_PricingValidationError{}

// Validate checks the field values on CompanyStatsReply_Volume with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompanyStatsReply_Volume) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompanyStatsReply_Volume with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompanyStatsReply_VolumeMultiError, or nil if none found.
func (m *CompanyStatsReply_Volume) ValidateAll() error {
	return m.validate(true)
}

func (m *CompanyStatsReply_Volume) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Last

	// no validation rules for Avg10D

	// no validation rules for Avg90D

	// no validation rules for Share10DRatio

	// no validation rules for Share90DRatio

	if len(errors) > 0 {
		return CompanyStatsReply_VolumeMultiError(errors)
	}

	return nil
}

// CompanyStatsReply_VolumeMultiError is an error wrapping multiple validation
// errors returned by CompanyStatsReply_Volume.ValidateAll() if the designated
// constraints aren't met.
type CompanyStatsReply_VolumeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompanyStatsReply_VolumeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompanyStatsReply_VolumeMultiError) AllErrors() []error { return m }

// CompanyStatsReply_VolumeValidationError is the validation error returned by
// CompanyStatsReply_Volume.Validate if the designated constraints aren't met.
type CompanyStatsReply_VolumeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompanyStatsReply_VolumeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompanyStatsReply_VolumeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompanyStatsReply_VolumeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompanyStatsReply_VolumeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompanyStatsReply_VolumeValidationError) ErrorName() string {
	return "CompanyStatsReply_VolumeValidationError"
}

// Error satisfies the builtin error interface
func (e CompanyStatsReply_VolumeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompanyStatsReply_Volume.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompanyStatsReply_VolumeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompanyStatsReply_VolumeValidationError{}

// Validate checks the field values on CompanyStatsReply_Dividends with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompanyStatsReply_Dividends) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompanyStatsReply_Dividends with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompanyStatsReply_DividendsMultiError, or nil if none found.
func (m *CompanyStatsReply_Dividends) ValidateAll() error {
	return m.validate(true)
}

func (m *CompanyStatsReply_Dividends) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Yield

	// no validation rules for Annual

	// no validation rules for YieldAvg5Y

	if len(errors) > 0 {
		return CompanyStatsReply_DividendsMultiError(errors)
	}

	return nil
}

// CompanyStatsReply_DividendsMultiError is an error wrapping multiple
// validation errors returned by CompanyStatsReply_Dividends.ValidateAll() if
// the designated constraints aren't met.
type CompanyStatsReply_DividendsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompanyStatsReply_DividendsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompanyStatsReply_DividendsMultiError) AllErrors() []error { return m }

// CompanyStatsReply_DividendsValidationError is the validation error returned
// by CompanyStatsReply_Dividends.Validate if the designated constraints
// aren't met.
type CompanyStatsReply_DividendsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompanyStatsReply_DividendsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompanyStatsReply_DividendsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompanyStatsReply_DividendsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompanyStatsReply_DividendsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompanyStatsReply_DividendsValidationError) ErrorName() string {
	return "CompanyStatsReply_DividendsValidationError"
}

// Error satisfies the builtin error interface
func (e CompanyStatsReply_DividendsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompanyStatsReply_Dividends.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompanyStatsReply_DividendsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompanyStatsReply_DividendsValidationError{}

// Validate checks the field values on CompanySimilarsReply_Result with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompanySimilarsReply_Result) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompanySimilarsReply_Result with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompanySimilarsReply_ResultMultiError, or nil if none found.
func (m *CompanySimilarsReply_Result) ValidateAll() error {
	return m.validate(true)
}

func (m *CompanySimilarsReply_Result) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Ticker

	// no validation rules for TickerAlternative

	// no validation rules for Name

	// no validation rules for Exchange

	// no validation rules for Isin

	// no validation rules for MarketCap

	if len(errors) > 0 {
		return CompanySimilarsReply_ResultMultiError(errors)
	}

	return nil
}

// CompanySimilarsReply_ResultMultiError is an error wrapping multiple
// validation errors returned by CompanySimilarsReply_Result.ValidateAll() if
// the designated constraints aren't met.
type CompanySimilarsReply_ResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompanySimilarsReply_ResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompanySimilarsReply_ResultMultiError) AllErrors() []error { return m }

// CompanySimilarsReply_ResultValidationError is the validation error returned
// by CompanySimilarsReply_Result.Validate if the designated constraints
// aren't met.
type CompanySimilarsReply_ResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompanySimilarsReply_ResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompanySimilarsReply_ResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompanySimilarsReply_ResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompanySimilarsReply_ResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompanySimilarsReply_ResultValidationError) ErrorName() string {
	return "CompanySimilarsReply_ResultValidationError"
}

// Error satisfies the builtin error interface
func (e CompanySimilarsReply_ResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompanySimilarsReply_Result.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompanySimilarsReply_ResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompanySimilarsReply_ResultValidationError{}
