// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: proto/companies/v1/companies.proto

package v1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CompanyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticker   string `protobuf:"bytes,1,opt,name=ticker,proto3" json:"ticker,omitempty"`
	Exchange string `protobuf:"bytes,2,opt,name=exchange,proto3" json:"exchange,omitempty"`
}

func (x *CompanyRequest) Reset() {
	*x = CompanyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_companies_v1_companies_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyRequest) ProtoMessage() {}

func (x *CompanyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_companies_v1_companies_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyRequest.ProtoReflect.Descriptor instead.
func (*CompanyRequest) Descriptor() ([]byte, []int) {
	return file_proto_companies_v1_companies_proto_rawDescGZIP(), []int{0}
}

func (x *CompanyRequest) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *CompanyRequest) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

type CompanyAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Street  string `protobuf:"bytes,1,opt,name=street,proto3" json:"street,omitempty"`
	City    string `protobuf:"bytes,2,opt,name=city,proto3" json:"city,omitempty"`
	State   string `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	Country string `protobuf:"bytes,4,opt,name=country,proto3" json:"country,omitempty"`
}

func (x *CompanyAddress) Reset() {
	*x = CompanyAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_companies_v1_companies_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyAddress) ProtoMessage() {}

func (x *CompanyAddress) ProtoReflect() protoreflect.Message {
	mi := &file_proto_companies_v1_companies_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyAddress.ProtoReflect.Descriptor instead.
func (*CompanyAddress) Descriptor() ([]byte, []int) {
	return file_proto_companies_v1_companies_proto_rawDescGZIP(), []int{1}
}

func (x *CompanyAddress) GetStreet() string {
	if x != nil {
		return x.Street
	}
	return ""
}

func (x *CompanyAddress) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *CompanyAddress) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *CompanyAddress) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

type CompanyContact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phone   string `protobuf:"bytes,1,opt,name=phone,proto3" json:"phone,omitempty"`
	Website string `protobuf:"bytes,2,opt,name=website,proto3" json:"website,omitempty"`
	Email   string `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *CompanyContact) Reset() {
	*x = CompanyContact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_companies_v1_companies_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyContact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyContact) ProtoMessage() {}

func (x *CompanyContact) ProtoReflect() protoreflect.Message {
	mi := &file_proto_companies_v1_companies_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyContact.ProtoReflect.Descriptor instead.
func (*CompanyContact) Descriptor() ([]byte, []int) {
	return file_proto_companies_v1_companies_proto_rawDescGZIP(), []int{2}
}

func (x *CompanyContact) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *CompanyContact) GetWebsite() string {
	if x != nil {
		return x.Website
	}
	return ""
}

func (x *CompanyContact) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type CompanyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Ticker            string                 `protobuf:"bytes,2,opt,name=ticker,proto3" json:"ticker,omitempty"`
	TickerAlternative string                 `protobuf:"bytes,3,opt,name=ticker_alternative,json=tickerAlternative,proto3" json:"ticker_alternative,omitempty"`
	Name              string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Description       string                 `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Exchange          string                 `protobuf:"bytes,6,opt,name=exchange,proto3" json:"exchange,omitempty"`
	Routing           string                 `protobuf:"bytes,7,opt,name=routing,proto3" json:"routing,omitempty"`
	Isin              string                 `protobuf:"bytes,8,opt,name=isin,proto3" json:"isin,omitempty"`
	Employees         int64                  `protobuf:"varint,9,opt,name=employees,proto3" json:"employees,omitempty"`
	Activity          *CompanyReply_Activity `protobuf:"bytes,10,opt,name=activity,proto3" json:"activity,omitempty"`
	Shares            *CompanyReply_Shares   `protobuf:"bytes,11,opt,name=shares,proto3" json:"shares,omitempty"`
	CurrencyReport    string                 `protobuf:"bytes,12,opt,name=currencyReport,proto3" json:"currencyReport,omitempty"`
	FiscalYearEnd     int64                  `protobuf:"varint,13,opt,name=fiscalYearEnd,proto3" json:"fiscalYearEnd,omitempty"`
	Contact           *CompanyContact        `protobuf:"bytes,14,opt,name=contact,proto3" json:"contact,omitempty"`
	Address           *CompanyAddress        `protobuf:"bytes,15,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *CompanyReply) Reset() {
	*x = CompanyReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_companies_v1_companies_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyReply) ProtoMessage() {}

func (x *CompanyReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_companies_v1_companies_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyReply.ProtoReflect.Descriptor instead.
func (*CompanyReply) Descriptor() ([]byte, []int) {
	return file_proto_companies_v1_companies_proto_rawDescGZIP(), []int{3}
}

func (x *CompanyReply) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CompanyReply) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *CompanyReply) GetTickerAlternative() string {
	if x != nil {
		return x.TickerAlternative
	}
	return ""
}

func (x *CompanyReply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CompanyReply) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CompanyReply) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *CompanyReply) GetRouting() string {
	if x != nil {
		return x.Routing
	}
	return ""
}

func (x *CompanyReply) GetIsin() string {
	if x != nil {
		return x.Isin
	}
	return ""
}

func (x *CompanyReply) GetEmployees() int64 {
	if x != nil {
		return x.Employees
	}
	return 0
}

func (x *CompanyReply) GetActivity() *CompanyReply_Activity {
	if x != nil {
		return x.Activity
	}
	return nil
}

func (x *CompanyReply) GetShares() *CompanyReply_Shares {
	if x != nil {
		return x.Shares
	}
	return nil
}

func (x *CompanyReply) GetCurrencyReport() string {
	if x != nil {
		return x.CurrencyReport
	}
	return ""
}

func (x *CompanyReply) GetFiscalYearEnd() int64 {
	if x != nil {
		return x.FiscalYearEnd
	}
	return 0
}

func (x *CompanyReply) GetContact() *CompanyContact {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *CompanyReply) GetAddress() *CompanyAddress {
	if x != nil {
		return x.Address
	}
	return nil
}

type CompanyStatsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Shares    *CompanyStatsReply_Shares    `protobuf:"bytes,1,opt,name=shares,proto3" json:"shares,omitempty"`
	Pricing   *CompanyStatsReply_Pricing   `protobuf:"bytes,2,opt,name=pricing,proto3" json:"pricing,omitempty"`
	Dividends *CompanyStatsReply_Dividends `protobuf:"bytes,3,opt,name=dividends,proto3" json:"dividends,omitempty"`
	Volume    *CompanyStatsReply_Volume    `protobuf:"bytes,4,opt,name=volume,proto3" json:"volume,omitempty"`
	Date      *timestamppb.Timestamp       `protobuf:"bytes,5,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *CompanyStatsReply) Reset() {
	*x = CompanyStatsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_companies_v1_companies_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyStatsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyStatsReply) ProtoMessage() {}

func (x *CompanyStatsReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_companies_v1_companies_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyStatsReply.ProtoReflect.Descriptor instead.
func (*CompanyStatsReply) Descriptor() ([]byte, []int) {
	return file_proto_companies_v1_companies_proto_rawDescGZIP(), []int{4}
}

func (x *CompanyStatsReply) GetShares() *CompanyStatsReply_Shares {
	if x != nil {
		return x.Shares
	}
	return nil
}

func (x *CompanyStatsReply) GetPricing() *CompanyStatsReply_Pricing {
	if x != nil {
		return x.Pricing
	}
	return nil
}

func (x *CompanyStatsReply) GetDividends() *CompanyStatsReply_Dividends {
	if x != nil {
		return x.Dividends
	}
	return nil
}

func (x *CompanyStatsReply) GetVolume() *CompanyStatsReply_Volume {
	if x != nil {
		return x.Volume
	}
	return nil
}

func (x *CompanyStatsReply) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

type CompanySimilarsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*CompanySimilarsReply_Result `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Total   int32                          `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *CompanySimilarsReply) Reset() {
	*x = CompanySimilarsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_companies_v1_companies_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanySimilarsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanySimilarsReply) ProtoMessage() {}

func (x *CompanySimilarsReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_companies_v1_companies_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanySimilarsReply.ProtoReflect.Descriptor instead.
func (*CompanySimilarsReply) Descriptor() ([]byte, []int) {
	return file_proto_companies_v1_companies_proto_rawDescGZIP(), []int{5}
}

func (x *CompanySimilarsReply) GetResults() []*CompanySimilarsReply_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *CompanySimilarsReply) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type CompanyReply_Activity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EconomicSector int64 `protobuf:"varint,1,opt,name=economicSector,proto3" json:"economicSector,omitempty"`
	BusinessSector int64 `protobuf:"varint,2,opt,name=businessSector,proto3" json:"businessSector,omitempty"`
	IndustryGroup  int64 `protobuf:"varint,3,opt,name=industryGroup,proto3" json:"industryGroup,omitempty"`
	Industry       int64 `protobuf:"varint,4,opt,name=industry,proto3" json:"industry,omitempty"`
	Activity       int64 `protobuf:"varint,5,opt,name=activity,proto3" json:"activity,omitempty"`
}

func (x *CompanyReply_Activity) Reset() {
	*x = CompanyReply_Activity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_companies_v1_companies_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyReply_Activity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyReply_Activity) ProtoMessage() {}

func (x *CompanyReply_Activity) ProtoReflect() protoreflect.Message {
	mi := &file_proto_companies_v1_companies_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyReply_Activity.ProtoReflect.Descriptor instead.
func (*CompanyReply_Activity) Descriptor() ([]byte, []int) {
	return file_proto_companies_v1_companies_proto_rawDescGZIP(), []int{3, 0}
}

func (x *CompanyReply_Activity) GetEconomicSector() int64 {
	if x != nil {
		return x.EconomicSector
	}
	return 0
}

func (x *CompanyReply_Activity) GetBusinessSector() int64 {
	if x != nil {
		return x.BusinessSector
	}
	return 0
}

func (x *CompanyReply_Activity) GetIndustryGroup() int64 {
	if x != nil {
		return x.IndustryGroup
	}
	return 0
}

func (x *CompanyReply_Activity) GetIndustry() int64 {
	if x != nil {
		return x.Industry
	}
	return 0
}

func (x *CompanyReply_Activity) GetActivity() int64 {
	if x != nil {
		return x.Activity
	}
	return 0
}

type CompanyReply_Shares struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Outstanding int64 `protobuf:"varint,1,opt,name=outstanding,proto3" json:"outstanding,omitempty"`
	Float       int64 `protobuf:"varint,2,opt,name=float,proto3" json:"float,omitempty"`
}

func (x *CompanyReply_Shares) Reset() {
	*x = CompanyReply_Shares{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_companies_v1_companies_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyReply_Shares) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyReply_Shares) ProtoMessage() {}

func (x *CompanyReply_Shares) ProtoReflect() protoreflect.Message {
	mi := &file_proto_companies_v1_companies_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyReply_Shares.ProtoReflect.Descriptor instead.
func (*CompanyReply_Shares) Descriptor() ([]byte, []int) {
	return file_proto_companies_v1_companies_proto_rawDescGZIP(), []int{3, 1}
}

func (x *CompanyReply_Shares) GetOutstanding() int64 {
	if x != nil {
		return x.Outstanding
	}
	return 0
}

func (x *CompanyReply_Shares) GetFloat() int64 {
	if x != nil {
		return x.Float
	}
	return 0
}

type CompanyStatsReply_Shares struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Outstanding int64 `protobuf:"varint,1,opt,name=outstanding,proto3" json:"outstanding,omitempty"`
	Float       int64 `protobuf:"varint,2,opt,name=float,proto3" json:"float,omitempty"`
}

func (x *CompanyStatsReply_Shares) Reset() {
	*x = CompanyStatsReply_Shares{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_companies_v1_companies_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyStatsReply_Shares) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyStatsReply_Shares) ProtoMessage() {}

func (x *CompanyStatsReply_Shares) ProtoReflect() protoreflect.Message {
	mi := &file_proto_companies_v1_companies_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyStatsReply_Shares.ProtoReflect.Descriptor instead.
func (*CompanyStatsReply_Shares) Descriptor() ([]byte, []int) {
	return file_proto_companies_v1_companies_proto_rawDescGZIP(), []int{4, 0}
}

func (x *CompanyStatsReply_Shares) GetOutstanding() int64 {
	if x != nil {
		return x.Outstanding
	}
	return 0
}

func (x *CompanyStatsReply_Shares) GetFloat() int64 {
	if x != nil {
		return x.Float
	}
	return 0
}

type CompanyStatsReply_Pricing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Last       float32 `protobuf:"fixed32,1,opt,name=last,proto3" json:"last,omitempty"`
	MinYear    float32 `protobuf:"fixed32,2,opt,name=minYear,proto3" json:"minYear,omitempty"`
	MaxYear    float32 `protobuf:"fixed32,3,opt,name=maxYear,proto3" json:"maxYear,omitempty"`
	ReturnYear float32 `protobuf:"fixed32,4,opt,name=returnYear,proto3" json:"returnYear,omitempty"`
	Marketcap  int64   `protobuf:"varint,5,opt,name=marketcap,proto3" json:"marketcap,omitempty"`
	Beta5Y     float32 `protobuf:"fixed32,6,opt,name=beta5y,proto3" json:"beta5y,omitempty"`
}

func (x *CompanyStatsReply_Pricing) Reset() {
	*x = CompanyStatsReply_Pricing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_companies_v1_companies_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyStatsReply_Pricing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyStatsReply_Pricing) ProtoMessage() {}

func (x *CompanyStatsReply_Pricing) ProtoReflect() protoreflect.Message {
	mi := &file_proto_companies_v1_companies_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyStatsReply_Pricing.ProtoReflect.Descriptor instead.
func (*CompanyStatsReply_Pricing) Descriptor() ([]byte, []int) {
	return file_proto_companies_v1_companies_proto_rawDescGZIP(), []int{4, 1}
}

func (x *CompanyStatsReply_Pricing) GetLast() float32 {
	if x != nil {
		return x.Last
	}
	return 0
}

func (x *CompanyStatsReply_Pricing) GetMinYear() float32 {
	if x != nil {
		return x.MinYear
	}
	return 0
}

func (x *CompanyStatsReply_Pricing) GetMaxYear() float32 {
	if x != nil {
		return x.MaxYear
	}
	return 0
}

func (x *CompanyStatsReply_Pricing) GetReturnYear() float32 {
	if x != nil {
		return x.ReturnYear
	}
	return 0
}

func (x *CompanyStatsReply_Pricing) GetMarketcap() int64 {
	if x != nil {
		return x.Marketcap
	}
	return 0
}

func (x *CompanyStatsReply_Pricing) GetBeta5Y() float32 {
	if x != nil {
		return x.Beta5Y
	}
	return 0
}

type CompanyStatsReply_Volume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Last          float32 `protobuf:"fixed32,1,opt,name=last,proto3" json:"last,omitempty"`
	Avg10D        float32 `protobuf:"fixed32,2,opt,name=avg10d,proto3" json:"avg10d,omitempty"`
	Avg90D        float32 `protobuf:"fixed32,3,opt,name=avg90d,proto3" json:"avg90d,omitempty"`
	Share10DRatio float32 `protobuf:"fixed32,4,opt,name=share10dRatio,proto3" json:"share10dRatio,omitempty"`
	Share90DRatio float32 `protobuf:"fixed32,5,opt,name=share90dRatio,proto3" json:"share90dRatio,omitempty"`
}

func (x *CompanyStatsReply_Volume) Reset() {
	*x = CompanyStatsReply_Volume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_companies_v1_companies_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyStatsReply_Volume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyStatsReply_Volume) ProtoMessage() {}

func (x *CompanyStatsReply_Volume) ProtoReflect() protoreflect.Message {
	mi := &file_proto_companies_v1_companies_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyStatsReply_Volume.ProtoReflect.Descriptor instead.
func (*CompanyStatsReply_Volume) Descriptor() ([]byte, []int) {
	return file_proto_companies_v1_companies_proto_rawDescGZIP(), []int{4, 2}
}

func (x *CompanyStatsReply_Volume) GetLast() float32 {
	if x != nil {
		return x.Last
	}
	return 0
}

func (x *CompanyStatsReply_Volume) GetAvg10D() float32 {
	if x != nil {
		return x.Avg10D
	}
	return 0
}

func (x *CompanyStatsReply_Volume) GetAvg90D() float32 {
	if x != nil {
		return x.Avg90D
	}
	return 0
}

func (x *CompanyStatsReply_Volume) GetShare10DRatio() float32 {
	if x != nil {
		return x.Share10DRatio
	}
	return 0
}

func (x *CompanyStatsReply_Volume) GetShare90DRatio() float32 {
	if x != nil {
		return x.Share90DRatio
	}
	return 0
}

type CompanyStatsReply_Dividends struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Yield      float32 `protobuf:"fixed32,1,opt,name=yield,proto3" json:"yield,omitempty"`
	Annual     float32 `protobuf:"fixed32,2,opt,name=annual,proto3" json:"annual,omitempty"`
	YieldAvg5Y float32 `protobuf:"fixed32,3,opt,name=yieldAvg5y,proto3" json:"yieldAvg5y,omitempty"`
}

func (x *CompanyStatsReply_Dividends) Reset() {
	*x = CompanyStatsReply_Dividends{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_companies_v1_companies_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyStatsReply_Dividends) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyStatsReply_Dividends) ProtoMessage() {}

func (x *CompanyStatsReply_Dividends) ProtoReflect() protoreflect.Message {
	mi := &file_proto_companies_v1_companies_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyStatsReply_Dividends.ProtoReflect.Descriptor instead.
func (*CompanyStatsReply_Dividends) Descriptor() ([]byte, []int) {
	return file_proto_companies_v1_companies_proto_rawDescGZIP(), []int{4, 3}
}

func (x *CompanyStatsReply_Dividends) GetYield() float32 {
	if x != nil {
		return x.Yield
	}
	return 0
}

func (x *CompanyStatsReply_Dividends) GetAnnual() float32 {
	if x != nil {
		return x.Annual
	}
	return 0
}

func (x *CompanyStatsReply_Dividends) GetYieldAvg5Y() float32 {
	if x != nil {
		return x.YieldAvg5Y
	}
	return 0
}

type CompanySimilarsReply_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Ticker            string `protobuf:"bytes,2,opt,name=ticker,proto3" json:"ticker,omitempty"`
	TickerAlternative string `protobuf:"bytes,3,opt,name=ticker_alternative,json=tickerAlternative,proto3" json:"ticker_alternative,omitempty"`
	Name              string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Exchange          string `protobuf:"bytes,5,opt,name=exchange,proto3" json:"exchange,omitempty"`
	Isin              string `protobuf:"bytes,6,opt,name=isin,proto3" json:"isin,omitempty"`
	MarketCap         int64  `protobuf:"varint,7,opt,name=marketCap,proto3" json:"marketCap,omitempty"`
}

func (x *CompanySimilarsReply_Result) Reset() {
	*x = CompanySimilarsReply_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_companies_v1_companies_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanySimilarsReply_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanySimilarsReply_Result) ProtoMessage() {}

func (x *CompanySimilarsReply_Result) ProtoReflect() protoreflect.Message {
	mi := &file_proto_companies_v1_companies_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanySimilarsReply_Result.ProtoReflect.Descriptor instead.
func (*CompanySimilarsReply_Result) Descriptor() ([]byte, []int) {
	return file_proto_companies_v1_companies_proto_rawDescGZIP(), []int{5, 0}
}

func (x *CompanySimilarsReply_Result) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CompanySimilarsReply_Result) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *CompanySimilarsReply_Result) GetTickerAlternative() string {
	if x != nil {
		return x.TickerAlternative
	}
	return ""
}

func (x *CompanySimilarsReply_Result) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CompanySimilarsReply_Result) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *CompanySimilarsReply_Result) GetIsin() string {
	if x != nil {
		return x.Isin
	}
	return ""
}

func (x *CompanySimilarsReply_Result) GetMarketCap() int64 {
	if x != nil {
		return x.MarketCap
	}
	return 0
}

var File_proto_companies_v1_companies_proto protoreflect.FileDescriptor

var file_proto_companies_v1_companies_proto_rawDesc = []byte{
	0x0a, 0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5a, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x06, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04,
	0x10, 0x01, 0x18, 0x08, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x08,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09,
	0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x08, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x22, 0x6c, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x22, 0x56, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x65, 0x62,
	0x73, 0x69, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x65, 0x62, 0x73,
	0x69, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0xba, 0x06, 0x0a, 0x0c, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x61, 0x6c, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a,
	0x04, 0x69, 0x73, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x73, 0x69,
	0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x12,
	0x3f, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x12, 0x39, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x73, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x69, 0x73, 0x63, 0x61, 0x6c, 0x59, 0x65, 0x61,
	0x72, 0x45, 0x6e, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x66, 0x69, 0x73, 0x63,
	0x61, 0x6c, 0x59, 0x65, 0x61, 0x72, 0x45, 0x6e, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x12, 0x36, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0xb8, 0x01, 0x0a, 0x08, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d,
	0x69, 0x63, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26,
	0x0a, 0x0e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74,
	0x72, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x69,
	0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x1a, 0x40, 0x0a, 0x06, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x22, 0xb1, 0x06, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3e, 0x0a, 0x06,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x73, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x07,
	0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x50,
	0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x12,
	0x47, 0x0a, 0x09, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x2e, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x73, 0x52, 0x09, 0x64,
	0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x3e, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x40, 0x0a, 0x06, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x1a, 0xa7, 0x01, 0x0a, 0x07, 0x50,
	0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69,
	0x6e, 0x59, 0x65, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x6d, 0x69, 0x6e,
	0x59, 0x65, 0x61, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x59, 0x65, 0x61, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x59, 0x65, 0x61, 0x72, 0x12, 0x1e,
	0x0a, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x63, 0x61, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x63, 0x61, 0x70, 0x12, 0x16, 0x0a, 0x06,
	0x62, 0x65, 0x74, 0x61, 0x35, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x62, 0x65,
	0x74, 0x61, 0x35, 0x79, 0x1a, 0x98, 0x01, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x6c,
	0x61, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x67, 0x31, 0x30, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x06, 0x61, 0x76, 0x67, 0x31, 0x30, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x76, 0x67, 0x39, 0x30, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x61, 0x76, 0x67,
	0x39, 0x30, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x31, 0x30, 0x64, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x31, 0x30, 0x64, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x39, 0x30, 0x64, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x39, 0x30, 0x64, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x1a,
	0x59, 0x0a, 0x09, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x79, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x79, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x06, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x79, 0x69,
	0x65, 0x6c, 0x64, 0x41, 0x76, 0x67, 0x35, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a,
	0x79, 0x69, 0x65, 0x6c, 0x64, 0x41, 0x76, 0x67, 0x35, 0x79, 0x22, 0xb5, 0x02, 0x0a, 0x14, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x43, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x69, 0x6d, 0x69, 0x6c,
	0x61, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x1a, 0xc1,
	0x01, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x61, 0x6c, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x69, 0x73, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61,
	0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43,
	0x61, 0x70, 0x32, 0xb8, 0x03, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73,
	0x12, 0x68, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2f, 0x7b, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x7d, 0x2f, 0x7b, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x7d, 0x12, 0x75, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x12, 0x25, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2f, 0x7b, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x7d, 0x2f, 0x7b, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x7d, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x7e, 0x0a, 0x08, 0x53, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x73, 0x12, 0x1c, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x53, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x12, 0x28, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x2f, 0x7b, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x7d, 0x2f,
	0x7b, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x7d, 0x2f, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72,
	0x73, 0x12, 0x4a, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x10, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x0a, 0x12, 0x08, 0x2f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x7a, 0x42, 0x4d, 0x0a,
	0x1b, 0x64, 0x65, 0x76, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x0e, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x56, 0x31, 0x50, 0x01, 0x5a, 0x1c,
	0x67, 0x72, 0x70, 0x63, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_companies_v1_companies_proto_rawDescOnce sync.Once
	file_proto_companies_v1_companies_proto_rawDescData = file_proto_companies_v1_companies_proto_rawDesc
)

func file_proto_companies_v1_companies_proto_rawDescGZIP() []byte {
	file_proto_companies_v1_companies_proto_rawDescOnce.Do(func() {
		file_proto_companies_v1_companies_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_companies_v1_companies_proto_rawDescData)
	})
	return file_proto_companies_v1_companies_proto_rawDescData
}

var file_proto_companies_v1_companies_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_proto_companies_v1_companies_proto_goTypes = []interface{}{
	(*CompanyRequest)(nil),              // 0: companies.v1.CompanyRequest
	(*CompanyAddress)(nil),              // 1: companies.v1.CompanyAddress
	(*CompanyContact)(nil),              // 2: companies.v1.CompanyContact
	(*CompanyReply)(nil),                // 3: companies.v1.CompanyReply
	(*CompanyStatsReply)(nil),           // 4: companies.v1.CompanyStatsReply
	(*CompanySimilarsReply)(nil),        // 5: companies.v1.CompanySimilarsReply
	(*CompanyReply_Activity)(nil),       // 6: companies.v1.CompanyReply.Activity
	(*CompanyReply_Shares)(nil),         // 7: companies.v1.CompanyReply.Shares
	(*CompanyStatsReply_Shares)(nil),    // 8: companies.v1.CompanyStatsReply.Shares
	(*CompanyStatsReply_Pricing)(nil),   // 9: companies.v1.CompanyStatsReply.Pricing
	(*CompanyStatsReply_Volume)(nil),    // 10: companies.v1.CompanyStatsReply.Volume
	(*CompanyStatsReply_Dividends)(nil), // 11: companies.v1.CompanyStatsReply.Dividends
	(*CompanySimilarsReply_Result)(nil), // 12: companies.v1.CompanySimilarsReply.Result
	(*timestamppb.Timestamp)(nil),       // 13: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),               // 14: google.protobuf.Empty
}
var file_proto_companies_v1_companies_proto_depIdxs = []int32{
	6,  // 0: companies.v1.CompanyReply.activity:type_name -> companies.v1.CompanyReply.Activity
	7,  // 1: companies.v1.CompanyReply.shares:type_name -> companies.v1.CompanyReply.Shares
	2,  // 2: companies.v1.CompanyReply.contact:type_name -> companies.v1.CompanyContact
	1,  // 3: companies.v1.CompanyReply.address:type_name -> companies.v1.CompanyAddress
	8,  // 4: companies.v1.CompanyStatsReply.shares:type_name -> companies.v1.CompanyStatsReply.Shares
	9,  // 5: companies.v1.CompanyStatsReply.pricing:type_name -> companies.v1.CompanyStatsReply.Pricing
	11, // 6: companies.v1.CompanyStatsReply.dividends:type_name -> companies.v1.CompanyStatsReply.Dividends
	10, // 7: companies.v1.CompanyStatsReply.volume:type_name -> companies.v1.CompanyStatsReply.Volume
	13, // 8: companies.v1.CompanyStatsReply.date:type_name -> google.protobuf.Timestamp
	12, // 9: companies.v1.CompanySimilarsReply.results:type_name -> companies.v1.CompanySimilarsReply.Result
	0,  // 10: companies.v1.Companies.Get:input_type -> companies.v1.CompanyRequest
	0,  // 11: companies.v1.Companies.Stats:input_type -> companies.v1.CompanyRequest
	0,  // 12: companies.v1.Companies.Similars:input_type -> companies.v1.CompanyRequest
	14, // 13: companies.v1.Companies.Health:input_type -> google.protobuf.Empty
	3,  // 14: companies.v1.Companies.Get:output_type -> companies.v1.CompanyReply
	4,  // 15: companies.v1.Companies.Stats:output_type -> companies.v1.CompanyStatsReply
	5,  // 16: companies.v1.Companies.Similars:output_type -> companies.v1.CompanySimilarsReply
	14, // 17: companies.v1.Companies.Health:output_type -> google.protobuf.Empty
	14, // [14:18] is the sub-list for method output_type
	10, // [10:14] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_proto_companies_v1_companies_proto_init() }
func file_proto_companies_v1_companies_proto_init() {
	if File_proto_companies_v1_companies_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_companies_v1_companies_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_companies_v1_companies_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_companies_v1_companies_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyContact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_companies_v1_companies_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_companies_v1_companies_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyStatsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_companies_v1_companies_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanySimilarsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_companies_v1_companies_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyReply_Activity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_companies_v1_companies_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyReply_Shares); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_companies_v1_companies_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyStatsReply_Shares); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_companies_v1_companies_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyStatsReply_Pricing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_companies_v1_companies_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyStatsReply_Volume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_companies_v1_companies_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyStatsReply_Dividends); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_companies_v1_companies_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanySimilarsReply_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_companies_v1_companies_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_companies_v1_companies_proto_goTypes,
		DependencyIndexes: file_proto_companies_v1_companies_proto_depIdxs,
		MessageInfos:      file_proto_companies_v1_companies_proto_msgTypes,
	}.Build()
	File_proto_companies_v1_companies_proto = out.File
	file_proto_companies_v1_companies_proto_rawDesc = nil
	file_proto_companies_v1_companies_proto_goTypes = nil
	file_proto_companies_v1_companies_proto_depIdxs = nil
}
