// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/indexes/v1/indexes.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on IndexesRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IndexesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IndexesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IndexesRequestMultiError,
// or nil if none found.
func (m *IndexesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IndexesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetRef()); l < 2 || l > 32 {
		err := IndexesRequestValidationError{
			field:  "Ref",
			reason: "value length must be between 2 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IndexesRequestMultiError(errors)
	}

	return nil
}

// IndexesRequestMultiError is an error wrapping multiple validation errors
// returned by IndexesRequest.ValidateAll() if the designated constraints
// aren't met.
type IndexesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IndexesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IndexesRequestMultiError) AllErrors() []error { return m }

// IndexesRequestValidationError is the validation error returned by
// IndexesRequest.Validate if the designated constraints aren't met.
type IndexesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IndexesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IndexesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IndexesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IndexesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IndexesRequestValidationError) ErrorName() string { return "IndexesRequestValidationError" }

// Error satisfies the builtin error interface
func (e IndexesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIndexesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IndexesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IndexesRequestValidationError{}

// Validate checks the field values on IndexesSearchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IndexesSearchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IndexesSearchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IndexesSearchRequestMultiError, or nil if none found.
func (m *IndexesSearchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IndexesSearchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetCurrency()) != 3 {
		err := IndexesSearchRequestValidationError{
			field:  "Currency",
			reason: "value length must be 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	// no validation rules for Public

	if m.GetPage() == nil {
		err := IndexesSearchRequestValidationError{
			field:  "Page",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IndexesSearchRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IndexesSearchRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IndexesSearchRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IndexesSearchRequestMultiError(errors)
	}

	return nil
}

// IndexesSearchRequestMultiError is an error wrapping multiple validation
// errors returned by IndexesSearchRequest.ValidateAll() if the designated
// constraints aren't met.
type IndexesSearchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IndexesSearchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IndexesSearchRequestMultiError) AllErrors() []error { return m }

// IndexesSearchRequestValidationError is the validation error returned by
// IndexesSearchRequest.Validate if the designated constraints aren't met.
type IndexesSearchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IndexesSearchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IndexesSearchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IndexesSearchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IndexesSearchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IndexesSearchRequestValidationError) ErrorName() string {
	return "IndexesSearchRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IndexesSearchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIndexesSearchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IndexesSearchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IndexesSearchRequestValidationError{}

// Validate checks the field values on IndexesCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IndexesCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IndexesCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IndexesCreateRequestMultiError, or nil if none found.
func (m *IndexesCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IndexesCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetRef()); l < 1 || l > 32 {
		err := IndexesCreateRequestValidationError{
			field:  "Ref",
			reason: "value length must be between 1 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetRequest()); l < 8 || l > 8196 {
		err := IndexesCreateRequestValidationError{
			field:  "Request",
			reason: "value length must be between 8 and 8196 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Public

	if len(errors) > 0 {
		return IndexesCreateRequestMultiError(errors)
	}

	return nil
}

// IndexesCreateRequestMultiError is an error wrapping multiple validation
// errors returned by IndexesCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type IndexesCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IndexesCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IndexesCreateRequestMultiError) AllErrors() []error { return m }

// IndexesCreateRequestValidationError is the validation error returned by
// IndexesCreateRequest.Validate if the designated constraints aren't met.
type IndexesCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IndexesCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IndexesCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IndexesCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IndexesCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IndexesCreateRequestValidationError) ErrorName() string {
	return "IndexesCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IndexesCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIndexesCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IndexesCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IndexesCreateRequestValidationError{}

// Validate checks the field values on IndexesReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IndexesReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IndexesReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IndexesReplyMultiError, or
// nil if none found.
func (m *IndexesReply) ValidateAll() error {
	return m.validate(true)
}

func (m *IndexesReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ref

	// no validation rules for Public

	for idx, item := range m.GetCompanies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IndexesReplyValidationError{
						field:  fmt.Sprintf("Companies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IndexesReplyValidationError{
						field:  fmt.Sprintf("Companies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IndexesReplyValidationError{
					field:  fmt.Sprintf("Companies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IndexesReplyValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IndexesReplyValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IndexesReplyValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IndexesReplyValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IndexesReplyValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IndexesReplyValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IndexesReplyMultiError(errors)
	}

	return nil
}

// IndexesReplyMultiError is an error wrapping multiple validation errors
// returned by IndexesReply.ValidateAll() if the designated constraints aren't met.
type IndexesReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IndexesReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IndexesReplyMultiError) AllErrors() []error { return m }

// IndexesReplyValidationError is the validation error returned by
// IndexesReply.Validate if the designated constraints aren't met.
type IndexesReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IndexesReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IndexesReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IndexesReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IndexesReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IndexesReplyValidationError) ErrorName() string { return "IndexesReplyValidationError" }

// Error satisfies the builtin error interface
func (e IndexesReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIndexesReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IndexesReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IndexesReplyValidationError{}

// Validate checks the field values on IndexesReplies with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IndexesReplies) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IndexesReplies with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IndexesRepliesMultiError,
// or nil if none found.
func (m *IndexesReplies) ValidateAll() error {
	return m.validate(true)
}

func (m *IndexesReplies) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IndexesRepliesValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IndexesRepliesValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IndexesRepliesValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return IndexesRepliesMultiError(errors)
	}

	return nil
}

// IndexesRepliesMultiError is an error wrapping multiple validation errors
// returned by IndexesReplies.ValidateAll() if the designated constraints
// aren't met.
type IndexesRepliesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IndexesRepliesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IndexesRepliesMultiError) AllErrors() []error { return m }

// IndexesRepliesValidationError is the validation error returned by
// IndexesReplies.Validate if the designated constraints aren't met.
type IndexesRepliesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IndexesRepliesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IndexesRepliesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IndexesRepliesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IndexesRepliesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IndexesRepliesValidationError) ErrorName() string { return "IndexesRepliesValidationError" }

// Error satisfies the builtin error interface
func (e IndexesRepliesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIndexesReplies.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IndexesRepliesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IndexesRepliesValidationError{}

// Validate checks the field values on IndexesSearchReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IndexesSearchReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IndexesSearchReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IndexesSearchReplyMultiError, or nil if none found.
func (m *IndexesSearchReply) ValidateAll() error {
	return m.validate(true)
}

func (m *IndexesSearchReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ref

	if len(errors) > 0 {
		return IndexesSearchReplyMultiError(errors)
	}

	return nil
}

// IndexesSearchReplyMultiError is an error wrapping multiple validation errors
// returned by IndexesSearchReply.ValidateAll() if the designated constraints
// aren't met.
type IndexesSearchReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IndexesSearchReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IndexesSearchReplyMultiError) AllErrors() []error { return m }

// IndexesSearchReplyValidationError is the validation error returned by
// IndexesSearchReply.Validate if the designated constraints aren't met.
type IndexesSearchReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IndexesSearchReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IndexesSearchReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IndexesSearchReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IndexesSearchReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IndexesSearchReplyValidationError) ErrorName() string {
	return "IndexesSearchReplyValidationError"
}

// Error satisfies the builtin error interface
func (e IndexesSearchReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIndexesSearchReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IndexesSearchReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IndexesSearchReplyValidationError{}

// Validate checks the field values on IndexesSearchReplies with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IndexesSearchReplies) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IndexesSearchReplies with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IndexesSearchRepliesMultiError, or nil if none found.
func (m *IndexesSearchReplies) ValidateAll() error {
	return m.validate(true)
}

func (m *IndexesSearchReplies) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IndexesSearchRepliesValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IndexesSearchRepliesValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IndexesSearchRepliesValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return IndexesSearchRepliesMultiError(errors)
	}

	return nil
}

// IndexesSearchRepliesMultiError is an error wrapping multiple validation
// errors returned by IndexesSearchReplies.ValidateAll() if the designated
// constraints aren't met.
type IndexesSearchRepliesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IndexesSearchRepliesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IndexesSearchRepliesMultiError) AllErrors() []error { return m }

// IndexesSearchRepliesValidationError is the validation error returned by
// IndexesSearchReplies.Validate if the designated constraints aren't met.
type IndexesSearchRepliesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IndexesSearchRepliesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IndexesSearchRepliesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IndexesSearchRepliesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IndexesSearchRepliesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IndexesSearchRepliesValidationError) ErrorName() string {
	return "IndexesSearchRepliesValidationError"
}

// Error satisfies the builtin error interface
func (e IndexesSearchRepliesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIndexesSearchReplies.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IndexesSearchRepliesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IndexesSearchRepliesValidationError{}

// Validate checks the field values on IndexesSearchRequest_Page with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IndexesSearchRequest_Page) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IndexesSearchRequest_Page with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IndexesSearchRequest_PageMultiError, or nil if none found.
func (m *IndexesSearchRequest_Page) ValidateAll() error {
	return m.validate(true)
}

func (m *IndexesSearchRequest_Page) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetNumber(); val <= 0 || val > 10000 {
		err := IndexesSearchRequest_PageValidationError{
			field:  "Number",
			reason: "value must be inside range (0, 10000]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetLimit(); val <= 0 || val > 150 {
		err := IndexesSearchRequest_PageValidationError{
			field:  "Limit",
			reason: "value must be inside range (0, 150]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IndexesSearchRequest_PageMultiError(errors)
	}

	return nil
}

// IndexesSearchRequest_PageMultiError is an error wrapping multiple validation
// errors returned by IndexesSearchRequest_Page.ValidateAll() if the
// designated constraints aren't met.
type IndexesSearchRequest_PageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IndexesSearchRequest_PageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IndexesSearchRequest_PageMultiError) AllErrors() []error { return m }

// IndexesSearchRequest_PageValidationError is the validation error returned by
// IndexesSearchRequest_Page.Validate if the designated constraints aren't met.
type IndexesSearchRequest_PageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IndexesSearchRequest_PageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IndexesSearchRequest_PageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IndexesSearchRequest_PageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IndexesSearchRequest_PageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IndexesSearchRequest_PageValidationError) ErrorName() string {
	return "IndexesSearchRequest_PageValidationError"
}

// Error satisfies the builtin error interface
func (e IndexesSearchRequest_PageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIndexesSearchRequest_Page.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IndexesSearchRequest_PageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IndexesSearchRequest_PageValidationError{}

// Validate checks the field values on IndexesReply_Company with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IndexesReply_Company) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IndexesReply_Company with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IndexesReply_CompanyMultiError, or nil if none found.
func (m *IndexesReply_Company) ValidateAll() error {
	return m.validate(true)
}

func (m *IndexesReply_Company) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Ticker

	// no validation rules for TickerAlternative

	// no validation rules for Name

	// no validation rules for Isin

	// no validation rules for Exchange

	// no validation rules for Adr

	if all {
		switch v := interface{}(m.GetActivity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IndexesReply_CompanyValidationError{
					field:  "Activity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IndexesReply_CompanyValidationError{
					field:  "Activity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetActivity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IndexesReply_CompanyValidationError{
				field:  "Activity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetShares()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IndexesReply_CompanyValidationError{
					field:  "Shares",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IndexesReply_CompanyValidationError{
					field:  "Shares",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShares()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IndexesReply_CompanyValidationError{
				field:  "Shares",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPricing()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IndexesReply_CompanyValidationError{
					field:  "Pricing",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IndexesReply_CompanyValidationError{
					field:  "Pricing",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPricing()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IndexesReply_CompanyValidationError{
				field:  "Pricing",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDividends()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IndexesReply_CompanyValidationError{
					field:  "Dividends",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IndexesReply_CompanyValidationError{
					field:  "Dividends",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDividends()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IndexesReply_CompanyValidationError{
				field:  "Dividends",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetVolume()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IndexesReply_CompanyValidationError{
					field:  "Volume",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IndexesReply_CompanyValidationError{
					field:  "Volume",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVolume()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IndexesReply_CompanyValidationError{
				field:  "Volume",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IndexesReply_CompanyMultiError(errors)
	}

	return nil
}

// IndexesReply_CompanyMultiError is an error wrapping multiple validation
// errors returned by IndexesReply_Company.ValidateAll() if the designated
// constraints aren't met.
type IndexesReply_CompanyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IndexesReply_CompanyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IndexesReply_CompanyMultiError) AllErrors() []error { return m }

// IndexesReply_CompanyValidationError is the validation error returned by
// IndexesReply_Company.Validate if the designated constraints aren't met.
type IndexesReply_CompanyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IndexesReply_CompanyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IndexesReply_CompanyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IndexesReply_CompanyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IndexesReply_CompanyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IndexesReply_CompanyValidationError) ErrorName() string {
	return "IndexesReply_CompanyValidationError"
}

// Error satisfies the builtin error interface
func (e IndexesReply_CompanyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIndexesReply_Company.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IndexesReply_CompanyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IndexesReply_CompanyValidationError{}

// Validate checks the field values on IndexesReply_Company_Activity with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IndexesReply_Company_Activity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IndexesReply_Company_Activity with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IndexesReply_Company_ActivityMultiError, or nil if none found.
func (m *IndexesReply_Company_Activity) ValidateAll() error {
	return m.validate(true)
}

func (m *IndexesReply_Company_Activity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EconomicSector

	// no validation rules for BusinessSector

	// no validation rules for IndustryGroup

	// no validation rules for Industry

	// no validation rules for Activity

	if len(errors) > 0 {
		return IndexesReply_Company_ActivityMultiError(errors)
	}

	return nil
}

// IndexesReply_Company_ActivityMultiError is an error wrapping multiple
// validation errors returned by IndexesReply_Company_Activity.ValidateAll()
// if the designated constraints aren't met.
type IndexesReply_Company_ActivityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IndexesReply_Company_ActivityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IndexesReply_Company_ActivityMultiError) AllErrors() []error { return m }

// IndexesReply_Company_ActivityValidationError is the validation error
// returned by IndexesReply_Company_Activity.Validate if the designated
// constraints aren't met.
type IndexesReply_Company_ActivityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IndexesReply_Company_ActivityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IndexesReply_Company_ActivityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IndexesReply_Company_ActivityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IndexesReply_Company_ActivityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IndexesReply_Company_ActivityValidationError) ErrorName() string {
	return "IndexesReply_Company_ActivityValidationError"
}

// Error satisfies the builtin error interface
func (e IndexesReply_Company_ActivityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIndexesReply_Company_Activity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IndexesReply_Company_ActivityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IndexesReply_Company_ActivityValidationError{}

// Validate checks the field values on IndexesReply_Company_Shares with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IndexesReply_Company_Shares) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IndexesReply_Company_Shares with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IndexesReply_Company_SharesMultiError, or nil if none found.
func (m *IndexesReply_Company_Shares) ValidateAll() error {
	return m.validate(true)
}

func (m *IndexesReply_Company_Shares) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Outstanding

	// no validation rules for Float

	if len(errors) > 0 {
		return IndexesReply_Company_SharesMultiError(errors)
	}

	return nil
}

// IndexesReply_Company_SharesMultiError is an error wrapping multiple
// validation errors returned by IndexesReply_Company_Shares.ValidateAll() if
// the designated constraints aren't met.
type IndexesReply_Company_SharesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IndexesReply_Company_SharesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IndexesReply_Company_SharesMultiError) AllErrors() []error { return m }

// IndexesReply_Company_SharesValidationError is the validation error returned
// by IndexesReply_Company_Shares.Validate if the designated constraints
// aren't met.
type IndexesReply_Company_SharesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IndexesReply_Company_SharesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IndexesReply_Company_SharesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IndexesReply_Company_SharesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IndexesReply_Company_SharesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IndexesReply_Company_SharesValidationError) ErrorName() string {
	return "IndexesReply_Company_SharesValidationError"
}

// Error satisfies the builtin error interface
func (e IndexesReply_Company_SharesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIndexesReply_Company_Shares.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IndexesReply_Company_SharesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IndexesReply_Company_SharesValidationError{}

// Validate checks the field values on IndexesReply_Company_Pricing with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IndexesReply_Company_Pricing) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IndexesReply_Company_Pricing with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IndexesReply_Company_PricingMultiError, or nil if none found.
func (m *IndexesReply_Company_Pricing) ValidateAll() error {
	return m.validate(true)
}

func (m *IndexesReply_Company_Pricing) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Last

	// no validation rules for MinYear

	// no validation rules for MaxYear

	// no validation rules for ReturnYear

	// no validation rules for Marketcap

	// no validation rules for Beta5Y

	if len(errors) > 0 {
		return IndexesReply_Company_PricingMultiError(errors)
	}

	return nil
}

// IndexesReply_Company_PricingMultiError is an error wrapping multiple
// validation errors returned by IndexesReply_Company_Pricing.ValidateAll() if
// the designated constraints aren't met.
type IndexesReply_Company_PricingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IndexesReply_Company_PricingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IndexesReply_Company_PricingMultiError) AllErrors() []error { return m }

// IndexesReply_Company_PricingValidationError is the validation error returned
// by IndexesReply_Company_Pricing.Validate if the designated constraints
// aren't met.
type IndexesReply_Company_PricingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IndexesReply_Company_PricingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IndexesReply_Company_PricingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IndexesReply_Company_PricingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IndexesReply_Company_PricingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IndexesReply_Company_PricingValidationError) ErrorName() string {
	return "IndexesReply_Company_PricingValidationError"
}

// Error satisfies the builtin error interface
func (e IndexesReply_Company_PricingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIndexesReply_Company_Pricing.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IndexesReply_Company_PricingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IndexesReply_Company_PricingValidationError{}

// Validate checks the field values on IndexesReply_Company_Volume with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IndexesReply_Company_Volume) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IndexesReply_Company_Volume with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IndexesReply_Company_VolumeMultiError, or nil if none found.
func (m *IndexesReply_Company_Volume) ValidateAll() error {
	return m.validate(true)
}

func (m *IndexesReply_Company_Volume) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Last

	// no validation rules for Avg10D

	// no validation rules for Avg90D

	// no validation rules for Share10DRatio

	// no validation rules for Share90DRatio

	if len(errors) > 0 {
		return IndexesReply_Company_VolumeMultiError(errors)
	}

	return nil
}

// IndexesReply_Company_VolumeMultiError is an error wrapping multiple
// validation errors returned by IndexesReply_Company_Volume.ValidateAll() if
// the designated constraints aren't met.
type IndexesReply_Company_VolumeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IndexesReply_Company_VolumeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IndexesReply_Company_VolumeMultiError) AllErrors() []error { return m }

// IndexesReply_Company_VolumeValidationError is the validation error returned
// by IndexesReply_Company_Volume.Validate if the designated constraints
// aren't met.
type IndexesReply_Company_VolumeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IndexesReply_Company_VolumeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IndexesReply_Company_VolumeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IndexesReply_Company_VolumeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IndexesReply_Company_VolumeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IndexesReply_Company_VolumeValidationError) ErrorName() string {
	return "IndexesReply_Company_VolumeValidationError"
}

// Error satisfies the builtin error interface
func (e IndexesReply_Company_VolumeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIndexesReply_Company_Volume.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IndexesReply_Company_VolumeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IndexesReply_Company_VolumeValidationError{}

// Validate checks the field values on IndexesReply_Company_Dividends with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IndexesReply_Company_Dividends) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IndexesReply_Company_Dividends with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IndexesReply_Company_DividendsMultiError, or nil if none found.
func (m *IndexesReply_Company_Dividends) ValidateAll() error {
	return m.validate(true)
}

func (m *IndexesReply_Company_Dividends) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Yield

	// no validation rules for Annual

	if len(errors) > 0 {
		return IndexesReply_Company_DividendsMultiError(errors)
	}

	return nil
}

// IndexesReply_Company_DividendsMultiError is an error wrapping multiple
// validation errors returned by IndexesReply_Company_Dividends.ValidateAll()
// if the designated constraints aren't met.
type IndexesReply_Company_DividendsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IndexesReply_Company_DividendsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IndexesReply_Company_DividendsMultiError) AllErrors() []error { return m }

// IndexesReply_Company_DividendsValidationError is the validation error
// returned by IndexesReply_Company_Dividends.Validate if the designated
// constraints aren't met.
type IndexesReply_Company_DividendsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IndexesReply_Company_DividendsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IndexesReply_Company_DividendsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IndexesReply_Company_DividendsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IndexesReply_Company_DividendsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IndexesReply_Company_DividendsValidationError) ErrorName() string {
	return "IndexesReply_Company_DividendsValidationError"
}

// Error satisfies the builtin error interface
func (e IndexesReply_Company_DividendsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIndexesReply_Company_Dividends.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IndexesReply_Company_DividendsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IndexesReply_Company_DividendsValidationError{}
