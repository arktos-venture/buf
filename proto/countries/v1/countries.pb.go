// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.21.2
// source: proto/countries/v1/countries.proto

package v1Countries

import (
	v11 "github.com/arktos-venture/buf/proto/exchanges/v1"
	v12 "github.com/arktos-venture/buf/proto/indices/v1"
	v1 "github.com/arktos-venture/buf/proto/screener/v1"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CountryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Country string `protobuf:"bytes,1,opt,name=country,proto3" json:"country,omitempty"`
}

func (x *CountryRequest) Reset() {
	*x = CountryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_countries_v1_countries_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountryRequest) ProtoMessage() {}

func (x *CountryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_countries_v1_countries_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountryRequest.ProtoReflect.Descriptor instead.
func (*CountryRequest) Descriptor() ([]byte, []int) {
	return file_proto_countries_v1_countries_proto_rawDescGZIP(), []int{0}
}

func (x *CountryRequest) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

type CountrySearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Country   []string `protobuf:"bytes,1,rep,name=country,proto3" json:"country,omitempty"`
	Continent []string `protobuf:"bytes,2,rep,name=continent,proto3" json:"continent,omitempty"`
}

func (x *CountrySearchRequest) Reset() {
	*x = CountrySearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_countries_v1_countries_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountrySearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountrySearchRequest) ProtoMessage() {}

func (x *CountrySearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_countries_v1_countries_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountrySearchRequest.ProtoReflect.Descriptor instead.
func (*CountrySearchRequest) Descriptor() ([]byte, []int) {
	return file_proto_countries_v1_countries_proto_rawDescGZIP(), []int{1}
}

func (x *CountrySearchRequest) GetCountry() []string {
	if x != nil {
		return x.Country
	}
	return nil
}

func (x *CountrySearchRequest) GetContinent() []string {
	if x != nil {
		return x.Continent
	}
	return nil
}

type CountryIndicatorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Country   string              `protobuf:"bytes,1,opt,name=country,proto3" json:"country,omitempty"`
	Indicator v1.CountryIndicator `protobuf:"varint,2,opt,name=indicator,proto3,enum=screener.v1.CountryIndicator" json:"indicator,omitempty"`
}

func (x *CountryIndicatorRequest) Reset() {
	*x = CountryIndicatorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_countries_v1_countries_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountryIndicatorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountryIndicatorRequest) ProtoMessage() {}

func (x *CountryIndicatorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_countries_v1_countries_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountryIndicatorRequest.ProtoReflect.Descriptor instead.
func (*CountryIndicatorRequest) Descriptor() ([]byte, []int) {
	return file_proto_countries_v1_countries_proto_rawDescGZIP(), []int{2}
}

func (x *CountryIndicatorRequest) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *CountryIndicatorRequest) GetIndicator() v1.CountryIndicator {
	if x != nil {
		return x.Indicator
	}
	return v1.CountryIndicator(0)
}

type CountryReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Geo         *CountryReply_Geo             `protobuf:"bytes,2,opt,name=geo,proto3" json:"geo,omitempty"`
	Code        *CountryReply_Code            `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	EuMember    bool                          `protobuf:"varint,4,opt,name=euMember,proto3" json:"euMember,omitempty"`
	Tlds        []string                      `protobuf:"bytes,5,rep,name=tlds,proto3" json:"tlds,omitempty"`
	Languages   map[string]string             `protobuf:"bytes,6,rep,name=languages,proto3" json:"languages,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Currencies  []string                      `protobuf:"bytes,7,rep,name=currencies,proto3" json:"currencies,omitempty"`
	Exchanges   []*v11.ExchangeReplies_Result `protobuf:"bytes,8,rep,name=exchanges,proto3" json:"exchanges,omitempty"`
	Indices     []*v12.IndiceReplies_Result   `protobuf:"bytes,9,rep,name=indices,proto3" json:"indices,omitempty"`
	SubDivision []*CountryReply_Division      `protobuf:"bytes,10,rep,name=subDivision,proto3" json:"subDivision,omitempty"`
	Borders     []string                      `protobuf:"bytes,11,rep,name=borders,proto3" json:"borders,omitempty"`
}

func (x *CountryReply) Reset() {
	*x = CountryReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_countries_v1_countries_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountryReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountryReply) ProtoMessage() {}

func (x *CountryReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_countries_v1_countries_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountryReply.ProtoReflect.Descriptor instead.
func (*CountryReply) Descriptor() ([]byte, []int) {
	return file_proto_countries_v1_countries_proto_rawDescGZIP(), []int{3}
}

func (x *CountryReply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CountryReply) GetGeo() *CountryReply_Geo {
	if x != nil {
		return x.Geo
	}
	return nil
}

func (x *CountryReply) GetCode() *CountryReply_Code {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *CountryReply) GetEuMember() bool {
	if x != nil {
		return x.EuMember
	}
	return false
}

func (x *CountryReply) GetTlds() []string {
	if x != nil {
		return x.Tlds
	}
	return nil
}

func (x *CountryReply) GetLanguages() map[string]string {
	if x != nil {
		return x.Languages
	}
	return nil
}

func (x *CountryReply) GetCurrencies() []string {
	if x != nil {
		return x.Currencies
	}
	return nil
}

func (x *CountryReply) GetExchanges() []*v11.ExchangeReplies_Result {
	if x != nil {
		return x.Exchanges
	}
	return nil
}

func (x *CountryReply) GetIndices() []*v12.IndiceReplies_Result {
	if x != nil {
		return x.Indices
	}
	return nil
}

func (x *CountryReply) GetSubDivision() []*CountryReply_Division {
	if x != nil {
		return x.SubDivision
	}
	return nil
}

func (x *CountryReply) GetBorders() []string {
	if x != nil {
		return x.Borders
	}
	return nil
}

type CountryReplies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*CountryReply `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Total   int64           `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *CountryReplies) Reset() {
	*x = CountryReplies{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_countries_v1_countries_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountryReplies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountryReplies) ProtoMessage() {}

func (x *CountryReplies) ProtoReflect() protoreflect.Message {
	mi := &file_proto_countries_v1_countries_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountryReplies.ProtoReflect.Descriptor instead.
func (*CountryReplies) Descriptor() ([]byte, []int) {
	return file_proto_countries_v1_countries_proto_rawDescGZIP(), []int{4}
}

func (x *CountryReplies) GetResults() []*CountryReply {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *CountryReplies) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type CountryIndicatorReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Indicator v1.CountryIndicator           `protobuf:"varint,1,opt,name=indicator,proto3,enum=screener.v1.CountryIndicator" json:"indicator,omitempty"`
	Country   string                        `protobuf:"bytes,2,opt,name=country,proto3" json:"country,omitempty"`
	Results   *CountryIndicatorReply_Result `protobuf:"bytes,3,opt,name=results,proto3" json:"results,omitempty"`
	Total     int64                         `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *CountryIndicatorReply) Reset() {
	*x = CountryIndicatorReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_countries_v1_countries_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountryIndicatorReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountryIndicatorReply) ProtoMessage() {}

func (x *CountryIndicatorReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_countries_v1_countries_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountryIndicatorReply.ProtoReflect.Descriptor instead.
func (*CountryIndicatorReply) Descriptor() ([]byte, []int) {
	return file_proto_countries_v1_countries_proto_rawDescGZIP(), []int{5}
}

func (x *CountryIndicatorReply) GetIndicator() v1.CountryIndicator {
	if x != nil {
		return x.Indicator
	}
	return v1.CountryIndicator(0)
}

func (x *CountryIndicatorReply) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *CountryIndicatorReply) GetResults() *CountryIndicatorReply_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *CountryIndicatorReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type CountryReply_Geo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region    string  `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	SubRegion string  `protobuf:"bytes,2,opt,name=subRegion,proto3" json:"subRegion,omitempty"`
	Continent string  `protobuf:"bytes,3,opt,name=continent,proto3" json:"continent,omitempty"`
	Capital   string  `protobuf:"bytes,4,opt,name=capital,proto3" json:"capital,omitempty"`
	Area      float32 `protobuf:"fixed32,5,opt,name=Area,proto3" json:"Area,omitempty"`
}

func (x *CountryReply_Geo) Reset() {
	*x = CountryReply_Geo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_countries_v1_countries_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountryReply_Geo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountryReply_Geo) ProtoMessage() {}

func (x *CountryReply_Geo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_countries_v1_countries_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountryReply_Geo.ProtoReflect.Descriptor instead.
func (*CountryReply_Geo) Descriptor() ([]byte, []int) {
	return file_proto_countries_v1_countries_proto_rawDescGZIP(), []int{3, 0}
}

func (x *CountryReply_Geo) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *CountryReply_Geo) GetSubRegion() string {
	if x != nil {
		return x.SubRegion
	}
	return ""
}

func (x *CountryReply_Geo) GetContinent() string {
	if x != nil {
		return x.Continent
	}
	return ""
}

func (x *CountryReply_Geo) GetCapital() string {
	if x != nil {
		return x.Capital
	}
	return ""
}

func (x *CountryReply_Geo) GetArea() float32 {
	if x != nil {
		return x.Area
	}
	return 0
}

type CountryReply_Code struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alpha2              string   `protobuf:"bytes,1,opt,name=alpha2,proto3" json:"alpha2,omitempty"`
	Alpha3              string   `protobuf:"bytes,2,opt,name=alpha3,proto3" json:"alpha3,omitempty"`
	Cioc                string   `protobuf:"bytes,3,opt,name=cioc,proto3" json:"cioc,omitempty"`
	Ccn3                string   `protobuf:"bytes,4,opt,name=ccn3,proto3" json:"ccn3,omitempty"`
	CallingCodes        []string `protobuf:"bytes,5,rep,name=callingCodes,proto3" json:"callingCodes,omitempty"`
	InternationalPrefix string   `protobuf:"bytes,6,opt,name=internationalPrefix,proto3" json:"internationalPrefix,omitempty"`
}

func (x *CountryReply_Code) Reset() {
	*x = CountryReply_Code{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_countries_v1_countries_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountryReply_Code) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountryReply_Code) ProtoMessage() {}

func (x *CountryReply_Code) ProtoReflect() protoreflect.Message {
	mi := &file_proto_countries_v1_countries_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountryReply_Code.ProtoReflect.Descriptor instead.
func (*CountryReply_Code) Descriptor() ([]byte, []int) {
	return file_proto_countries_v1_countries_proto_rawDescGZIP(), []int{3, 1}
}

func (x *CountryReply_Code) GetAlpha2() string {
	if x != nil {
		return x.Alpha2
	}
	return ""
}

func (x *CountryReply_Code) GetAlpha3() string {
	if x != nil {
		return x.Alpha3
	}
	return ""
}

func (x *CountryReply_Code) GetCioc() string {
	if x != nil {
		return x.Cioc
	}
	return ""
}

func (x *CountryReply_Code) GetCcn3() string {
	if x != nil {
		return x.Ccn3
	}
	return ""
}

func (x *CountryReply_Code) GetCallingCodes() []string {
	if x != nil {
		return x.CallingCodes
	}
	return nil
}

func (x *CountryReply_Code) GetInternationalPrefix() string {
	if x != nil {
		return x.InternationalPrefix
	}
	return ""
}

type CountryReply_Division struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string                            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Code        string                            `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Coordinates *CountryReply_Division_Coordinate `protobuf:"bytes,3,opt,name=coordinates,proto3" json:"coordinates,omitempty"`
}

func (x *CountryReply_Division) Reset() {
	*x = CountryReply_Division{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_countries_v1_countries_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountryReply_Division) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountryReply_Division) ProtoMessage() {}

func (x *CountryReply_Division) ProtoReflect() protoreflect.Message {
	mi := &file_proto_countries_v1_countries_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountryReply_Division.ProtoReflect.Descriptor instead.
func (*CountryReply_Division) Descriptor() ([]byte, []int) {
	return file_proto_countries_v1_countries_proto_rawDescGZIP(), []int{3, 2}
}

func (x *CountryReply_Division) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CountryReply_Division) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *CountryReply_Division) GetCoordinates() *CountryReply_Division_Coordinate {
	if x != nil {
		return x.Coordinates
	}
	return nil
}

type CountryReply_Division_Coordinate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinLongitude float32 `protobuf:"fixed32,1,opt,name=minLongitude,proto3" json:"minLongitude,omitempty"`
	MinLatitude  float32 `protobuf:"fixed32,2,opt,name=minLatitude,proto3" json:"minLatitude,omitempty"`
	MaxLongitude float32 `protobuf:"fixed32,3,opt,name=maxLongitude,proto3" json:"maxLongitude,omitempty"`
	MaxLatitude  float32 `protobuf:"fixed32,4,opt,name=maxLatitude,proto3" json:"maxLatitude,omitempty"`
	Latitude     float32 `protobuf:"fixed32,5,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude    float32 `protobuf:"fixed32,6,opt,name=longitude,proto3" json:"longitude,omitempty"`
}

func (x *CountryReply_Division_Coordinate) Reset() {
	*x = CountryReply_Division_Coordinate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_countries_v1_countries_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountryReply_Division_Coordinate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountryReply_Division_Coordinate) ProtoMessage() {}

func (x *CountryReply_Division_Coordinate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_countries_v1_countries_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountryReply_Division_Coordinate.ProtoReflect.Descriptor instead.
func (*CountryReply_Division_Coordinate) Descriptor() ([]byte, []int) {
	return file_proto_countries_v1_countries_proto_rawDescGZIP(), []int{3, 2, 0}
}

func (x *CountryReply_Division_Coordinate) GetMinLongitude() float32 {
	if x != nil {
		return x.MinLongitude
	}
	return 0
}

func (x *CountryReply_Division_Coordinate) GetMinLatitude() float32 {
	if x != nil {
		return x.MinLatitude
	}
	return 0
}

func (x *CountryReply_Division_Coordinate) GetMaxLongitude() float32 {
	if x != nil {
		return x.MaxLongitude
	}
	return 0
}

func (x *CountryReply_Division_Coordinate) GetMaxLatitude() float32 {
	if x != nil {
		return x.MaxLatitude
	}
	return 0
}

func (x *CountryReply_Division_Coordinate) GetLatitude() float32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *CountryReply_Division_Coordinate) GetLongitude() float32 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

type CountryIndicatorReply_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     []float32                `protobuf:"fixed32,1,rep,packed,name=value,proto3" json:"value,omitempty"`
	Forecast  []float32                `protobuf:"fixed32,2,rep,packed,name=forecast,proto3" json:"forecast,omitempty"`
	CreatedAt []*timestamppb.Timestamp `protobuf:"bytes,3,rep,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *CountryIndicatorReply_Result) Reset() {
	*x = CountryIndicatorReply_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_countries_v1_countries_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountryIndicatorReply_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountryIndicatorReply_Result) ProtoMessage() {}

func (x *CountryIndicatorReply_Result) ProtoReflect() protoreflect.Message {
	mi := &file_proto_countries_v1_countries_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountryIndicatorReply_Result.ProtoReflect.Descriptor instead.
func (*CountryIndicatorReply_Result) Descriptor() ([]byte, []int) {
	return file_proto_countries_v1_countries_proto_rawDescGZIP(), []int{5, 0}
}

func (x *CountryIndicatorReply_Result) GetValue() []float32 {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *CountryIndicatorReply_Result) GetForecast() []float32 {
	if x != nil {
		return x.Forecast
	}
	return nil
}

func (x *CountryIndicatorReply_Result) GetCreatedAt() []*timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

var File_proto_countries_v1_countries_proto protoreflect.FileDescriptor

var file_proto_countries_v1_countries_proto_rawDesc = []byte{
	0x0a, 0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31,
	0x2f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x2f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x34, 0x0a, 0x0e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x22, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x98, 0x01, 0x02, 0x52, 0x07, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x72, 0x0a, 0x14, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a,
	0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x10, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x18,
	0x01, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2e, 0x0a, 0x09, 0x63, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x10, 0xfa,
	0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x18, 0x01, 0x52,
	0x09, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x22, 0x7a, 0x0a, 0x17, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x45, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x09, 0x69, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x22, 0xde, 0x09, 0x0a, 0x0c, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x03, 0x67,
	0x65, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x2e, 0x47, 0x65, 0x6f, 0x52, 0x03, 0x67, 0x65, 0x6f, 0x12, 0x33, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x75, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x65, 0x75, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x6c, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x6c,
	0x64, 0x73, 0x12, 0x47, 0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x09, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x09, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12,
	0x3a, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x64, 0x69, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x0b, 0x73,
	0x75, 0x62, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x44, 0x69, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x1a, 0x87, 0x01, 0x0a,
	0x03, 0x47, 0x65, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x75, 0x62, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x75, 0x62, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x70, 0x69,
	0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x70, 0x69, 0x74,
	0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x41, 0x72, 0x65, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x04, 0x41, 0x72, 0x65, 0x61, 0x1a, 0xb4, 0x01, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x33, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x69, 0x6f, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x69, 0x6f, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x63, 0x6e, 0x33, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x63, 0x6e, 0x33, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x61, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x1a, 0xd9, 0x02,
	0x0a, 0x08, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x50, 0x0a, 0x0b, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x2e, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x73, 0x1a, 0xd2, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x4c, 0x6f,
	0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x4c, 0x61,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x6d, 0x69,
	0x6e, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x78,
	0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0c, 0x6d, 0x61, 0x78, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x6d, 0x61, 0x78, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c,
	0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09,
	0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x1a, 0x3c, 0x0a, 0x0e, 0x4c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5c, 0x0a, 0x0e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xc1, 0x02, 0x0a, 0x15, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x3b, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x44, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x1a, 0x75, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x02, 0x52, 0x08, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x12, 0x39,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x32, 0xd6, 0x02, 0x0a, 0x09, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x5e, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x1c,
	0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17,
	0x12, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x7b, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x7d, 0x12, 0x64, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x12, 0x22, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x65, 0x73, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x22, 0x0d, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x82, 0x01,
	0x0a, 0x09, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x25, 0x2e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12,
	0x21, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x7b, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x7d, 0x2f, 0x7b, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x7d, 0x42, 0x8a, 0x03, 0x0a, 0x1b, 0x64, 0x65, 0x76, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f,
	0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x42, 0x10, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x56, 0x31, 0x50, 0x01, 0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x61, 0x72, 0x6b, 0x74, 0x6f, 0x73, 0x2d, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72,
	0x65, 0x2f, 0x62, 0x75, 0x66, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x92, 0x41, 0x97, 0x02, 0x12, 0x83, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x20, 0x41, 0x50, 0x49, 0x73, 0x12, 0x0e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x20, 0x41, 0x50, 0x49, 0x73, 0x22, 0x5c, 0x0a, 0x16, 0x41,
	0x72, 0x6b, 0x74, 0x6f, 0x73, 0x20, 0x56, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x20, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x25, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x72, 0x6b, 0x74, 0x6f, 0x73,
	0x2d, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x62, 0x75, 0x66, 0x1a, 0x1b, 0x6f, 0x73,
	0x73, 0x40, 0x61, 0x72, 0x6b, 0x74, 0x6f, 0x73, 0x2d, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x32, 0x03, 0x31, 0x2e, 0x30, 0x2a, 0x02,
	0x01, 0x02, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x5a, 0x59, 0x0a, 0x57, 0x0a, 0x06, 0x62, 0x65, 0x61, 0x72,
	0x65, 0x72, 0x12, 0x4d, 0x08, 0x02, 0x12, 0x38, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2c, 0x20, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72,
	0x3a, 0x20, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x20, 0x3c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x3e,
	0x1a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x02, 0x62, 0x0c, 0x0a, 0x0a, 0x0a, 0x06, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x12, 0x00, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_countries_v1_countries_proto_rawDescOnce sync.Once
	file_proto_countries_v1_countries_proto_rawDescData = file_proto_countries_v1_countries_proto_rawDesc
)

func file_proto_countries_v1_countries_proto_rawDescGZIP() []byte {
	file_proto_countries_v1_countries_proto_rawDescOnce.Do(func() {
		file_proto_countries_v1_countries_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_countries_v1_countries_proto_rawDescData)
	})
	return file_proto_countries_v1_countries_proto_rawDescData
}

var file_proto_countries_v1_countries_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_proto_countries_v1_countries_proto_goTypes = []interface{}{
	(*CountryRequest)(nil),                   // 0: countries.v1.CountryRequest
	(*CountrySearchRequest)(nil),             // 1: countries.v1.CountrySearchRequest
	(*CountryIndicatorRequest)(nil),          // 2: countries.v1.CountryIndicatorRequest
	(*CountryReply)(nil),                     // 3: countries.v1.CountryReply
	(*CountryReplies)(nil),                   // 4: countries.v1.CountryReplies
	(*CountryIndicatorReply)(nil),            // 5: countries.v1.CountryIndicatorReply
	(*CountryReply_Geo)(nil),                 // 6: countries.v1.CountryReply.Geo
	(*CountryReply_Code)(nil),                // 7: countries.v1.CountryReply.Code
	(*CountryReply_Division)(nil),            // 8: countries.v1.CountryReply.Division
	nil,                                      // 9: countries.v1.CountryReply.LanguagesEntry
	(*CountryReply_Division_Coordinate)(nil), // 10: countries.v1.CountryReply.Division.Coordinate
	(*CountryIndicatorReply_Result)(nil),     // 11: countries.v1.CountryIndicatorReply.Result
	(v1.CountryIndicator)(0),                 // 12: screener.v1.CountryIndicator
	(*v11.ExchangeReplies_Result)(nil),       // 13: exchanges.v1.ExchangeReplies.Result
	(*v12.IndiceReplies_Result)(nil),         // 14: indices.v1.IndiceReplies.Result
	(*timestamppb.Timestamp)(nil),            // 15: google.protobuf.Timestamp
}
var file_proto_countries_v1_countries_proto_depIdxs = []int32{
	12, // 0: countries.v1.CountryIndicatorRequest.indicator:type_name -> screener.v1.CountryIndicator
	6,  // 1: countries.v1.CountryReply.geo:type_name -> countries.v1.CountryReply.Geo
	7,  // 2: countries.v1.CountryReply.code:type_name -> countries.v1.CountryReply.Code
	9,  // 3: countries.v1.CountryReply.languages:type_name -> countries.v1.CountryReply.LanguagesEntry
	13, // 4: countries.v1.CountryReply.exchanges:type_name -> exchanges.v1.ExchangeReplies.Result
	14, // 5: countries.v1.CountryReply.indices:type_name -> indices.v1.IndiceReplies.Result
	8,  // 6: countries.v1.CountryReply.subDivision:type_name -> countries.v1.CountryReply.Division
	3,  // 7: countries.v1.CountryReplies.results:type_name -> countries.v1.CountryReply
	12, // 8: countries.v1.CountryIndicatorReply.indicator:type_name -> screener.v1.CountryIndicator
	11, // 9: countries.v1.CountryIndicatorReply.results:type_name -> countries.v1.CountryIndicatorReply.Result
	10, // 10: countries.v1.CountryReply.Division.coordinates:type_name -> countries.v1.CountryReply.Division.Coordinate
	15, // 11: countries.v1.CountryIndicatorReply.Result.created_at:type_name -> google.protobuf.Timestamp
	0,  // 12: countries.v1.Countries.Get:input_type -> countries.v1.CountryRequest
	1,  // 13: countries.v1.Countries.Search:input_type -> countries.v1.CountrySearchRequest
	2,  // 14: countries.v1.Countries.Indicator:input_type -> countries.v1.CountryIndicatorRequest
	3,  // 15: countries.v1.Countries.Get:output_type -> countries.v1.CountryReply
	4,  // 16: countries.v1.Countries.Search:output_type -> countries.v1.CountryReplies
	5,  // 17: countries.v1.Countries.Indicator:output_type -> countries.v1.CountryIndicatorReply
	15, // [15:18] is the sub-list for method output_type
	12, // [12:15] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_proto_countries_v1_countries_proto_init() }
func file_proto_countries_v1_countries_proto_init() {
	if File_proto_countries_v1_countries_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_countries_v1_countries_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_countries_v1_countries_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountrySearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_countries_v1_countries_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountryIndicatorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_countries_v1_countries_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountryReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_countries_v1_countries_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountryReplies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_countries_v1_countries_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountryIndicatorReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_countries_v1_countries_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountryReply_Geo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_countries_v1_countries_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountryReply_Code); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_countries_v1_countries_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountryReply_Division); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_countries_v1_countries_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountryReply_Division_Coordinate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_countries_v1_countries_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountryIndicatorReply_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_countries_v1_countries_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_countries_v1_countries_proto_goTypes,
		DependencyIndexes: file_proto_countries_v1_countries_proto_depIdxs,
		MessageInfos:      file_proto_countries_v1_countries_proto_msgTypes,
	}.Build()
	File_proto_countries_v1_countries_proto = out.File
	file_proto_countries_v1_countries_proto_rawDesc = nil
	file_proto_countries_v1_countries_proto_goTypes = nil
	file_proto_countries_v1_countries_proto_depIdxs = nil
}
