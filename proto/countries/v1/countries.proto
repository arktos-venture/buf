syntax = "proto3";

package countries.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "validate/validate.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "proto/exchanges/v1/exchanges.proto";
import "proto/indices/v1/indices.proto";
import "proto/screener/v1/screener.proto";

option go_package = "github.com/arktos-venture/buf/proto/countries/v1;v1Countries";
option java_multiple_files = true;
option java_package = "dev.kratos.api.countries.v1";
option java_outer_classname = "CountriesProtoV1";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
	info: {
    title: "Countries APIs";
		description: "Countries APIs";
    version: "1.0";
		contact: {
			name: "Arktos Venture project";
			url: "https://github.com/arktos-venture/buf";
			email: "oss@arktos-consulting.cloud";
		};
  };
	schemes: [HTTP, HTTPS];
	consumes: "application/json";
	produces: "application/json";
	security_definitions: {
	  security: {
			key: "bearer"
			value: {
		  	type: TYPE_API_KEY
		  	in: IN_HEADER
		  	name: "Authorization"
		  	description: "Authentication token, prefixed by Bearer: Bearer <token>"
			}
	  }
	}
	security: {
	  security_requirement: {
			key: "bearer"
	  }
	}
};

service Countries {
  // Public API: Get Country properties
  rpc Get (CountryRequest) returns (CountryReply)  {
    option (google.api.http) = {
      get: "/v1/country/{country}"
    };
  }

  // Public API: Search Country results by currency
  rpc Currency (CountryCurrencyRequest) returns (CountryReplies)  {
    option (google.api.http) = {
      get: "/v1/countries/currency/{currency}"
    };
  }

  // Private API: Get Indicator Country
  rpc Indicator (CountryIndicatorRequest) returns (CountryIndicatorReply)  {
    option (google.api.http) = {
      get: "/v1/country/{country}/{indicator}"
    };
  }
}

// 
// Request
// 

message CountryRequest {
  string country = 1 [(validate.rules).string.len = 2];
}

message CountryCurrencyRequest {
  string currency = 1 [(validate.rules).string.len = 3];
}

message CountryIndicatorRequest {
	string country = 1;
	screener.v1.CountryIndicator indicator = 2 [(validate.rules).enum = {defined_only: true}];
}

// 
// Reply
// 

message CountryReply {
  message Geo {
    string region = 1;
    string sub_region = 2;
    string continent = 3;
    string capital = 4;
    float area = 5; 
  }

  message Code {
    string alpha2 = 1;
    string alpha3 = 2;
    string cioc = 3;
    string ccn3 = 4;
    repeated string calling_codes = 5;
    string international_prefix = 6;
  }

  message Division {
    message Coordinate {
      float min_longitude = 1;
      float min_latitude = 2;
      float max_longitude = 3;
      float max_latitude = 4;
      float latitude = 5;
      float longitude = 6;
    }
  
    string name = 1;
    string code = 2;
    Coordinate coordinates = 3;
  }

  string name = 1;
  Geo geo = 2;
  Code code = 3;
  bool eu_member = 4;
  repeated string tlds = 5;
  map<string, string> languages = 6;
  repeated string currencies = 7;
  repeated exchanges.v1.ExchangeReplies.Result exchanges = 8;
  repeated indices.v1.IndiceReplies.Result indices = 9;
  repeated Division sub_division = 10;
  repeated string borders = 11;
}

message CountryReplies {
  message Result {
    string name = 1;
    string region = 2;
    string continent = 3;
    string alpha2 = 4;
  }

  repeated Result results = 1;
  int64 total = 2;
}

message CountryIndicatorReply {
	message Result {
		repeated float value = 1;
		repeated float forecast = 2;
		repeated google.protobuf.Timestamp created_at = 3;
	}

	screener.v1.CountryIndicator indicator = 1;
	string country = 2;
	Result results = 3;
	int64 total = 4;
}
