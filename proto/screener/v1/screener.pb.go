// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: proto/screener/v1/screener.proto

package screener_v1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Operator int32

const (
	Operator_Equal        Operator = 0
	Operator_NotEqual     Operator = 1
	Operator_Greater      Operator = 2
	Operator_GreaterEqual Operator = 3
	Operator_Less         Operator = 4
	Operator_LessEqual    Operator = 5
	Operator_In           Operator = 6
	Operator_NotIn        Operator = 7
	Operator_Between      Operator = 8
)

// Enum value maps for Operator.
var (
	Operator_name = map[int32]string{
		0: "Equal",
		1: "NotEqual",
		2: "Greater",
		3: "GreaterEqual",
		4: "Less",
		5: "LessEqual",
		6: "In",
		7: "NotIn",
		8: "Between",
	}
	Operator_value = map[string]int32{
		"Equal":        0,
		"NotEqual":     1,
		"Greater":      2,
		"GreaterEqual": 3,
		"Less":         4,
		"LessEqual":    5,
		"In":           6,
		"NotIn":        7,
		"Between":      8,
	}
)

func (x Operator) Enum() *Operator {
	p := new(Operator)
	*p = x
	return p
}

func (x Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Operator) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_screener_v1_screener_proto_enumTypes[0].Descriptor()
}

func (Operator) Type() protoreflect.EnumType {
	return &file_proto_screener_v1_screener_proto_enumTypes[0]
}

func (x Operator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Operator.Descriptor instead.
func (Operator) EnumDescriptor() ([]byte, []int) {
	return file_proto_screener_v1_screener_proto_rawDescGZIP(), []int{0}
}

type Argument int32

const (
	Argument_Ticker               Argument = 0
	Argument_Exchange             Argument = 1
	Argument_Industry             Argument = 2
	Argument_Index                Argument = 3
	Argument_Currency             Argument = 4
	Argument_MarketCap            Argument = 5
	Argument_ReturnYear           Argument = 6
	Argument_Beta5Y               Argument = 7
	Argument_ShareVolumeRatio     Argument = 8
	Argument_DividendYield        Argument = 9
	Argument_Price                Argument = 10
	Argument_PriceLastChange      Argument = 11
	Argument_Strategy             Argument = 12
	Argument_StrategyPeriod       Argument = 13
	Argument_StrategyDecision     Argument = 14
	Argument_StrategyDecisionAgo  Argument = 15
	Argument_SharesFloatRatio     Argument = 16
	Argument_SharesVolume10dRatio Argument = 17
	Argument_SharesVolume90dRatio Argument = 18
	Argument_Volume               Argument = 19
	Argument_VolumeAvg10d         Argument = 20
	Argument_VolumeAvg90d         Argument = 21
	Argument_Isin                 Argument = 22
	Argument_Adr                  Argument = 23
	Argument_Id                   Argument = 24
	Argument_Country              Argument = 25
)

// Enum value maps for Argument.
var (
	Argument_name = map[int32]string{
		0:  "Ticker",
		1:  "Exchange",
		2:  "Industry",
		3:  "Index",
		4:  "Currency",
		5:  "MarketCap",
		6:  "ReturnYear",
		7:  "Beta5Y",
		8:  "ShareVolumeRatio",
		9:  "DividendYield",
		10: "Price",
		11: "PriceLastChange",
		12: "Strategy",
		13: "StrategyPeriod",
		14: "StrategyDecision",
		15: "StrategyDecisionAgo",
		16: "SharesFloatRatio",
		17: "SharesVolume10dRatio",
		18: "SharesVolume90dRatio",
		19: "Volume",
		20: "VolumeAvg10d",
		21: "VolumeAvg90d",
		22: "Isin",
		23: "Adr",
		24: "Id",
		25: "Country",
	}
	Argument_value = map[string]int32{
		"Ticker":               0,
		"Exchange":             1,
		"Industry":             2,
		"Index":                3,
		"Currency":             4,
		"MarketCap":            5,
		"ReturnYear":           6,
		"Beta5Y":               7,
		"ShareVolumeRatio":     8,
		"DividendYield":        9,
		"Price":                10,
		"PriceLastChange":      11,
		"Strategy":             12,
		"StrategyPeriod":       13,
		"StrategyDecision":     14,
		"StrategyDecisionAgo":  15,
		"SharesFloatRatio":     16,
		"SharesVolume10dRatio": 17,
		"SharesVolume90dRatio": 18,
		"Volume":               19,
		"VolumeAvg10d":         20,
		"VolumeAvg90d":         21,
		"Isin":                 22,
		"Adr":                  23,
		"Id":                   24,
		"Country":              25,
	}
)

func (x Argument) Enum() *Argument {
	p := new(Argument)
	*p = x
	return p
}

func (x Argument) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Argument) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_screener_v1_screener_proto_enumTypes[1].Descriptor()
}

func (Argument) Type() protoreflect.EnumType {
	return &file_proto_screener_v1_screener_proto_enumTypes[1]
}

func (x Argument) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Argument.Descriptor instead.
func (Argument) EnumDescriptor() ([]byte, []int) {
	return file_proto_screener_v1_screener_proto_rawDescGZIP(), []int{1}
}

type ScreenerRequest_Sort_Orientation int32

const (
	ScreenerRequest_Sort_ASC  ScreenerRequest_Sort_Orientation = 0
	ScreenerRequest_Sort_DESC ScreenerRequest_Sort_Orientation = 1
)

// Enum value maps for ScreenerRequest_Sort_Orientation.
var (
	ScreenerRequest_Sort_Orientation_name = map[int32]string{
		0: "ASC",
		1: "DESC",
	}
	ScreenerRequest_Sort_Orientation_value = map[string]int32{
		"ASC":  0,
		"DESC": 1,
	}
)

func (x ScreenerRequest_Sort_Orientation) Enum() *ScreenerRequest_Sort_Orientation {
	p := new(ScreenerRequest_Sort_Orientation)
	*p = x
	return p
}

func (x ScreenerRequest_Sort_Orientation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScreenerRequest_Sort_Orientation) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_screener_v1_screener_proto_enumTypes[2].Descriptor()
}

func (ScreenerRequest_Sort_Orientation) Type() protoreflect.EnumType {
	return &file_proto_screener_v1_screener_proto_enumTypes[2]
}

func (x ScreenerRequest_Sort_Orientation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScreenerRequest_Sort_Orientation.Descriptor instead.
func (ScreenerRequest_Sort_Orientation) EnumDescriptor() ([]byte, []int) {
	return file_proto_screener_v1_screener_proto_rawDescGZIP(), []int{1, 0, 0}
}

type Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operator Operator `protobuf:"varint,1,opt,name=operator,proto3,enum=screener.v1.Operator" json:"operator,omitempty"`
	Argument Argument `protobuf:"varint,2,opt,name=argument,proto3,enum=screener.v1.Argument" json:"argument,omitempty"`
	Values   []string `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *Filter) Reset() {
	*x = Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_screener_v1_screener_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_screener_v1_screener_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_proto_screener_v1_screener_proto_rawDescGZIP(), []int{0}
}

func (x *Filter) GetOperator() Operator {
	if x != nil {
		return x.Operator
	}
	return Operator_Equal
}

func (x *Filter) GetArgument() Argument {
	if x != nil {
		return x.Argument
	}
	return Argument_Ticker
}

func (x *Filter) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type ScreenerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters []*Filter             `protobuf:"bytes,1,rep,name=filters,proto3" json:"filters,omitempty"`
	Sort    *ScreenerRequest_Sort `protobuf:"bytes,2,opt,name=sort,proto3" json:"sort,omitempty"`
	Limit   int32                 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *ScreenerRequest) Reset() {
	*x = ScreenerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_screener_v1_screener_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScreenerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScreenerRequest) ProtoMessage() {}

func (x *ScreenerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_screener_v1_screener_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScreenerRequest.ProtoReflect.Descriptor instead.
func (*ScreenerRequest) Descriptor() ([]byte, []int) {
	return file_proto_screener_v1_screener_proto_rawDescGZIP(), []int{1}
}

func (x *ScreenerRequest) GetFilters() []*Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *ScreenerRequest) GetSort() *ScreenerRequest_Sort {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *ScreenerRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ScreenerReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int64                    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Ticker            string                   `protobuf:"bytes,2,opt,name=ticker,proto3" json:"ticker,omitempty"`
	TickerAlternative string                   `protobuf:"bytes,3,opt,name=ticker_alternative,json=tickerAlternative,proto3" json:"ticker_alternative,omitempty"`
	Name              string                   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Isin              string                   `protobuf:"bytes,5,opt,name=isin,proto3" json:"isin,omitempty"`
	Exchange          string                   `protobuf:"bytes,6,opt,name=exchange,proto3" json:"exchange,omitempty"`
	Adr               bool                     `protobuf:"varint,7,opt,name=adr,proto3" json:"adr,omitempty"`
	Activity          *ScreenerReply_Activity  `protobuf:"bytes,8,opt,name=activity,proto3" json:"activity,omitempty"`
	Shares            *ScreenerReply_Shares    `protobuf:"bytes,9,opt,name=shares,proto3" json:"shares,omitempty"`
	Pricing           *ScreenerReply_Pricing   `protobuf:"bytes,10,opt,name=pricing,proto3" json:"pricing,omitempty"`
	Dividends         *ScreenerReply_Dividends `protobuf:"bytes,11,opt,name=dividends,proto3" json:"dividends,omitempty"`
	Volume            *ScreenerReply_Volume    `protobuf:"bytes,12,opt,name=volume,proto3" json:"volume,omitempty"`
	CreatedAt         *timestamppb.Timestamp   `protobuf:"bytes,13,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt         *timestamppb.Timestamp   `protobuf:"bytes,14,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *ScreenerReply) Reset() {
	*x = ScreenerReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_screener_v1_screener_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScreenerReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScreenerReply) ProtoMessage() {}

func (x *ScreenerReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_screener_v1_screener_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScreenerReply.ProtoReflect.Descriptor instead.
func (*ScreenerReply) Descriptor() ([]byte, []int) {
	return file_proto_screener_v1_screener_proto_rawDescGZIP(), []int{2}
}

func (x *ScreenerReply) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ScreenerReply) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *ScreenerReply) GetTickerAlternative() string {
	if x != nil {
		return x.TickerAlternative
	}
	return ""
}

func (x *ScreenerReply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ScreenerReply) GetIsin() string {
	if x != nil {
		return x.Isin
	}
	return ""
}

func (x *ScreenerReply) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *ScreenerReply) GetAdr() bool {
	if x != nil {
		return x.Adr
	}
	return false
}

func (x *ScreenerReply) GetActivity() *ScreenerReply_Activity {
	if x != nil {
		return x.Activity
	}
	return nil
}

func (x *ScreenerReply) GetShares() *ScreenerReply_Shares {
	if x != nil {
		return x.Shares
	}
	return nil
}

func (x *ScreenerReply) GetPricing() *ScreenerReply_Pricing {
	if x != nil {
		return x.Pricing
	}
	return nil
}

func (x *ScreenerReply) GetDividends() *ScreenerReply_Dividends {
	if x != nil {
		return x.Dividends
	}
	return nil
}

func (x *ScreenerReply) GetVolume() *ScreenerReply_Volume {
	if x != nil {
		return x.Volume
	}
	return nil
}

func (x *ScreenerReply) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ScreenerReply) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type ScreenerReplies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ScreenerReply `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Total   int32            `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *ScreenerReplies) Reset() {
	*x = ScreenerReplies{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_screener_v1_screener_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScreenerReplies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScreenerReplies) ProtoMessage() {}

func (x *ScreenerReplies) ProtoReflect() protoreflect.Message {
	mi := &file_proto_screener_v1_screener_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScreenerReplies.ProtoReflect.Descriptor instead.
func (*ScreenerReplies) Descriptor() ([]byte, []int) {
	return file_proto_screener_v1_screener_proto_rawDescGZIP(), []int{3}
}

func (x *ScreenerReplies) GetResults() []*ScreenerReply {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ScreenerReplies) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type ScreenerRequest_Sort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Argument    Argument                         `protobuf:"varint,1,opt,name=argument,proto3,enum=screener.v1.Argument" json:"argument,omitempty"`
	Orientation ScreenerRequest_Sort_Orientation `protobuf:"varint,2,opt,name=orientation,proto3,enum=screener.v1.ScreenerRequest_Sort_Orientation" json:"orientation,omitempty"`
}

func (x *ScreenerRequest_Sort) Reset() {
	*x = ScreenerRequest_Sort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_screener_v1_screener_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScreenerRequest_Sort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScreenerRequest_Sort) ProtoMessage() {}

func (x *ScreenerRequest_Sort) ProtoReflect() protoreflect.Message {
	mi := &file_proto_screener_v1_screener_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScreenerRequest_Sort.ProtoReflect.Descriptor instead.
func (*ScreenerRequest_Sort) Descriptor() ([]byte, []int) {
	return file_proto_screener_v1_screener_proto_rawDescGZIP(), []int{1, 0}
}

func (x *ScreenerRequest_Sort) GetArgument() Argument {
	if x != nil {
		return x.Argument
	}
	return Argument_Ticker
}

func (x *ScreenerRequest_Sort) GetOrientation() ScreenerRequest_Sort_Orientation {
	if x != nil {
		return x.Orientation
	}
	return ScreenerRequest_Sort_ASC
}

type ScreenerReply_Activity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EconomicSector int64 `protobuf:"varint,1,opt,name=economicSector,proto3" json:"economicSector,omitempty"`
	BusinessSector int64 `protobuf:"varint,2,opt,name=businessSector,proto3" json:"businessSector,omitempty"`
	IndustryGroup  int64 `protobuf:"varint,3,opt,name=industryGroup,proto3" json:"industryGroup,omitempty"`
	Industry       int64 `protobuf:"varint,4,opt,name=industry,proto3" json:"industry,omitempty"`
	Activity       int64 `protobuf:"varint,5,opt,name=activity,proto3" json:"activity,omitempty"`
}

func (x *ScreenerReply_Activity) Reset() {
	*x = ScreenerReply_Activity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_screener_v1_screener_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScreenerReply_Activity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScreenerReply_Activity) ProtoMessage() {}

func (x *ScreenerReply_Activity) ProtoReflect() protoreflect.Message {
	mi := &file_proto_screener_v1_screener_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScreenerReply_Activity.ProtoReflect.Descriptor instead.
func (*ScreenerReply_Activity) Descriptor() ([]byte, []int) {
	return file_proto_screener_v1_screener_proto_rawDescGZIP(), []int{2, 0}
}

func (x *ScreenerReply_Activity) GetEconomicSector() int64 {
	if x != nil {
		return x.EconomicSector
	}
	return 0
}

func (x *ScreenerReply_Activity) GetBusinessSector() int64 {
	if x != nil {
		return x.BusinessSector
	}
	return 0
}

func (x *ScreenerReply_Activity) GetIndustryGroup() int64 {
	if x != nil {
		return x.IndustryGroup
	}
	return 0
}

func (x *ScreenerReply_Activity) GetIndustry() int64 {
	if x != nil {
		return x.Industry
	}
	return 0
}

func (x *ScreenerReply_Activity) GetActivity() int64 {
	if x != nil {
		return x.Activity
	}
	return 0
}

type ScreenerReply_Shares struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Outstanding int64 `protobuf:"varint,1,opt,name=outstanding,proto3" json:"outstanding,omitempty"`
	Float       int64 `protobuf:"varint,2,opt,name=float,proto3" json:"float,omitempty"`
}

func (x *ScreenerReply_Shares) Reset() {
	*x = ScreenerReply_Shares{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_screener_v1_screener_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScreenerReply_Shares) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScreenerReply_Shares) ProtoMessage() {}

func (x *ScreenerReply_Shares) ProtoReflect() protoreflect.Message {
	mi := &file_proto_screener_v1_screener_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScreenerReply_Shares.ProtoReflect.Descriptor instead.
func (*ScreenerReply_Shares) Descriptor() ([]byte, []int) {
	return file_proto_screener_v1_screener_proto_rawDescGZIP(), []int{2, 1}
}

func (x *ScreenerReply_Shares) GetOutstanding() int64 {
	if x != nil {
		return x.Outstanding
	}
	return 0
}

func (x *ScreenerReply_Shares) GetFloat() int64 {
	if x != nil {
		return x.Float
	}
	return 0
}

type ScreenerReply_Pricing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Last       float32 `protobuf:"fixed32,1,opt,name=last,proto3" json:"last,omitempty"`
	MinYear    float32 `protobuf:"fixed32,2,opt,name=minYear,proto3" json:"minYear,omitempty"`
	MaxYear    float32 `protobuf:"fixed32,3,opt,name=maxYear,proto3" json:"maxYear,omitempty"`
	ReturnYear float32 `protobuf:"fixed32,4,opt,name=returnYear,proto3" json:"returnYear,omitempty"`
	Marketcap  int64   `protobuf:"varint,5,opt,name=marketcap,proto3" json:"marketcap,omitempty"`
	Beta5Y     float32 `protobuf:"fixed32,6,opt,name=beta5y,proto3" json:"beta5y,omitempty"`
}

func (x *ScreenerReply_Pricing) Reset() {
	*x = ScreenerReply_Pricing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_screener_v1_screener_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScreenerReply_Pricing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScreenerReply_Pricing) ProtoMessage() {}

func (x *ScreenerReply_Pricing) ProtoReflect() protoreflect.Message {
	mi := &file_proto_screener_v1_screener_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScreenerReply_Pricing.ProtoReflect.Descriptor instead.
func (*ScreenerReply_Pricing) Descriptor() ([]byte, []int) {
	return file_proto_screener_v1_screener_proto_rawDescGZIP(), []int{2, 2}
}

func (x *ScreenerReply_Pricing) GetLast() float32 {
	if x != nil {
		return x.Last
	}
	return 0
}

func (x *ScreenerReply_Pricing) GetMinYear() float32 {
	if x != nil {
		return x.MinYear
	}
	return 0
}

func (x *ScreenerReply_Pricing) GetMaxYear() float32 {
	if x != nil {
		return x.MaxYear
	}
	return 0
}

func (x *ScreenerReply_Pricing) GetReturnYear() float32 {
	if x != nil {
		return x.ReturnYear
	}
	return 0
}

func (x *ScreenerReply_Pricing) GetMarketcap() int64 {
	if x != nil {
		return x.Marketcap
	}
	return 0
}

func (x *ScreenerReply_Pricing) GetBeta5Y() float32 {
	if x != nil {
		return x.Beta5Y
	}
	return 0
}

type ScreenerReply_Volume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Last          float32 `protobuf:"fixed32,1,opt,name=last,proto3" json:"last,omitempty"`
	Avg10D        float32 `protobuf:"fixed32,2,opt,name=avg10d,proto3" json:"avg10d,omitempty"`
	Avg90D        float32 `protobuf:"fixed32,3,opt,name=avg90d,proto3" json:"avg90d,omitempty"`
	Share10DRatio float32 `protobuf:"fixed32,4,opt,name=share10dRatio,proto3" json:"share10dRatio,omitempty"`
	Share90DRatio float32 `protobuf:"fixed32,5,opt,name=share90dRatio,proto3" json:"share90dRatio,omitempty"`
}

func (x *ScreenerReply_Volume) Reset() {
	*x = ScreenerReply_Volume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_screener_v1_screener_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScreenerReply_Volume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScreenerReply_Volume) ProtoMessage() {}

func (x *ScreenerReply_Volume) ProtoReflect() protoreflect.Message {
	mi := &file_proto_screener_v1_screener_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScreenerReply_Volume.ProtoReflect.Descriptor instead.
func (*ScreenerReply_Volume) Descriptor() ([]byte, []int) {
	return file_proto_screener_v1_screener_proto_rawDescGZIP(), []int{2, 3}
}

func (x *ScreenerReply_Volume) GetLast() float32 {
	if x != nil {
		return x.Last
	}
	return 0
}

func (x *ScreenerReply_Volume) GetAvg10D() float32 {
	if x != nil {
		return x.Avg10D
	}
	return 0
}

func (x *ScreenerReply_Volume) GetAvg90D() float32 {
	if x != nil {
		return x.Avg90D
	}
	return 0
}

func (x *ScreenerReply_Volume) GetShare10DRatio() float32 {
	if x != nil {
		return x.Share10DRatio
	}
	return 0
}

func (x *ScreenerReply_Volume) GetShare90DRatio() float32 {
	if x != nil {
		return x.Share90DRatio
	}
	return 0
}

type ScreenerReply_Dividends struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Yield  float32 `protobuf:"fixed32,1,opt,name=yield,proto3" json:"yield,omitempty"`
	Annual float32 `protobuf:"fixed32,2,opt,name=annual,proto3" json:"annual,omitempty"`
}

func (x *ScreenerReply_Dividends) Reset() {
	*x = ScreenerReply_Dividends{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_screener_v1_screener_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScreenerReply_Dividends) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScreenerReply_Dividends) ProtoMessage() {}

func (x *ScreenerReply_Dividends) ProtoReflect() protoreflect.Message {
	mi := &file_proto_screener_v1_screener_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScreenerReply_Dividends.ProtoReflect.Descriptor instead.
func (*ScreenerReply_Dividends) Descriptor() ([]byte, []int) {
	return file_proto_screener_v1_screener_proto_rawDescGZIP(), []int{2, 4}
}

func (x *ScreenerReply_Dividends) GetYield() float32 {
	if x != nil {
		return x.Yield
	}
	return 0
}

func (x *ScreenerReply_Dividends) GetAnnual() float32 {
	if x != nil {
		return x.Annual
	}
	return 0
}

var File_proto_screener_v1_screener_proto protoreflect.FileDescriptor

var file_proto_screener_v1_screener_proto_rawDesc = []byte{
	0x0a, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72,
	0x2f, 0x76, 0x31, 0x2f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0b, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xad, 0x01, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x3b, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3b, 0x0a, 0x08,
	0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x67,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x08, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x11, 0xfa, 0x42, 0x05, 0x92, 0x01,
	0x02, 0x08, 0x01, 0xfa, 0x42, 0x06, 0x92, 0x01, 0x03, 0x10, 0xe8, 0x07, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x22, 0xf8, 0x02, 0x0a, 0x0f, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x10,
	0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x10, 0x14,
	0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3f, 0x0a, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x1a, 0x05,
	0x18, 0x90, 0x4e, 0x20, 0x00, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0xc0, 0x01, 0x0a,
	0x04, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x3b, 0x0a, 0x08, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x59, 0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x2e, 0x4f, 0x72, 0x69, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x0b, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x20, 0x0a,
	0x0b, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x07, 0x0a, 0x03,
	0x41, 0x53, 0x43, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x45, 0x53, 0x43, 0x10, 0x01, 0x22,
	0xe8, 0x09, 0x0a, 0x0d, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x5f, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x41, 0x6c, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x69, 0x73, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x73, 0x69, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x61, 0x64, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x64, 0x72, 0x12, 0x3f,
	0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12,
	0x39, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x73, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x07, 0x70, 0x72,
	0x69, 0x63, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x52,
	0x07, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x42, 0x0a, 0x09, 0x64, 0x69, 0x76, 0x69,
	0x64, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64,
	0x73, 0x52, 0x09, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x06,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52,
	0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x1a, 0xb8, 0x01,
	0x0a, 0x08, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x63,
	0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x53, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e,
	0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x1a, 0x40, 0x0a, 0x06, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x1a, 0xa7, 0x01, 0x0a, 0x07, 0x50,
	0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69,
	0x6e, 0x59, 0x65, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x6d, 0x69, 0x6e,
	0x59, 0x65, 0x61, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x59, 0x65, 0x61, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x59, 0x65, 0x61, 0x72, 0x12, 0x1e,
	0x0a, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x63, 0x61, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x63, 0x61, 0x70, 0x12, 0x16, 0x0a, 0x06,
	0x62, 0x65, 0x74, 0x61, 0x35, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x62, 0x65,
	0x74, 0x61, 0x35, 0x79, 0x1a, 0x98, 0x01, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x6c,
	0x61, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x67, 0x31, 0x30, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x06, 0x61, 0x76, 0x67, 0x31, 0x30, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x76, 0x67, 0x39, 0x30, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x61, 0x76, 0x67,
	0x39, 0x30, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x31, 0x30, 0x64, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x31, 0x30, 0x64, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x39, 0x30, 0x64, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x39, 0x30, 0x64, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x1a,
	0x39, 0x0a, 0x09, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x79, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x79, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x06, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x22, 0x5d, 0x0a, 0x0f, 0x53, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x12, 0x34, 0x0a,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2a, 0x7b, 0x0a, 0x08, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x6f, 0x74, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x10, 0x01, 0x12, 0x0b,
	0x0a, 0x07, 0x47, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x47,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x10, 0x03, 0x12, 0x08, 0x0a,
	0x04, 0x4c, 0x65, 0x73, 0x73, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x65, 0x73, 0x73, 0x45,
	0x71, 0x75, 0x61, 0x6c, 0x10, 0x05, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x6e, 0x10, 0x06, 0x12, 0x09,
	0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x65, 0x74,
	0x77, 0x65, 0x65, 0x6e, 0x10, 0x08, 0x2a, 0xb2, 0x03, 0x0a, 0x08, 0x41, 0x72, 0x67, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x10, 0x01, 0x12, 0x0c, 0x0a,
	0x08, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61,
	0x70, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x59, 0x65, 0x61,
	0x72, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x65, 0x74, 0x61, 0x35, 0x59, 0x10, 0x07, 0x12,
	0x14, 0x0a, 0x10, 0x53, 0x68, 0x61, 0x72, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e,
	0x64, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x10, 0x09, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x10, 0x0b, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x10, 0x0c, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x10, 0x0d, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x0e,
	0x12, 0x17, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x44, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x6f, 0x10, 0x0f, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x73, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x10, 0x10, 0x12,
	0x18, 0x0a, 0x14, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x31,
	0x30, 0x64, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x10, 0x11, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x39, 0x30, 0x64, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x10, 0x12, 0x12, 0x0a, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x10, 0x13, 0x12,
	0x10, 0x0a, 0x0c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x41, 0x76, 0x67, 0x31, 0x30, 0x64, 0x10,
	0x14, 0x12, 0x10, 0x0a, 0x0c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x41, 0x76, 0x67, 0x39, 0x30,
	0x64, 0x10, 0x15, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x73, 0x69, 0x6e, 0x10, 0x16, 0x12, 0x07, 0x0a,
	0x03, 0x41, 0x64, 0x72, 0x10, 0x17, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x64, 0x10, 0x18, 0x12, 0x0b,
	0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x10, 0x19, 0x32, 0xb5, 0x01, 0x0a, 0x08,
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x12, 0x5d, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x12, 0x1c, 0x2e, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1c, 0x2e, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x22, 0x17,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x22, 0x0c, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0x12, 0x4a, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x10, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0a, 0x12, 0x08, 0x2f, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x7a, 0x42, 0x6f, 0x0a, 0x1a, 0x64, 0x65, 0x76, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f,
	0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x42, 0x12, 0x41, 0x50, 0x49, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x56, 0x31, 0x50, 0x01, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x72, 0x6b, 0x74, 0x6f, 0x73, 0x2d, 0x76, 0x65, 0x6e, 0x74, 0x75,
	0x72, 0x65, 0x2f, 0x62, 0x75, 0x66, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65,
	0x72, 0x5f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_screener_v1_screener_proto_rawDescOnce sync.Once
	file_proto_screener_v1_screener_proto_rawDescData = file_proto_screener_v1_screener_proto_rawDesc
)

func file_proto_screener_v1_screener_proto_rawDescGZIP() []byte {
	file_proto_screener_v1_screener_proto_rawDescOnce.Do(func() {
		file_proto_screener_v1_screener_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_screener_v1_screener_proto_rawDescData)
	})
	return file_proto_screener_v1_screener_proto_rawDescData
}

var file_proto_screener_v1_screener_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_proto_screener_v1_screener_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_proto_screener_v1_screener_proto_goTypes = []interface{}{
	(Operator)(0),                         // 0: screener.v1.Operator
	(Argument)(0),                         // 1: screener.v1.Argument
	(ScreenerRequest_Sort_Orientation)(0), // 2: screener.v1.ScreenerRequest.Sort.Orientation
	(*Filter)(nil),                        // 3: screener.v1.Filter
	(*ScreenerRequest)(nil),               // 4: screener.v1.ScreenerRequest
	(*ScreenerReply)(nil),                 // 5: screener.v1.ScreenerReply
	(*ScreenerReplies)(nil),               // 6: screener.v1.ScreenerReplies
	(*ScreenerRequest_Sort)(nil),          // 7: screener.v1.ScreenerRequest.Sort
	(*ScreenerReply_Activity)(nil),        // 8: screener.v1.ScreenerReply.Activity
	(*ScreenerReply_Shares)(nil),          // 9: screener.v1.ScreenerReply.Shares
	(*ScreenerReply_Pricing)(nil),         // 10: screener.v1.ScreenerReply.Pricing
	(*ScreenerReply_Volume)(nil),          // 11: screener.v1.ScreenerReply.Volume
	(*ScreenerReply_Dividends)(nil),       // 12: screener.v1.ScreenerReply.Dividends
	(*timestamppb.Timestamp)(nil),         // 13: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                 // 14: google.protobuf.Empty
}
var file_proto_screener_v1_screener_proto_depIdxs = []int32{
	0,  // 0: screener.v1.Filter.operator:type_name -> screener.v1.Operator
	1,  // 1: screener.v1.Filter.argument:type_name -> screener.v1.Argument
	3,  // 2: screener.v1.ScreenerRequest.filters:type_name -> screener.v1.Filter
	7,  // 3: screener.v1.ScreenerRequest.sort:type_name -> screener.v1.ScreenerRequest.Sort
	8,  // 4: screener.v1.ScreenerReply.activity:type_name -> screener.v1.ScreenerReply.Activity
	9,  // 5: screener.v1.ScreenerReply.shares:type_name -> screener.v1.ScreenerReply.Shares
	10, // 6: screener.v1.ScreenerReply.pricing:type_name -> screener.v1.ScreenerReply.Pricing
	12, // 7: screener.v1.ScreenerReply.dividends:type_name -> screener.v1.ScreenerReply.Dividends
	11, // 8: screener.v1.ScreenerReply.volume:type_name -> screener.v1.ScreenerReply.Volume
	13, // 9: screener.v1.ScreenerReply.created_at:type_name -> google.protobuf.Timestamp
	13, // 10: screener.v1.ScreenerReply.updated_at:type_name -> google.protobuf.Timestamp
	5,  // 11: screener.v1.ScreenerReplies.results:type_name -> screener.v1.ScreenerReply
	1,  // 12: screener.v1.ScreenerRequest.Sort.argument:type_name -> screener.v1.Argument
	2,  // 13: screener.v1.ScreenerRequest.Sort.orientation:type_name -> screener.v1.ScreenerRequest.Sort.Orientation
	4,  // 14: screener.v1.Screener.Search:input_type -> screener.v1.ScreenerRequest
	14, // 15: screener.v1.Screener.Health:input_type -> google.protobuf.Empty
	6,  // 16: screener.v1.Screener.Search:output_type -> screener.v1.ScreenerReplies
	14, // 17: screener.v1.Screener.Health:output_type -> google.protobuf.Empty
	16, // [16:18] is the sub-list for method output_type
	14, // [14:16] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_proto_screener_v1_screener_proto_init() }
func file_proto_screener_v1_screener_proto_init() {
	if File_proto_screener_v1_screener_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_screener_v1_screener_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_screener_v1_screener_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScreenerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_screener_v1_screener_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScreenerReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_screener_v1_screener_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScreenerReplies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_screener_v1_screener_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScreenerRequest_Sort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_screener_v1_screener_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScreenerReply_Activity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_screener_v1_screener_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScreenerReply_Shares); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_screener_v1_screener_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScreenerReply_Pricing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_screener_v1_screener_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScreenerReply_Volume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_screener_v1_screener_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScreenerReply_Dividends); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_screener_v1_screener_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_screener_v1_screener_proto_goTypes,
		DependencyIndexes: file_proto_screener_v1_screener_proto_depIdxs,
		EnumInfos:         file_proto_screener_v1_screener_proto_enumTypes,
		MessageInfos:      file_proto_screener_v1_screener_proto_msgTypes,
	}.Build()
	File_proto_screener_v1_screener_proto = out.File
	file_proto_screener_v1_screener_proto_rawDesc = nil
	file_proto_screener_v1_screener_proto_goTypes = nil
	file_proto_screener_v1_screener_proto_depIdxs = nil
}
