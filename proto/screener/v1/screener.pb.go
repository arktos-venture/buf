// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: proto/screener/v1/screener.proto

package v1Screener

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TSDB int32

const (
	TSDB_Companies TSDB = 0
	TSDB_Forexes   TSDB = 1
	TSDB_Indices   TSDB = 2
	TSDB_Indexes   TSDB = 3
	TSDB_Accounts  TSDB = 4
)

// Enum value maps for TSDB.
var (
	TSDB_name = map[int32]string{
		0: "Companies",
		1: "Forexes",
		2: "Indices",
		3: "Indexes",
		4: "Accounts",
	}
	TSDB_value = map[string]int32{
		"Companies": 0,
		"Forexes":   1,
		"Indices":   2,
		"Indexes":   3,
		"Accounts":  4,
	}
)

func (x TSDB) Enum() *TSDB {
	p := new(TSDB)
	*p = x
	return p
}

func (x TSDB) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TSDB) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_screener_v1_screener_proto_enumTypes[0].Descriptor()
}

func (TSDB) Type() protoreflect.EnumType {
	return &file_proto_screener_v1_screener_proto_enumTypes[0]
}

func (x TSDB) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TSDB.Descriptor instead.
func (TSDB) EnumDescriptor() ([]byte, []int) {
	return file_proto_screener_v1_screener_proto_rawDescGZIP(), []int{0}
}

type Asset int32

const (
	Asset_INDEX     Asset = 0
	Asset_BOND      Asset = 1
	Asset_INDICATOR Asset = 2
	Asset_COMMODITY Asset = 3
	Asset_STOCK     Asset = 4
	Asset_OPTION    Asset = 5
	Asset_CASH      Asset = 6
	Asset_ETF       Asset = 7
)

// Enum value maps for Asset.
var (
	Asset_name = map[int32]string{
		0: "INDEX",
		1: "BOND",
		2: "INDICATOR",
		3: "COMMODITY",
		4: "STOCK",
		5: "OPTION",
		6: "CASH",
		7: "ETF",
	}
	Asset_value = map[string]int32{
		"INDEX":     0,
		"BOND":      1,
		"INDICATOR": 2,
		"COMMODITY": 3,
		"STOCK":     4,
		"OPTION":    5,
		"CASH":      6,
		"ETF":       7,
	}
)

func (x Asset) Enum() *Asset {
	p := new(Asset)
	*p = x
	return p
}

func (x Asset) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Asset) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_screener_v1_screener_proto_enumTypes[1].Descriptor()
}

func (Asset) Type() protoreflect.EnumType {
	return &file_proto_screener_v1_screener_proto_enumTypes[1]
}

func (x Asset) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Asset.Descriptor instead.
func (Asset) EnumDescriptor() ([]byte, []int) {
	return file_proto_screener_v1_screener_proto_rawDescGZIP(), []int{1}
}

type Interval int32

const (
	Interval_d Interval = 0
	Interval_w Interval = 1
	Interval_m Interval = 2
	Interval_q Interval = 3
	Interval_y Interval = 4
)

// Enum value maps for Interval.
var (
	Interval_name = map[int32]string{
		0: "d",
		1: "w",
		2: "m",
		3: "q",
		4: "y",
	}
	Interval_value = map[string]int32{
		"d": 0,
		"w": 1,
		"m": 2,
		"q": 3,
		"y": 4,
	}
)

func (x Interval) Enum() *Interval {
	p := new(Interval)
	*p = x
	return p
}

func (x Interval) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Interval) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_screener_v1_screener_proto_enumTypes[2].Descriptor()
}

func (Interval) Type() protoreflect.EnumType {
	return &file_proto_screener_v1_screener_proto_enumTypes[2]
}

func (x Interval) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Interval.Descriptor instead.
func (Interval) EnumDescriptor() ([]byte, []int) {
	return file_proto_screener_v1_screener_proto_rawDescGZIP(), []int{2}
}

type OrderType int32

const (
	OrderType_LMT      OrderType = 0
	OrderType_MKT      OrderType = 1
	OrderType_STP      OrderType = 2
	OrderType_IBALGO   OrderType = 3
	OrderType_MIDPRICE OrderType = 4
)

// Enum value maps for OrderType.
var (
	OrderType_name = map[int32]string{
		0: "LMT",
		1: "MKT",
		2: "STP",
		3: "IBALGO",
		4: "MIDPRICE",
	}
	OrderType_value = map[string]int32{
		"LMT":      0,
		"MKT":      1,
		"STP":      2,
		"IBALGO":   3,
		"MIDPRICE": 4,
	}
)

func (x OrderType) Enum() *OrderType {
	p := new(OrderType)
	*p = x
	return p
}

func (x OrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_screener_v1_screener_proto_enumTypes[3].Descriptor()
}

func (OrderType) Type() protoreflect.EnumType {
	return &file_proto_screener_v1_screener_proto_enumTypes[3]
}

func (x OrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderType.Descriptor instead.
func (OrderType) EnumDescriptor() ([]byte, []int) {
	return file_proto_screener_v1_screener_proto_rawDescGZIP(), []int{3}
}

type OrderDuration int32

const (
	OrderDuration_DAY OrderDuration = 0
	OrderDuration_GTC OrderDuration = 1
)

// Enum value maps for OrderDuration.
var (
	OrderDuration_name = map[int32]string{
		0: "DAY",
		1: "GTC",
	}
	OrderDuration_value = map[string]int32{
		"DAY": 0,
		"GTC": 1,
	}
)

func (x OrderDuration) Enum() *OrderDuration {
	p := new(OrderDuration)
	*p = x
	return p
}

func (x OrderDuration) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderDuration) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_screener_v1_screener_proto_enumTypes[4].Descriptor()
}

func (OrderDuration) Type() protoreflect.EnumType {
	return &file_proto_screener_v1_screener_proto_enumTypes[4]
}

func (x OrderDuration) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderDuration.Descriptor instead.
func (OrderDuration) EnumDescriptor() ([]byte, []int) {
	return file_proto_screener_v1_screener_proto_rawDescGZIP(), []int{4}
}

type OrderAction int32

const (
	OrderAction_BUY  OrderAction = 0
	OrderAction_SELL OrderAction = 1
	OrderAction_HOLD OrderAction = 2
)

// Enum value maps for OrderAction.
var (
	OrderAction_name = map[int32]string{
		0: "BUY",
		1: "SELL",
		2: "HOLD",
	}
	OrderAction_value = map[string]int32{
		"BUY":  0,
		"SELL": 1,
		"HOLD": 2,
	}
)

func (x OrderAction) Enum() *OrderAction {
	p := new(OrderAction)
	*p = x
	return p
}

func (x OrderAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderAction) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_screener_v1_screener_proto_enumTypes[5].Descriptor()
}

func (OrderAction) Type() protoreflect.EnumType {
	return &file_proto_screener_v1_screener_proto_enumTypes[5]
}

func (x OrderAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderAction.Descriptor instead.
func (OrderAction) EnumDescriptor() ([]byte, []int) {
	return file_proto_screener_v1_screener_proto_rawDescGZIP(), []int{5}
}

type OrderStatus int32

const (
	OrderStatus_SUBMITTED   OrderStatus = 0
	OrderStatus_PRESUBMITED OrderStatus = 1
	OrderStatus_CLOSE       OrderStatus = 2
	OrderStatus_OPEN        OrderStatus = 3
)

// Enum value maps for OrderStatus.
var (
	OrderStatus_name = map[int32]string{
		0: "SUBMITTED",
		1: "PRESUBMITED",
		2: "CLOSE",
		3: "OPEN",
	}
	OrderStatus_value = map[string]int32{
		"SUBMITTED":   0,
		"PRESUBMITED": 1,
		"CLOSE":       2,
		"OPEN":        3,
	}
)

func (x OrderStatus) Enum() *OrderStatus {
	p := new(OrderStatus)
	*p = x
	return p
}

func (x OrderStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_screener_v1_screener_proto_enumTypes[6].Descriptor()
}

func (OrderStatus) Type() protoreflect.EnumType {
	return &file_proto_screener_v1_screener_proto_enumTypes[6]
}

func (x OrderStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderStatus.Descriptor instead.
func (OrderStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_screener_v1_screener_proto_rawDescGZIP(), []int{6}
}

type Operator int32

const (
	Operator_Equal        Operator = 0
	Operator_NotEqual     Operator = 1
	Operator_Greater      Operator = 2
	Operator_GreaterEqual Operator = 3
	Operator_Less         Operator = 4
	Operator_LessEqual    Operator = 5
	Operator_In           Operator = 6
	Operator_NotIn        Operator = 7
	Operator_Between      Operator = 8
)

// Enum value maps for Operator.
var (
	Operator_name = map[int32]string{
		0: "Equal",
		1: "NotEqual",
		2: "Greater",
		3: "GreaterEqual",
		4: "Less",
		5: "LessEqual",
		6: "In",
		7: "NotIn",
		8: "Between",
	}
	Operator_value = map[string]int32{
		"Equal":        0,
		"NotEqual":     1,
		"Greater":      2,
		"GreaterEqual": 3,
		"Less":         4,
		"LessEqual":    5,
		"In":           6,
		"NotIn":        7,
		"Between":      8,
	}
)

func (x Operator) Enum() *Operator {
	p := new(Operator)
	*p = x
	return p
}

func (x Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Operator) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_screener_v1_screener_proto_enumTypes[7].Descriptor()
}

func (Operator) Type() protoreflect.EnumType {
	return &file_proto_screener_v1_screener_proto_enumTypes[7]
}

func (x Operator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Operator.Descriptor instead.
func (Operator) EnumDescriptor() ([]byte, []int) {
	return file_proto_screener_v1_screener_proto_rawDescGZIP(), []int{7}
}

type Argument int32

const (
	Argument_Ticker              Argument = 0
	Argument_Exchange            Argument = 1
	Argument_Industry            Argument = 2
	Argument_Index               Argument = 3
	Argument_Currency            Argument = 4
	Argument_MarketCap           Argument = 5
	Argument_ReturnYear          Argument = 6
	Argument_Beta5Y              Argument = 7
	Argument_ShareVolumeRatio    Argument = 8
	Argument_DividendYield       Argument = 9
	Argument_Price               Argument = 10
	Argument_PriceLastChange     Argument = 11
	Argument_Strategy            Argument = 12
	Argument_StrategyPeriod      Argument = 13
	Argument_StrategyDecision    Argument = 14
	Argument_StrategyDecisionAgo Argument = 15
	Argument_SharesFloatRatio    Argument = 16
	Argument_Volume              Argument = 17
	Argument_VolumeAvg10d        Argument = 18
	Argument_VolumeAvg30d        Argument = 19
	Argument_VolumeAvg90d        Argument = 20
	Argument_Isin                Argument = 21
	Argument_Adr                 Argument = 22
	Argument_Id                  Argument = 23
	Argument_Country             Argument = 24
	Argument_Time                Argument = 25
	Argument_Action              Argument = 26
	Argument_Duration            Argument = 27
	Argument_Type                Argument = 28
	Argument_Status              Argument = 29
)

// Enum value maps for Argument.
var (
	Argument_name = map[int32]string{
		0:  "Ticker",
		1:  "Exchange",
		2:  "Industry",
		3:  "Index",
		4:  "Currency",
		5:  "MarketCap",
		6:  "ReturnYear",
		7:  "Beta5Y",
		8:  "ShareVolumeRatio",
		9:  "DividendYield",
		10: "Price",
		11: "PriceLastChange",
		12: "Strategy",
		13: "StrategyPeriod",
		14: "StrategyDecision",
		15: "StrategyDecisionAgo",
		16: "SharesFloatRatio",
		17: "Volume",
		18: "VolumeAvg10d",
		19: "VolumeAvg30d",
		20: "VolumeAvg90d",
		21: "Isin",
		22: "Adr",
		23: "Id",
		24: "Country",
		25: "Time",
		26: "Action",
		27: "Duration",
		28: "Type",
		29: "Status",
	}
	Argument_value = map[string]int32{
		"Ticker":              0,
		"Exchange":            1,
		"Industry":            2,
		"Index":               3,
		"Currency":            4,
		"MarketCap":           5,
		"ReturnYear":          6,
		"Beta5Y":              7,
		"ShareVolumeRatio":    8,
		"DividendYield":       9,
		"Price":               10,
		"PriceLastChange":     11,
		"Strategy":            12,
		"StrategyPeriod":      13,
		"StrategyDecision":    14,
		"StrategyDecisionAgo": 15,
		"SharesFloatRatio":    16,
		"Volume":              17,
		"VolumeAvg10d":        18,
		"VolumeAvg30d":        19,
		"VolumeAvg90d":        20,
		"Isin":                21,
		"Adr":                 22,
		"Id":                  23,
		"Country":             24,
		"Time":                25,
		"Action":              26,
		"Duration":            27,
		"Type":                28,
		"Status":              29,
	}
)

func (x Argument) Enum() *Argument {
	p := new(Argument)
	*p = x
	return p
}

func (x Argument) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Argument) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_screener_v1_screener_proto_enumTypes[8].Descriptor()
}

func (Argument) Type() protoreflect.EnumType {
	return &file_proto_screener_v1_screener_proto_enumTypes[8]
}

func (x Argument) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Argument.Descriptor instead.
func (Argument) EnumDescriptor() ([]byte, []int) {
	return file_proto_screener_v1_screener_proto_rawDescGZIP(), []int{8}
}

type CountryIndicator int32

const (
	CountryIndicator_PMIM CountryIndicator = 0
	CountryIndicator_PMIS CountryIndicator = 1
	CountryIndicator_CC   CountryIndicator = 2
	CountryIndicator_TC   CountryIndicator = 3
	CountryIndicator_IPC  CountryIndicator = 4
	CountryIndicator_SPB  CountryIndicator = 5
	CountryIndicator_IPP  CountryIndicator = 6
)

// Enum value maps for CountryIndicator.
var (
	CountryIndicator_name = map[int32]string{
		0: "PMIM",
		1: "PMIS",
		2: "CC",
		3: "TC",
		4: "IPC",
		5: "SPB",
		6: "IPP",
	}
	CountryIndicator_value = map[string]int32{
		"PMIM": 0,
		"PMIS": 1,
		"CC":   2,
		"TC":   3,
		"IPC":  4,
		"SPB":  5,
		"IPP":  6,
	}
)

func (x CountryIndicator) Enum() *CountryIndicator {
	p := new(CountryIndicator)
	*p = x
	return p
}

func (x CountryIndicator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CountryIndicator) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_screener_v1_screener_proto_enumTypes[9].Descriptor()
}

func (CountryIndicator) Type() protoreflect.EnumType {
	return &file_proto_screener_v1_screener_proto_enumTypes[9]
}

func (x CountryIndicator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CountryIndicator.Descriptor instead.
func (CountryIndicator) EnumDescriptor() ([]byte, []int) {
	return file_proto_screener_v1_screener_proto_rawDescGZIP(), []int{9}
}

type ScreenerRequest_Sort_Orientation int32

const (
	ScreenerRequest_Sort_ASC  ScreenerRequest_Sort_Orientation = 0
	ScreenerRequest_Sort_DESC ScreenerRequest_Sort_Orientation = 1
)

// Enum value maps for ScreenerRequest_Sort_Orientation.
var (
	ScreenerRequest_Sort_Orientation_name = map[int32]string{
		0: "ASC",
		1: "DESC",
	}
	ScreenerRequest_Sort_Orientation_value = map[string]int32{
		"ASC":  0,
		"DESC": 1,
	}
)

func (x ScreenerRequest_Sort_Orientation) Enum() *ScreenerRequest_Sort_Orientation {
	p := new(ScreenerRequest_Sort_Orientation)
	*p = x
	return p
}

func (x ScreenerRequest_Sort_Orientation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScreenerRequest_Sort_Orientation) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_screener_v1_screener_proto_enumTypes[10].Descriptor()
}

func (ScreenerRequest_Sort_Orientation) Type() protoreflect.EnumType {
	return &file_proto_screener_v1_screener_proto_enumTypes[10]
}

func (x ScreenerRequest_Sort_Orientation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScreenerRequest_Sort_Orientation.Descriptor instead.
func (ScreenerRequest_Sort_Orientation) EnumDescriptor() ([]byte, []int) {
	return file_proto_screener_v1_screener_proto_rawDescGZIP(), []int{2, 0, 0}
}

type Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operator Operator `protobuf:"varint,1,opt,name=operator,proto3,enum=screener.v1.Operator" json:"operator,omitempty"`
	Argument Argument `protobuf:"varint,2,opt,name=argument,proto3,enum=screener.v1.Argument" json:"argument,omitempty"`
	Values   []string `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *Filter) Reset() {
	*x = Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_screener_v1_screener_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_screener_v1_screener_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_proto_screener_v1_screener_proto_rawDescGZIP(), []int{0}
}

func (x *Filter) GetOperator() Operator {
	if x != nil {
		return x.Operator
	}
	return Operator_Equal
}

func (x *Filter) GetArgument() Argument {
	if x != nil {
		return x.Argument
	}
	return Argument_Ticker
}

func (x *Filter) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type FilterSimple struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operator Operator `protobuf:"varint,1,opt,name=operator,proto3,enum=screener.v1.Operator" json:"operator,omitempty"`
	Argument Argument `protobuf:"varint,2,opt,name=argument,proto3,enum=screener.v1.Argument" json:"argument,omitempty"`
	Value    string   `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *FilterSimple) Reset() {
	*x = FilterSimple{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_screener_v1_screener_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterSimple) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterSimple) ProtoMessage() {}

func (x *FilterSimple) ProtoReflect() protoreflect.Message {
	mi := &file_proto_screener_v1_screener_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterSimple.ProtoReflect.Descriptor instead.
func (*FilterSimple) Descriptor() ([]byte, []int) {
	return file_proto_screener_v1_screener_proto_rawDescGZIP(), []int{1}
}

func (x *FilterSimple) GetOperator() Operator {
	if x != nil {
		return x.Operator
	}
	return Operator_Equal
}

func (x *FilterSimple) GetArgument() Argument {
	if x != nil {
		return x.Argument
	}
	return Argument_Ticker
}

func (x *FilterSimple) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type ScreenerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters []*Filter             `protobuf:"bytes,1,rep,name=filters,proto3" json:"filters,omitempty"`
	Sort    *ScreenerRequest_Sort `protobuf:"bytes,2,opt,name=sort,proto3" json:"sort,omitempty"`
	Limit   int32                 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *ScreenerRequest) Reset() {
	*x = ScreenerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_screener_v1_screener_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScreenerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScreenerRequest) ProtoMessage() {}

func (x *ScreenerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_screener_v1_screener_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScreenerRequest.ProtoReflect.Descriptor instead.
func (*ScreenerRequest) Descriptor() ([]byte, []int) {
	return file_proto_screener_v1_screener_proto_rawDescGZIP(), []int{2}
}

func (x *ScreenerRequest) GetFilters() []*Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *ScreenerRequest) GetSort() *ScreenerRequest_Sort {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *ScreenerRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ScreenerRequest_Sort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Argument    Argument                         `protobuf:"varint,1,opt,name=argument,proto3,enum=screener.v1.Argument" json:"argument,omitempty"`
	Orientation ScreenerRequest_Sort_Orientation `protobuf:"varint,2,opt,name=orientation,proto3,enum=screener.v1.ScreenerRequest_Sort_Orientation" json:"orientation,omitempty"`
}

func (x *ScreenerRequest_Sort) Reset() {
	*x = ScreenerRequest_Sort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_screener_v1_screener_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScreenerRequest_Sort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScreenerRequest_Sort) ProtoMessage() {}

func (x *ScreenerRequest_Sort) ProtoReflect() protoreflect.Message {
	mi := &file_proto_screener_v1_screener_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScreenerRequest_Sort.ProtoReflect.Descriptor instead.
func (*ScreenerRequest_Sort) Descriptor() ([]byte, []int) {
	return file_proto_screener_v1_screener_proto_rawDescGZIP(), []int{2, 0}
}

func (x *ScreenerRequest_Sort) GetArgument() Argument {
	if x != nil {
		return x.Argument
	}
	return Argument_Ticker
}

func (x *ScreenerRequest_Sort) GetOrientation() ScreenerRequest_Sort_Orientation {
	if x != nil {
		return x.Orientation
	}
	return ScreenerRequest_Sort_ASC
}

var File_proto_screener_v1_screener_proto protoreflect.FileDescriptor

var file_proto_screener_v1_screener_proto_rawDesc = []byte{
	0x0a, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72,
	0x2f, 0x76, 0x31, 0x2f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0b, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a,
	0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xad, 0x01, 0x0a, 0x06, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x3b, 0x0a, 0x08, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x08, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x11, 0xfa,
	0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0xfa, 0x42, 0x06, 0x92, 0x01, 0x03, 0x10, 0xe8, 0x07,
	0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x9e, 0x01, 0x0a, 0x0c, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x73, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3b, 0x0a, 0x08, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x73, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x61, 0x72, 0x67, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xf8, 0x02, 0x0a, 0x0f, 0x53, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a,
	0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x42, 0x10, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0xfa, 0x42, 0x05,
	0x92, 0x01, 0x02, 0x10, 0x14, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3f,
	0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12,
	0x20, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a,
	0xfa, 0x42, 0x07, 0x1a, 0x05, 0x18, 0x90, 0x4e, 0x20, 0x00, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x1a, 0xc0, 0x01, 0x0a, 0x04, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x3b, 0x0a, 0x08, 0x61, 0x72,
	0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x73,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x67, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x61,
	0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x59, 0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x73,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x2e,
	0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x20, 0x0a, 0x0b, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x53, 0x43, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x45,
	0x53, 0x43, 0x10, 0x01, 0x2a, 0x4a, 0x0a, 0x04, 0x54, 0x53, 0x44, 0x42, 0x12, 0x0d, 0x0a, 0x09,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x46,
	0x6f, 0x72, 0x65, 0x78, 0x65, 0x73, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x65, 0x73, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73,
	0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x10, 0x04,
	0x2a, 0x64, 0x0a, 0x05, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e, 0x44,
	0x45, 0x58, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4f, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x0d,
	0x0a, 0x09, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x0d, 0x0a,
	0x09, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x44, 0x49, 0x54, 0x59, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05,
	0x53, 0x54, 0x4f, 0x43, 0x4b, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x50, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x41, 0x53, 0x48, 0x10, 0x06, 0x12, 0x07, 0x0a,
	0x03, 0x45, 0x54, 0x46, 0x10, 0x07, 0x2a, 0x2d, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x05, 0x0a, 0x01, 0x64, 0x10, 0x00, 0x12, 0x05, 0x0a, 0x01, 0x77, 0x10, 0x01,
	0x12, 0x05, 0x0a, 0x01, 0x6d, 0x10, 0x02, 0x12, 0x05, 0x0a, 0x01, 0x71, 0x10, 0x03, 0x12, 0x05,
	0x0a, 0x01, 0x79, 0x10, 0x04, 0x2a, 0x40, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x4d, 0x54, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4d,
	0x4b, 0x54, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x54, 0x50, 0x10, 0x02, 0x12, 0x0a, 0x0a,
	0x06, 0x49, 0x42, 0x41, 0x4c, 0x47, 0x4f, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x49, 0x44,
	0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0x04, 0x2a, 0x21, 0x0a, 0x0d, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x41, 0x59, 0x10,
	0x00, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x54, 0x43, 0x10, 0x01, 0x2a, 0x2a, 0x0a, 0x0b, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x55, 0x59,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x45, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04,
	0x48, 0x4f, 0x4c, 0x44, 0x10, 0x02, 0x2a, 0x42, 0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x54, 0x54,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x52, 0x45, 0x53, 0x55, 0x42, 0x4d, 0x49,
	0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x02,
	0x12, 0x08, 0x0a, 0x04, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x03, 0x2a, 0x7b, 0x0a, 0x08, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x6f, 0x74, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x10, 0x01, 0x12,
	0x0b, 0x0a, 0x07, 0x47, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c,
	0x47, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x10, 0x03, 0x12, 0x08,
	0x0a, 0x04, 0x4c, 0x65, 0x73, 0x73, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x65, 0x73, 0x73,
	0x45, 0x71, 0x75, 0x61, 0x6c, 0x10, 0x05, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x6e, 0x10, 0x06, 0x12,
	0x09, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x65,
	0x74, 0x77, 0x65, 0x65, 0x6e, 0x10, 0x08, 0x2a, 0xca, 0x03, 0x0a, 0x08, 0x41, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43,
	0x61, 0x70, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x59, 0x65,
	0x61, 0x72, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x65, 0x74, 0x61, 0x35, 0x59, 0x10, 0x07,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x68, 0x61, 0x72, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65,
	0x6e, 0x64, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x10, 0x09, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x61, 0x73,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x10, 0x0b, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x10, 0x0c, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x10, 0x0d, 0x12, 0x14, 0x0a, 0x10, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x10,
	0x0e, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x44, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x6f, 0x10, 0x0f, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x73, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x10, 0x10,
	0x12, 0x0a, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x10, 0x11, 0x12, 0x10, 0x0a, 0x0c,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x41, 0x76, 0x67, 0x31, 0x30, 0x64, 0x10, 0x12, 0x12, 0x10,
	0x0a, 0x0c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x41, 0x76, 0x67, 0x33, 0x30, 0x64, 0x10, 0x13,
	0x12, 0x10, 0x0a, 0x0c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x41, 0x76, 0x67, 0x39, 0x30, 0x64,
	0x10, 0x14, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x73, 0x69, 0x6e, 0x10, 0x15, 0x12, 0x07, 0x0a, 0x03,
	0x41, 0x64, 0x72, 0x10, 0x16, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x64, 0x10, 0x17, 0x12, 0x0b, 0x0a,
	0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x10, 0x18, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x69,
	0x6d, 0x65, 0x10, 0x19, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x1a,
	0x12, 0x0c, 0x0a, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x1b, 0x12, 0x08,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x10, 0x1c, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x10, 0x1d, 0x2a, 0x51, 0x0a, 0x10, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x4d, 0x49, 0x4d,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x4d, 0x49, 0x53, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02,
	0x43, 0x43, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x54, 0x43, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03,
	0x49, 0x50, 0x43, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x50, 0x42, 0x10, 0x05, 0x12, 0x07,
	0x0a, 0x03, 0x49, 0x50, 0x50, 0x10, 0x06, 0x42, 0x6e, 0x0a, 0x1a, 0x64, 0x65, 0x76, 0x2e, 0x6b,
	0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x42, 0x12, 0x41, 0x50, 0x49, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x56, 0x31, 0x50, 0x01, 0x5a, 0x3a, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x72, 0x6b, 0x74, 0x6f, 0x73, 0x2d, 0x76,
	0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x62, 0x75, 0x66, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x53,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_screener_v1_screener_proto_rawDescOnce sync.Once
	file_proto_screener_v1_screener_proto_rawDescData = file_proto_screener_v1_screener_proto_rawDesc
)

func file_proto_screener_v1_screener_proto_rawDescGZIP() []byte {
	file_proto_screener_v1_screener_proto_rawDescOnce.Do(func() {
		file_proto_screener_v1_screener_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_screener_v1_screener_proto_rawDescData)
	})
	return file_proto_screener_v1_screener_proto_rawDescData
}

var file_proto_screener_v1_screener_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_proto_screener_v1_screener_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_proto_screener_v1_screener_proto_goTypes = []interface{}{
	(TSDB)(0),                             // 0: screener.v1.TSDB
	(Asset)(0),                            // 1: screener.v1.Asset
	(Interval)(0),                         // 2: screener.v1.Interval
	(OrderType)(0),                        // 3: screener.v1.OrderType
	(OrderDuration)(0),                    // 4: screener.v1.OrderDuration
	(OrderAction)(0),                      // 5: screener.v1.OrderAction
	(OrderStatus)(0),                      // 6: screener.v1.OrderStatus
	(Operator)(0),                         // 7: screener.v1.Operator
	(Argument)(0),                         // 8: screener.v1.Argument
	(CountryIndicator)(0),                 // 9: screener.v1.CountryIndicator
	(ScreenerRequest_Sort_Orientation)(0), // 10: screener.v1.ScreenerRequest.Sort.Orientation
	(*Filter)(nil),                        // 11: screener.v1.Filter
	(*FilterSimple)(nil),                  // 12: screener.v1.FilterSimple
	(*ScreenerRequest)(nil),               // 13: screener.v1.ScreenerRequest
	(*ScreenerRequest_Sort)(nil),          // 14: screener.v1.ScreenerRequest.Sort
}
var file_proto_screener_v1_screener_proto_depIdxs = []int32{
	7,  // 0: screener.v1.Filter.operator:type_name -> screener.v1.Operator
	8,  // 1: screener.v1.Filter.argument:type_name -> screener.v1.Argument
	7,  // 2: screener.v1.FilterSimple.operator:type_name -> screener.v1.Operator
	8,  // 3: screener.v1.FilterSimple.argument:type_name -> screener.v1.Argument
	11, // 4: screener.v1.ScreenerRequest.filters:type_name -> screener.v1.Filter
	14, // 5: screener.v1.ScreenerRequest.sort:type_name -> screener.v1.ScreenerRequest.Sort
	8,  // 6: screener.v1.ScreenerRequest.Sort.argument:type_name -> screener.v1.Argument
	10, // 7: screener.v1.ScreenerRequest.Sort.orientation:type_name -> screener.v1.ScreenerRequest.Sort.Orientation
	8,  // [8:8] is the sub-list for method output_type
	8,  // [8:8] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_proto_screener_v1_screener_proto_init() }
func file_proto_screener_v1_screener_proto_init() {
	if File_proto_screener_v1_screener_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_screener_v1_screener_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_screener_v1_screener_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterSimple); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_screener_v1_screener_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScreenerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_screener_v1_screener_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScreenerRequest_Sort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_screener_v1_screener_proto_rawDesc,
			NumEnums:      11,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_screener_v1_screener_proto_goTypes,
		DependencyIndexes: file_proto_screener_v1_screener_proto_depIdxs,
		EnumInfos:         file_proto_screener_v1_screener_proto_enumTypes,
		MessageInfos:      file_proto_screener_v1_screener_proto_msgTypes,
	}.Build()
	File_proto_screener_v1_screener_proto = out.File
	file_proto_screener_v1_screener_proto_rawDesc = nil
	file_proto_screener_v1_screener_proto_goTypes = nil
	file_proto_screener_v1_screener_proto_depIdxs = nil
}
