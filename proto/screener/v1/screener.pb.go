// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: proto/screener/v1/screener.proto

package v1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ScreenerRequest_Operator int32

const (
	ScreenerRequest_greater  ScreenerRequest_Operator = 0
	ScreenerRequest_egreater ScreenerRequest_Operator = 1
	ScreenerRequest_equal    ScreenerRequest_Operator = 2
	ScreenerRequest_nempty   ScreenerRequest_Operator = 3
	ScreenerRequest_less     ScreenerRequest_Operator = 4
	ScreenerRequest_in_range ScreenerRequest_Operator = 5
)

// Enum value maps for ScreenerRequest_Operator.
var (
	ScreenerRequest_Operator_name = map[int32]string{
		0: "greater",
		1: "egreater",
		2: "equal",
		3: "nempty",
		4: "less",
		5: "in_range",
	}
	ScreenerRequest_Operator_value = map[string]int32{
		"greater":  0,
		"egreater": 1,
		"equal":    2,
		"nempty":   3,
		"less":     4,
		"in_range": 5,
	}
)

func (x ScreenerRequest_Operator) Enum() *ScreenerRequest_Operator {
	p := new(ScreenerRequest_Operator)
	*p = x
	return p
}

func (x ScreenerRequest_Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScreenerRequest_Operator) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_screener_v1_screener_proto_enumTypes[0].Descriptor()
}

func (ScreenerRequest_Operator) Type() protoreflect.EnumType {
	return &file_proto_screener_v1_screener_proto_enumTypes[0]
}

func (x ScreenerRequest_Operator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScreenerRequest_Operator.Descriptor instead.
func (ScreenerRequest_Operator) EnumDescriptor() ([]byte, []int) {
	return file_proto_screener_v1_screener_proto_rawDescGZIP(), []int{0, 0}
}

type ScreenerRequest_Period int32

const (
	ScreenerRequest_D ScreenerRequest_Period = 0
	ScreenerRequest_W ScreenerRequest_Period = 1
	ScreenerRequest_M ScreenerRequest_Period = 2
)

// Enum value maps for ScreenerRequest_Period.
var (
	ScreenerRequest_Period_name = map[int32]string{
		0: "D",
		1: "W",
		2: "M",
	}
	ScreenerRequest_Period_value = map[string]int32{
		"D": 0,
		"W": 1,
		"M": 2,
	}
)

func (x ScreenerRequest_Period) Enum() *ScreenerRequest_Period {
	p := new(ScreenerRequest_Period)
	*p = x
	return p
}

func (x ScreenerRequest_Period) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScreenerRequest_Period) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_screener_v1_screener_proto_enumTypes[1].Descriptor()
}

func (ScreenerRequest_Period) Type() protoreflect.EnumType {
	return &file_proto_screener_v1_screener_proto_enumTypes[1]
}

func (x ScreenerRequest_Period) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScreenerRequest_Period.Descriptor instead.
func (ScreenerRequest_Period) EnumDescriptor() ([]byte, []int) {
	return file_proto_screener_v1_screener_proto_rawDescGZIP(), []int{0, 1}
}

type ScreenerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Country        string                 `protobuf:"bytes,1,opt,name=country,proto3" json:"country,omitempty"`
	Exchanges      []string               `protobuf:"bytes,2,rep,name=exchanges,proto3" json:"exchanges,omitempty"`
	Tickers        []string               `protobuf:"bytes,3,rep,name=tickers,proto3" json:"tickers,omitempty"`
	Period         ScreenerRequest_Period `protobuf:"varint,4,opt,name=period,proto3,enum=screener.v1.get.ScreenerRequest_Period" json:"period,omitempty"`
	MarketCapBasic *ScreenerRequestBint64 `protobuf:"bytes,5,opt,name=marketCapBasic,proto3" json:"marketCapBasic,omitempty"`
	Volume         *ScreenerRequestBint64 `protobuf:"bytes,6,opt,name=volume,proto3" json:"volume,omitempty"`
	Close          *ScreenerRequestBint64 `protobuf:"bytes,7,opt,name=close,proto3" json:"close,omitempty"`
	Range          []int32                `protobuf:"varint,8,rep,packed,name=range,proto3" json:"range,omitempty"`
}

func (x *ScreenerRequest) Reset() {
	*x = ScreenerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_screener_v1_screener_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScreenerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScreenerRequest) ProtoMessage() {}

func (x *ScreenerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_screener_v1_screener_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScreenerRequest.ProtoReflect.Descriptor instead.
func (*ScreenerRequest) Descriptor() ([]byte, []int) {
	return file_proto_screener_v1_screener_proto_rawDescGZIP(), []int{0}
}

func (x *ScreenerRequest) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *ScreenerRequest) GetExchanges() []string {
	if x != nil {
		return x.Exchanges
	}
	return nil
}

func (x *ScreenerRequest) GetTickers() []string {
	if x != nil {
		return x.Tickers
	}
	return nil
}

func (x *ScreenerRequest) GetPeriod() ScreenerRequest_Period {
	if x != nil {
		return x.Period
	}
	return ScreenerRequest_D
}

func (x *ScreenerRequest) GetMarketCapBasic() *ScreenerRequestBint64 {
	if x != nil {
		return x.MarketCapBasic
	}
	return nil
}

func (x *ScreenerRequest) GetVolume() *ScreenerRequestBint64 {
	if x != nil {
		return x.Volume
	}
	return nil
}

func (x *ScreenerRequest) GetClose() *ScreenerRequestBint64 {
	if x != nil {
		return x.Close
	}
	return nil
}

func (x *ScreenerRequest) GetRange() []int32 {
	if x != nil {
		return x.Range
	}
	return nil
}

type ScreenerReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ScreenerReply_Screener `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Total   int32                     `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *ScreenerReply) Reset() {
	*x = ScreenerReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_screener_v1_screener_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScreenerReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScreenerReply) ProtoMessage() {}

func (x *ScreenerReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_screener_v1_screener_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScreenerReply.ProtoReflect.Descriptor instead.
func (*ScreenerReply) Descriptor() ([]byte, []int) {
	return file_proto_screener_v1_screener_proto_rawDescGZIP(), []int{1}
}

func (x *ScreenerReply) GetResults() []*ScreenerReply_Screener {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ScreenerReply) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type ScreenerRequestBint64 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operator ScreenerRequest_Operator `protobuf:"varint,1,opt,name=operator,proto3,enum=screener.v1.get.ScreenerRequest_Operator" json:"operator,omitempty"`
	Value    int64                    `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ScreenerRequestBint64) Reset() {
	*x = ScreenerRequestBint64{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_screener_v1_screener_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScreenerRequestBint64) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScreenerRequestBint64) ProtoMessage() {}

func (x *ScreenerRequestBint64) ProtoReflect() protoreflect.Message {
	mi := &file_proto_screener_v1_screener_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScreenerRequestBint64.ProtoReflect.Descriptor instead.
func (*ScreenerRequestBint64) Descriptor() ([]byte, []int) {
	return file_proto_screener_v1_screener_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ScreenerRequestBint64) GetOperator() ScreenerRequest_Operator {
	if x != nil {
		return x.Operator
	}
	return ScreenerRequest_greater
}

func (x *ScreenerRequestBint64) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type ScreenerReply_Total struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Max int32 `protobuf:"varint,1,opt,name=max,proto3" json:"max,omitempty"`
}

func (x *ScreenerReply_Total) Reset() {
	*x = ScreenerReply_Total{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_screener_v1_screener_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScreenerReply_Total) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScreenerReply_Total) ProtoMessage() {}

func (x *ScreenerReply_Total) ProtoReflect() protoreflect.Message {
	mi := &file_proto_screener_v1_screener_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScreenerReply_Total.ProtoReflect.Descriptor instead.
func (*ScreenerReply_Total) Descriptor() ([]byte, []int) {
	return file_proto_screener_v1_screener_proto_rawDescGZIP(), []int{1, 0}
}

func (x *ScreenerReply_Total) GetMax() int32 {
	if x != nil {
		return x.Max
	}
	return 0
}

type ScreenerReply_Screener struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticker   string                        `protobuf:"bytes,1,opt,name=ticker,proto3" json:"ticker,omitempty"`
	Exchange string                        `protobuf:"bytes,2,opt,name=exchange,proto3" json:"exchange,omitempty"`
	Name     string                        `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Currency string                        `protobuf:"bytes,5,opt,name=currency,proto3" json:"currency,omitempty"`
	Stats    *ScreenerReply_Screener_Stats `protobuf:"bytes,6,opt,name=stats,proto3" json:"stats,omitempty"`
	Quote    *ScreenerReply_Screener_Quote `protobuf:"bytes,7,opt,name=quote,proto3" json:"quote,omitempty"`
}

func (x *ScreenerReply_Screener) Reset() {
	*x = ScreenerReply_Screener{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_screener_v1_screener_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScreenerReply_Screener) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScreenerReply_Screener) ProtoMessage() {}

func (x *ScreenerReply_Screener) ProtoReflect() protoreflect.Message {
	mi := &file_proto_screener_v1_screener_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScreenerReply_Screener.ProtoReflect.Descriptor instead.
func (*ScreenerReply_Screener) Descriptor() ([]byte, []int) {
	return file_proto_screener_v1_screener_proto_rawDescGZIP(), []int{1, 1}
}

func (x *ScreenerReply_Screener) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *ScreenerReply_Screener) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *ScreenerReply_Screener) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ScreenerReply_Screener) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *ScreenerReply_Screener) GetStats() *ScreenerReply_Screener_Stats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *ScreenerReply_Screener) GetQuote() *ScreenerReply_Screener_Quote {
	if x != nil {
		return x.Quote
	}
	return nil
}

type ScreenerReply_Screener_Quote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Open   float32                              `protobuf:"fixed32,1,opt,name=open,proto3" json:"open,omitempty"`
	Close  float32                              `protobuf:"fixed32,2,opt,name=close,proto3" json:"close,omitempty"`
	High   float32                              `protobuf:"fixed32,3,opt,name=high,proto3" json:"high,omitempty"`
	Low    float32                              `protobuf:"fixed32,4,opt,name=low,proto3" json:"low,omitempty"`
	Volume *ScreenerReply_Screener_Quote_Volume `protobuf:"bytes,5,opt,name=volume,proto3" json:"volume,omitempty"`
	Macd   *ScreenerReply_Screener_Quote_Macd   `protobuf:"bytes,6,opt,name=macd,proto3" json:"macd,omitempty"`
	Bbands *ScreenerReply_Screener_Quote_BBands `protobuf:"bytes,7,opt,name=bbands,proto3" json:"bbands,omitempty"`
	Sma    map[int32]float32                    `protobuf:"bytes,8,rep,name=sma,proto3" json:"sma,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
}

func (x *ScreenerReply_Screener_Quote) Reset() {
	*x = ScreenerReply_Screener_Quote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_screener_v1_screener_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScreenerReply_Screener_Quote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScreenerReply_Screener_Quote) ProtoMessage() {}

func (x *ScreenerReply_Screener_Quote) ProtoReflect() protoreflect.Message {
	mi := &file_proto_screener_v1_screener_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScreenerReply_Screener_Quote.ProtoReflect.Descriptor instead.
func (*ScreenerReply_Screener_Quote) Descriptor() ([]byte, []int) {
	return file_proto_screener_v1_screener_proto_rawDescGZIP(), []int{1, 1, 0}
}

func (x *ScreenerReply_Screener_Quote) GetOpen() float32 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *ScreenerReply_Screener_Quote) GetClose() float32 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *ScreenerReply_Screener_Quote) GetHigh() float32 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *ScreenerReply_Screener_Quote) GetLow() float32 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *ScreenerReply_Screener_Quote) GetVolume() *ScreenerReply_Screener_Quote_Volume {
	if x != nil {
		return x.Volume
	}
	return nil
}

func (x *ScreenerReply_Screener_Quote) GetMacd() *ScreenerReply_Screener_Quote_Macd {
	if x != nil {
		return x.Macd
	}
	return nil
}

func (x *ScreenerReply_Screener_Quote) GetBbands() *ScreenerReply_Screener_Quote_BBands {
	if x != nil {
		return x.Bbands
	}
	return nil
}

func (x *ScreenerReply_Screener_Quote) GetSma() map[int32]float32 {
	if x != nil {
		return x.Sma
	}
	return nil
}

type ScreenerReply_Screener_Stats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarketCap    float32           `protobuf:"fixed32,1,opt,name=market_cap,json=marketCap,proto3" json:"market_cap,omitempty"`
	Beta1Y       float32           `protobuf:"fixed32,2,opt,name=beta1y,proto3" json:"beta1y,omitempty"`
	Rsi          float32           `protobuf:"fixed32,3,opt,name=rsi,proto3" json:"rsi,omitempty"`
	Performances map[int32]float32 `protobuf:"bytes,4,rep,name=performances,proto3" json:"performances,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
}

func (x *ScreenerReply_Screener_Stats) Reset() {
	*x = ScreenerReply_Screener_Stats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_screener_v1_screener_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScreenerReply_Screener_Stats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScreenerReply_Screener_Stats) ProtoMessage() {}

func (x *ScreenerReply_Screener_Stats) ProtoReflect() protoreflect.Message {
	mi := &file_proto_screener_v1_screener_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScreenerReply_Screener_Stats.ProtoReflect.Descriptor instead.
func (*ScreenerReply_Screener_Stats) Descriptor() ([]byte, []int) {
	return file_proto_screener_v1_screener_proto_rawDescGZIP(), []int{1, 1, 1}
}

func (x *ScreenerReply_Screener_Stats) GetMarketCap() float32 {
	if x != nil {
		return x.MarketCap
	}
	return 0
}

func (x *ScreenerReply_Screener_Stats) GetBeta1Y() float32 {
	if x != nil {
		return x.Beta1Y
	}
	return 0
}

func (x *ScreenerReply_Screener_Stats) GetRsi() float32 {
	if x != nil {
		return x.Rsi
	}
	return 0
}

func (x *ScreenerReply_Screener_Stats) GetPerformances() map[int32]float32 {
	if x != nil {
		return x.Performances
	}
	return nil
}

type ScreenerReply_Screener_Quote_Volume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float32           `protobuf:"fixed32,1,opt,name=value,proto3" json:"value,omitempty"`
	Avg   map[int32]float32 `protobuf:"bytes,2,rep,name=avg,proto3" json:"avg,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
}

func (x *ScreenerReply_Screener_Quote_Volume) Reset() {
	*x = ScreenerReply_Screener_Quote_Volume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_screener_v1_screener_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScreenerReply_Screener_Quote_Volume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScreenerReply_Screener_Quote_Volume) ProtoMessage() {}

func (x *ScreenerReply_Screener_Quote_Volume) ProtoReflect() protoreflect.Message {
	mi := &file_proto_screener_v1_screener_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScreenerReply_Screener_Quote_Volume.ProtoReflect.Descriptor instead.
func (*ScreenerReply_Screener_Quote_Volume) Descriptor() ([]byte, []int) {
	return file_proto_screener_v1_screener_proto_rawDescGZIP(), []int{1, 1, 0, 0}
}

func (x *ScreenerReply_Screener_Quote_Volume) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ScreenerReply_Screener_Quote_Volume) GetAvg() map[int32]float32 {
	if x != nil {
		return x.Avg
	}
	return nil
}

type ScreenerReply_Screener_Quote_Macd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value  float32 `protobuf:"fixed32,1,opt,name=value,proto3" json:"value,omitempty"`
	Signal float32 `protobuf:"fixed32,2,opt,name=signal,proto3" json:"signal,omitempty"`
}

func (x *ScreenerReply_Screener_Quote_Macd) Reset() {
	*x = ScreenerReply_Screener_Quote_Macd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_screener_v1_screener_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScreenerReply_Screener_Quote_Macd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScreenerReply_Screener_Quote_Macd) ProtoMessage() {}

func (x *ScreenerReply_Screener_Quote_Macd) ProtoReflect() protoreflect.Message {
	mi := &file_proto_screener_v1_screener_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScreenerReply_Screener_Quote_Macd.ProtoReflect.Descriptor instead.
func (*ScreenerReply_Screener_Quote_Macd) Descriptor() ([]byte, []int) {
	return file_proto_screener_v1_screener_proto_rawDescGZIP(), []int{1, 1, 0, 1}
}

func (x *ScreenerReply_Screener_Quote_Macd) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ScreenerReply_Screener_Quote_Macd) GetSignal() float32 {
	if x != nil {
		return x.Signal
	}
	return 0
}

type ScreenerReply_Screener_Quote_BBands struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	High float32 `protobuf:"fixed32,1,opt,name=high,proto3" json:"high,omitempty"`
	Low  float32 `protobuf:"fixed32,2,opt,name=low,proto3" json:"low,omitempty"`
}

func (x *ScreenerReply_Screener_Quote_BBands) Reset() {
	*x = ScreenerReply_Screener_Quote_BBands{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_screener_v1_screener_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScreenerReply_Screener_Quote_BBands) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScreenerReply_Screener_Quote_BBands) ProtoMessage() {}

func (x *ScreenerReply_Screener_Quote_BBands) ProtoReflect() protoreflect.Message {
	mi := &file_proto_screener_v1_screener_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScreenerReply_Screener_Quote_BBands.ProtoReflect.Descriptor instead.
func (*ScreenerReply_Screener_Quote_BBands) Descriptor() ([]byte, []int) {
	return file_proto_screener_v1_screener_proto_rawDescGZIP(), []int{1, 1, 0, 2}
}

func (x *ScreenerReply_Screener_Quote_BBands) GetHigh() float32 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *ScreenerReply_Screener_Quote_BBands) GetLow() float32 {
	if x != nil {
		return x.Low
	}
	return 0
}

var File_proto_screener_v1_screener_proto protoreflect.FileDescriptor

var file_proto_screener_v1_screener_proto_rawDesc = []byte{
	0x0a, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72,
	0x2f, 0x76, 0x31, 0x2f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x67, 0x65, 0x74, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf1, 0x05, 0x0a, 0x0f, 0x53, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x07, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0xfa, 0x42,
	0x26, 0x72, 0x24, 0x52, 0x02, 0x46, 0x52, 0x52, 0x02, 0x55, 0x53, 0x52, 0x02, 0x47, 0x42, 0x52,
	0x02, 0x43, 0x4e, 0x52, 0x02, 0x4a, 0x50, 0x52, 0x02, 0x42, 0x52, 0x52, 0x02, 0x4e, 0x4c, 0x52,
	0x02, 0x53, 0x47, 0x52, 0x02, 0x48, 0x4b, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x28, 0x0a, 0x09, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x00, 0x10, 0x05, 0x52,
	0x09, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x07, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07,
	0x92, 0x01, 0x04, 0x08, 0x00, 0x10, 0x32, 0x52, 0x07, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73,
	0x12, 0x49, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x27, 0x2e, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x67,
	0x65, 0x74, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x59, 0x0a, 0x0e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x70, 0x42, 0x61, 0x73, 0x69, 0x63, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x67, 0x65, 0x74, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x62, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x8a, 0x01, 0x02, 0x10, 0x00, 0x52, 0x0e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61,
	0x70, 0x42, 0x61, 0x73, 0x69, 0x63, 0x12, 0x49, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x67, 0x65, 0x74, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x62, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x00, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x12, 0x47, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x67,
	0x65, 0x74, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x62, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01,
	0x02, 0x10, 0x00, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x05, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01,
	0x04, 0x08, 0x00, 0x10, 0x02, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0x78, 0x0a, 0x06,
	0x62, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x4f, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x73, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x67, 0x65, 0x74, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x54, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x0b, 0x0a, 0x07, 0x67, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x65, 0x67, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x10, 0x01, 0x12, 0x09, 0x0a,
	0x05, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x6e, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x6c, 0x65, 0x73, 0x73, 0x10, 0x04, 0x12, 0x0c,
	0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x10, 0x05, 0x22, 0x1d, 0x0a, 0x06,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x05, 0x0a, 0x01, 0x44, 0x10, 0x00, 0x12, 0x05, 0x0a,
	0x01, 0x57, 0x10, 0x01, 0x12, 0x05, 0x0a, 0x01, 0x4d, 0x10, 0x02, 0x22, 0xc7, 0x0a, 0x0a, 0x0d,
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x41, 0x0a,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x67, 0x65, 0x74,
	0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x53,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x1a, 0x19, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6d, 0x61,
	0x78, 0x1a, 0xc1, 0x09, 0x0a, 0x08, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x43, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x67, 0x65, 0x74, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x67, 0x65, 0x74, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65,
	0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x2e,
	0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x1a, 0xcd, 0x05, 0x0a,
	0x05, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04,
	0x68, 0x69, 0x67, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x4c, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x67, 0x65, 0x74, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65,
	0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x2e,
	0x51, 0x75, 0x6f, 0x74, 0x65, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x06, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x04, 0x6d, 0x61, 0x63, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x67, 0x65, 0x74, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x6f, 0x74,
	0x65, 0x2e, 0x4d, 0x61, 0x63, 0x64, 0x52, 0x04, 0x6d, 0x61, 0x63, 0x64, 0x12, 0x4c, 0x0a, 0x06,
	0x62, 0x62, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x67, 0x65, 0x74, 0x2e, 0x53,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x53, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x2e, 0x42, 0x42, 0x61, 0x6e,
	0x64, 0x73, 0x52, 0x06, 0x62, 0x62, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x48, 0x0a, 0x03, 0x73, 0x6d,
	0x61, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x67, 0x65, 0x74, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72,
	0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x2e, 0x53, 0x6d, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x03, 0x73, 0x6d, 0x61, 0x1a, 0xa7, 0x01, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4f, 0x0a, 0x03, 0x61, 0x76, 0x67, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x67, 0x65, 0x74, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x6f, 0x74,
	0x65, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2e, 0x41, 0x76, 0x67, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x03, 0x61, 0x76, 0x67, 0x1a, 0x36, 0x0a, 0x08, 0x41, 0x76, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x34,
	0x0a, 0x04, 0x4d, 0x61, 0x63, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x1a, 0x2e, 0x0a, 0x06, 0x42, 0x42, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x68, 0x69,
	0x67, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x03, 0x6c, 0x6f, 0x77, 0x1a, 0x36, 0x0a, 0x08, 0x53, 0x6d, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xf6, 0x01, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x5f, 0x63, 0x61, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x43, 0x61, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x65, 0x74, 0x61, 0x31, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x62, 0x65, 0x74, 0x61, 0x31, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x72, 0x73, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x72, 0x73, 0x69, 0x12,
	0x63, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x67, 0x65, 0x74, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x1a, 0x3f, 0x0a, 0x11, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0xb8, 0x01, 0x0a, 0x08, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x65, 0x72, 0x12, 0x60, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x20, 0x2e, 0x73, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x67, 0x65, 0x74, 0x2e, 0x53, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x73, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x67, 0x65, 0x74, 0x2e, 0x53, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x17, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x11, 0x22, 0x0c, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65,
	0x72, 0x3a, 0x01, 0x2a, 0x12, 0x4a, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x10,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0a, 0x12, 0x08, 0x2f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x7a,
	0x42, 0x4c, 0x0a, 0x1a, 0x64, 0x65, 0x76, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x42, 0x0f,
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x56, 0x31, 0x50,
	0x01, 0x5a, 0x1b, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_screener_v1_screener_proto_rawDescOnce sync.Once
	file_proto_screener_v1_screener_proto_rawDescData = file_proto_screener_v1_screener_proto_rawDesc
)

func file_proto_screener_v1_screener_proto_rawDescGZIP() []byte {
	file_proto_screener_v1_screener_proto_rawDescOnce.Do(func() {
		file_proto_screener_v1_screener_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_screener_v1_screener_proto_rawDescData)
	})
	return file_proto_screener_v1_screener_proto_rawDescData
}

var file_proto_screener_v1_screener_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_screener_v1_screener_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_proto_screener_v1_screener_proto_goTypes = []interface{}{
	(ScreenerRequest_Operator)(0),               // 0: screener.v1.get.ScreenerRequest.Operator
	(ScreenerRequest_Period)(0),                 // 1: screener.v1.get.ScreenerRequest.Period
	(*ScreenerRequest)(nil),                     // 2: screener.v1.get.ScreenerRequest
	(*ScreenerReply)(nil),                       // 3: screener.v1.get.ScreenerReply
	(*ScreenerRequestBint64)(nil),               // 4: screener.v1.get.ScreenerRequest.bint64
	(*ScreenerReply_Total)(nil),                 // 5: screener.v1.get.ScreenerReply.Total
	(*ScreenerReply_Screener)(nil),              // 6: screener.v1.get.ScreenerReply.Screener
	(*ScreenerReply_Screener_Quote)(nil),        // 7: screener.v1.get.ScreenerReply.Screener.Quote
	(*ScreenerReply_Screener_Stats)(nil),        // 8: screener.v1.get.ScreenerReply.Screener.Stats
	(*ScreenerReply_Screener_Quote_Volume)(nil), // 9: screener.v1.get.ScreenerReply.Screener.Quote.Volume
	(*ScreenerReply_Screener_Quote_Macd)(nil),   // 10: screener.v1.get.ScreenerReply.Screener.Quote.Macd
	(*ScreenerReply_Screener_Quote_BBands)(nil), // 11: screener.v1.get.ScreenerReply.Screener.Quote.BBands
	nil,                   // 12: screener.v1.get.ScreenerReply.Screener.Quote.SmaEntry
	nil,                   // 13: screener.v1.get.ScreenerReply.Screener.Quote.Volume.AvgEntry
	nil,                   // 14: screener.v1.get.ScreenerReply.Screener.Stats.PerformancesEntry
	(*emptypb.Empty)(nil), // 15: google.protobuf.Empty
}
var file_proto_screener_v1_screener_proto_depIdxs = []int32{
	1,  // 0: screener.v1.get.ScreenerRequest.period:type_name -> screener.v1.get.ScreenerRequest.Period
	4,  // 1: screener.v1.get.ScreenerRequest.marketCapBasic:type_name -> screener.v1.get.ScreenerRequest.bint64
	4,  // 2: screener.v1.get.ScreenerRequest.volume:type_name -> screener.v1.get.ScreenerRequest.bint64
	4,  // 3: screener.v1.get.ScreenerRequest.close:type_name -> screener.v1.get.ScreenerRequest.bint64
	6,  // 4: screener.v1.get.ScreenerReply.results:type_name -> screener.v1.get.ScreenerReply.Screener
	0,  // 5: screener.v1.get.ScreenerRequest.bint64.operator:type_name -> screener.v1.get.ScreenerRequest.Operator
	8,  // 6: screener.v1.get.ScreenerReply.Screener.stats:type_name -> screener.v1.get.ScreenerReply.Screener.Stats
	7,  // 7: screener.v1.get.ScreenerReply.Screener.quote:type_name -> screener.v1.get.ScreenerReply.Screener.Quote
	9,  // 8: screener.v1.get.ScreenerReply.Screener.Quote.volume:type_name -> screener.v1.get.ScreenerReply.Screener.Quote.Volume
	10, // 9: screener.v1.get.ScreenerReply.Screener.Quote.macd:type_name -> screener.v1.get.ScreenerReply.Screener.Quote.Macd
	11, // 10: screener.v1.get.ScreenerReply.Screener.Quote.bbands:type_name -> screener.v1.get.ScreenerReply.Screener.Quote.BBands
	12, // 11: screener.v1.get.ScreenerReply.Screener.Quote.sma:type_name -> screener.v1.get.ScreenerReply.Screener.Quote.SmaEntry
	14, // 12: screener.v1.get.ScreenerReply.Screener.Stats.performances:type_name -> screener.v1.get.ScreenerReply.Screener.Stats.PerformancesEntry
	13, // 13: screener.v1.get.ScreenerReply.Screener.Quote.Volume.avg:type_name -> screener.v1.get.ScreenerReply.Screener.Quote.Volume.AvgEntry
	2,  // 14: screener.v1.get.Screener.Get:input_type -> screener.v1.get.ScreenerRequest
	15, // 15: screener.v1.get.Screener.Health:input_type -> google.protobuf.Empty
	3,  // 16: screener.v1.get.Screener.Get:output_type -> screener.v1.get.ScreenerReply
	15, // 17: screener.v1.get.Screener.Health:output_type -> google.protobuf.Empty
	16, // [16:18] is the sub-list for method output_type
	14, // [14:16] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_proto_screener_v1_screener_proto_init() }
func file_proto_screener_v1_screener_proto_init() {
	if File_proto_screener_v1_screener_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_screener_v1_screener_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScreenerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_screener_v1_screener_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScreenerReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_screener_v1_screener_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScreenerRequestBint64); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_screener_v1_screener_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScreenerReply_Total); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_screener_v1_screener_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScreenerReply_Screener); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_screener_v1_screener_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScreenerReply_Screener_Quote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_screener_v1_screener_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScreenerReply_Screener_Stats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_screener_v1_screener_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScreenerReply_Screener_Quote_Volume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_screener_v1_screener_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScreenerReply_Screener_Quote_Macd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_screener_v1_screener_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScreenerReply_Screener_Quote_BBands); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_screener_v1_screener_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_screener_v1_screener_proto_goTypes,
		DependencyIndexes: file_proto_screener_v1_screener_proto_depIdxs,
		EnumInfos:         file_proto_screener_v1_screener_proto_enumTypes,
		MessageInfos:      file_proto_screener_v1_screener_proto_msgTypes,
	}.Build()
	File_proto_screener_v1_screener_proto = out.File
	file_proto_screener_v1_screener_proto_rawDesc = nil
	file_proto_screener_v1_screener_proto_goTypes = nil
	file_proto_screener_v1_screener_proto_depIdxs = nil
}
