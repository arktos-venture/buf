// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/screener/v1/screener.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ScreenerRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ScreenerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScreenerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ScreenerRequestMultiError, or nil if none found.
func (m *ScreenerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ScreenerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _ScreenerRequest_Country_InLookup[m.GetCountry()]; !ok {
		err := ScreenerRequestValidationError{
			field:  "Country",
			reason: "value must be in list [FR US GB CN JP BR NL SG HK]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetExchanges()) > 5 {
		err := ScreenerRequestValidationError{
			field:  "Exchanges",
			reason: "value must contain no more than 5 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetTickers()) > 50 {
		err := ScreenerRequestValidationError{
			field:  "Tickers",
			reason: "value must contain no more than 50 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := ScreenerRequest_Period_name[int32(m.GetPeriod())]; !ok {
		err := ScreenerRequestValidationError{
			field:  "Period",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetMarketCapBasic()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScreenerRequestValidationError{
					field:  "MarketCapBasic",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScreenerRequestValidationError{
					field:  "MarketCapBasic",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMarketCapBasic()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScreenerRequestValidationError{
				field:  "MarketCapBasic",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetVolume()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScreenerRequestValidationError{
					field:  "Volume",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScreenerRequestValidationError{
					field:  "Volume",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVolume()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScreenerRequestValidationError{
				field:  "Volume",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetClose()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScreenerRequestValidationError{
					field:  "Close",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScreenerRequestValidationError{
					field:  "Close",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetClose()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScreenerRequestValidationError{
				field:  "Close",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetRange()) > 2 {
		err := ScreenerRequestValidationError{
			field:  "Range",
			reason: "value must contain no more than 2 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ScreenerRequestMultiError(errors)
	}

	return nil
}

// ScreenerRequestMultiError is an error wrapping multiple validation errors
// returned by ScreenerRequest.ValidateAll() if the designated constraints
// aren't met.
type ScreenerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScreenerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScreenerRequestMultiError) AllErrors() []error { return m }

// ScreenerRequestValidationError is the validation error returned by
// ScreenerRequest.Validate if the designated constraints aren't met.
type ScreenerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScreenerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScreenerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScreenerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScreenerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScreenerRequestValidationError) ErrorName() string { return "ScreenerRequestValidationError" }

// Error satisfies the builtin error interface
func (e ScreenerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScreenerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScreenerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScreenerRequestValidationError{}

var _ScreenerRequest_Country_InLookup = map[string]struct{}{
	"FR": {},
	"US": {},
	"GB": {},
	"CN": {},
	"JP": {},
	"BR": {},
	"NL": {},
	"SG": {},
	"HK": {},
}

// Validate checks the field values on ScreenerReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ScreenerReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScreenerReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ScreenerReplyMultiError, or
// nil if none found.
func (m *ScreenerReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ScreenerReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ScreenerReplyValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ScreenerReplyValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ScreenerReplyValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ScreenerReplyMultiError(errors)
	}

	return nil
}

// ScreenerReplyMultiError is an error wrapping multiple validation errors
// returned by ScreenerReply.ValidateAll() if the designated constraints
// aren't met.
type ScreenerReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScreenerReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScreenerReplyMultiError) AllErrors() []error { return m }

// ScreenerReplyValidationError is the validation error returned by
// ScreenerReply.Validate if the designated constraints aren't met.
type ScreenerReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScreenerReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScreenerReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScreenerReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScreenerReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScreenerReplyValidationError) ErrorName() string { return "ScreenerReplyValidationError" }

// Error satisfies the builtin error interface
func (e ScreenerReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScreenerReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScreenerReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScreenerReplyValidationError{}

// Validate checks the field values on ScreenerRequestBint64 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ScreenerRequestBint64) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScreenerRequestBint64 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ScreenerRequestBint64MultiError, or nil if none found.
func (m *ScreenerRequestBint64) ValidateAll() error {
	return m.validate(true)
}

func (m *ScreenerRequestBint64) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := ScreenerRequest_Operator_name[int32(m.GetOperator())]; !ok {
		err := ScreenerRequestBint64ValidationError{
			field:  "Operator",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetValue() <= 0 {
		err := ScreenerRequestBint64ValidationError{
			field:  "Value",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ScreenerRequestBint64MultiError(errors)
	}

	return nil
}

// ScreenerRequestBint64MultiError is an error wrapping multiple validation
// errors returned by ScreenerRequestBint64.ValidateAll() if the designated
// constraints aren't met.
type ScreenerRequestBint64MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScreenerRequestBint64MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScreenerRequestBint64MultiError) AllErrors() []error { return m }

// ScreenerRequestBint64ValidationError is the validation error returned by
// ScreenerRequestBint64.Validate if the designated constraints aren't met.
type ScreenerRequestBint64ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScreenerRequestBint64ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScreenerRequestBint64ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScreenerRequestBint64ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScreenerRequestBint64ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScreenerRequestBint64ValidationError) ErrorName() string {
	return "ScreenerRequestBint64ValidationError"
}

// Error satisfies the builtin error interface
func (e ScreenerRequestBint64ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScreenerRequestBint64.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScreenerRequestBint64ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScreenerRequestBint64ValidationError{}

// Validate checks the field values on ScreenerReply_Total with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ScreenerReply_Total) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScreenerReply_Total with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ScreenerReply_TotalMultiError, or nil if none found.
func (m *ScreenerReply_Total) ValidateAll() error {
	return m.validate(true)
}

func (m *ScreenerReply_Total) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Max

	if len(errors) > 0 {
		return ScreenerReply_TotalMultiError(errors)
	}

	return nil
}

// ScreenerReply_TotalMultiError is an error wrapping multiple validation
// errors returned by ScreenerReply_Total.ValidateAll() if the designated
// constraints aren't met.
type ScreenerReply_TotalMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScreenerReply_TotalMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScreenerReply_TotalMultiError) AllErrors() []error { return m }

// ScreenerReply_TotalValidationError is the validation error returned by
// ScreenerReply_Total.Validate if the designated constraints aren't met.
type ScreenerReply_TotalValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScreenerReply_TotalValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScreenerReply_TotalValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScreenerReply_TotalValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScreenerReply_TotalValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScreenerReply_TotalValidationError) ErrorName() string {
	return "ScreenerReply_TotalValidationError"
}

// Error satisfies the builtin error interface
func (e ScreenerReply_TotalValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScreenerReply_Total.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScreenerReply_TotalValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScreenerReply_TotalValidationError{}

// Validate checks the field values on ScreenerReply_Screener with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ScreenerReply_Screener) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScreenerReply_Screener with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ScreenerReply_ScreenerMultiError, or nil if none found.
func (m *ScreenerReply_Screener) ValidateAll() error {
	return m.validate(true)
}

func (m *ScreenerReply_Screener) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ticker

	// no validation rules for Exchange

	// no validation rules for Name

	// no validation rules for Currency

	if all {
		switch v := interface{}(m.GetStats()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScreenerReply_ScreenerValidationError{
					field:  "Stats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScreenerReply_ScreenerValidationError{
					field:  "Stats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStats()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScreenerReply_ScreenerValidationError{
				field:  "Stats",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetQuote()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScreenerReply_ScreenerValidationError{
					field:  "Quote",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScreenerReply_ScreenerValidationError{
					field:  "Quote",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQuote()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScreenerReply_ScreenerValidationError{
				field:  "Quote",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ScreenerReply_ScreenerMultiError(errors)
	}

	return nil
}

// ScreenerReply_ScreenerMultiError is an error wrapping multiple validation
// errors returned by ScreenerReply_Screener.ValidateAll() if the designated
// constraints aren't met.
type ScreenerReply_ScreenerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScreenerReply_ScreenerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScreenerReply_ScreenerMultiError) AllErrors() []error { return m }

// ScreenerReply_ScreenerValidationError is the validation error returned by
// ScreenerReply_Screener.Validate if the designated constraints aren't met.
type ScreenerReply_ScreenerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScreenerReply_ScreenerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScreenerReply_ScreenerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScreenerReply_ScreenerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScreenerReply_ScreenerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScreenerReply_ScreenerValidationError) ErrorName() string {
	return "ScreenerReply_ScreenerValidationError"
}

// Error satisfies the builtin error interface
func (e ScreenerReply_ScreenerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScreenerReply_Screener.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScreenerReply_ScreenerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScreenerReply_ScreenerValidationError{}

// Validate checks the field values on ScreenerReply_Screener_Quote with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ScreenerReply_Screener_Quote) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScreenerReply_Screener_Quote with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ScreenerReply_Screener_QuoteMultiError, or nil if none found.
func (m *ScreenerReply_Screener_Quote) ValidateAll() error {
	return m.validate(true)
}

func (m *ScreenerReply_Screener_Quote) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Open

	// no validation rules for Close

	// no validation rules for High

	// no validation rules for Low

	if all {
		switch v := interface{}(m.GetVolume()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScreenerReply_Screener_QuoteValidationError{
					field:  "Volume",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScreenerReply_Screener_QuoteValidationError{
					field:  "Volume",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVolume()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScreenerReply_Screener_QuoteValidationError{
				field:  "Volume",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMacd()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScreenerReply_Screener_QuoteValidationError{
					field:  "Macd",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScreenerReply_Screener_QuoteValidationError{
					field:  "Macd",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMacd()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScreenerReply_Screener_QuoteValidationError{
				field:  "Macd",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetBbands()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScreenerReply_Screener_QuoteValidationError{
					field:  "Bbands",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScreenerReply_Screener_QuoteValidationError{
					field:  "Bbands",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBbands()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScreenerReply_Screener_QuoteValidationError{
				field:  "Bbands",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Sma

	if len(errors) > 0 {
		return ScreenerReply_Screener_QuoteMultiError(errors)
	}

	return nil
}

// ScreenerReply_Screener_QuoteMultiError is an error wrapping multiple
// validation errors returned by ScreenerReply_Screener_Quote.ValidateAll() if
// the designated constraints aren't met.
type ScreenerReply_Screener_QuoteMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScreenerReply_Screener_QuoteMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScreenerReply_Screener_QuoteMultiError) AllErrors() []error { return m }

// ScreenerReply_Screener_QuoteValidationError is the validation error returned
// by ScreenerReply_Screener_Quote.Validate if the designated constraints
// aren't met.
type ScreenerReply_Screener_QuoteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScreenerReply_Screener_QuoteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScreenerReply_Screener_QuoteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScreenerReply_Screener_QuoteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScreenerReply_Screener_QuoteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScreenerReply_Screener_QuoteValidationError) ErrorName() string {
	return "ScreenerReply_Screener_QuoteValidationError"
}

// Error satisfies the builtin error interface
func (e ScreenerReply_Screener_QuoteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScreenerReply_Screener_Quote.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScreenerReply_Screener_QuoteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScreenerReply_Screener_QuoteValidationError{}

// Validate checks the field values on ScreenerReply_Screener_Stats with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ScreenerReply_Screener_Stats) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScreenerReply_Screener_Stats with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ScreenerReply_Screener_StatsMultiError, or nil if none found.
func (m *ScreenerReply_Screener_Stats) ValidateAll() error {
	return m.validate(true)
}

func (m *ScreenerReply_Screener_Stats) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MarketCap

	// no validation rules for Beta1Y

	// no validation rules for Rsi

	// no validation rules for Performances

	if len(errors) > 0 {
		return ScreenerReply_Screener_StatsMultiError(errors)
	}

	return nil
}

// ScreenerReply_Screener_StatsMultiError is an error wrapping multiple
// validation errors returned by ScreenerReply_Screener_Stats.ValidateAll() if
// the designated constraints aren't met.
type ScreenerReply_Screener_StatsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScreenerReply_Screener_StatsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScreenerReply_Screener_StatsMultiError) AllErrors() []error { return m }

// ScreenerReply_Screener_StatsValidationError is the validation error returned
// by ScreenerReply_Screener_Stats.Validate if the designated constraints
// aren't met.
type ScreenerReply_Screener_StatsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScreenerReply_Screener_StatsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScreenerReply_Screener_StatsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScreenerReply_Screener_StatsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScreenerReply_Screener_StatsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScreenerReply_Screener_StatsValidationError) ErrorName() string {
	return "ScreenerReply_Screener_StatsValidationError"
}

// Error satisfies the builtin error interface
func (e ScreenerReply_Screener_StatsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScreenerReply_Screener_Stats.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScreenerReply_Screener_StatsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScreenerReply_Screener_StatsValidationError{}

// Validate checks the field values on ScreenerReply_Screener_Quote_Volume with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ScreenerReply_Screener_Quote_Volume) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScreenerReply_Screener_Quote_Volume
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ScreenerReply_Screener_Quote_VolumeMultiError, or nil if none found.
func (m *ScreenerReply_Screener_Quote_Volume) ValidateAll() error {
	return m.validate(true)
}

func (m *ScreenerReply_Screener_Quote_Volume) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	// no validation rules for Avg

	if len(errors) > 0 {
		return ScreenerReply_Screener_Quote_VolumeMultiError(errors)
	}

	return nil
}

// ScreenerReply_Screener_Quote_VolumeMultiError is an error wrapping multiple
// validation errors returned by
// ScreenerReply_Screener_Quote_Volume.ValidateAll() if the designated
// constraints aren't met.
type ScreenerReply_Screener_Quote_VolumeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScreenerReply_Screener_Quote_VolumeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScreenerReply_Screener_Quote_VolumeMultiError) AllErrors() []error { return m }

// ScreenerReply_Screener_Quote_VolumeValidationError is the validation error
// returned by ScreenerReply_Screener_Quote_Volume.Validate if the designated
// constraints aren't met.
type ScreenerReply_Screener_Quote_VolumeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScreenerReply_Screener_Quote_VolumeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScreenerReply_Screener_Quote_VolumeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScreenerReply_Screener_Quote_VolumeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScreenerReply_Screener_Quote_VolumeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScreenerReply_Screener_Quote_VolumeValidationError) ErrorName() string {
	return "ScreenerReply_Screener_Quote_VolumeValidationError"
}

// Error satisfies the builtin error interface
func (e ScreenerReply_Screener_Quote_VolumeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScreenerReply_Screener_Quote_Volume.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScreenerReply_Screener_Quote_VolumeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScreenerReply_Screener_Quote_VolumeValidationError{}

// Validate checks the field values on ScreenerReply_Screener_Quote_Macd with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ScreenerReply_Screener_Quote_Macd) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScreenerReply_Screener_Quote_Macd
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ScreenerReply_Screener_Quote_MacdMultiError, or nil if none found.
func (m *ScreenerReply_Screener_Quote_Macd) ValidateAll() error {
	return m.validate(true)
}

func (m *ScreenerReply_Screener_Quote_Macd) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	// no validation rules for Signal

	if len(errors) > 0 {
		return ScreenerReply_Screener_Quote_MacdMultiError(errors)
	}

	return nil
}

// ScreenerReply_Screener_Quote_MacdMultiError is an error wrapping multiple
// validation errors returned by
// ScreenerReply_Screener_Quote_Macd.ValidateAll() if the designated
// constraints aren't met.
type ScreenerReply_Screener_Quote_MacdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScreenerReply_Screener_Quote_MacdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScreenerReply_Screener_Quote_MacdMultiError) AllErrors() []error { return m }

// ScreenerReply_Screener_Quote_MacdValidationError is the validation error
// returned by ScreenerReply_Screener_Quote_Macd.Validate if the designated
// constraints aren't met.
type ScreenerReply_Screener_Quote_MacdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScreenerReply_Screener_Quote_MacdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScreenerReply_Screener_Quote_MacdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScreenerReply_Screener_Quote_MacdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScreenerReply_Screener_Quote_MacdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScreenerReply_Screener_Quote_MacdValidationError) ErrorName() string {
	return "ScreenerReply_Screener_Quote_MacdValidationError"
}

// Error satisfies the builtin error interface
func (e ScreenerReply_Screener_Quote_MacdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScreenerReply_Screener_Quote_Macd.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScreenerReply_Screener_Quote_MacdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScreenerReply_Screener_Quote_MacdValidationError{}

// Validate checks the field values on ScreenerReply_Screener_Quote_BBands with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ScreenerReply_Screener_Quote_BBands) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScreenerReply_Screener_Quote_BBands
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ScreenerReply_Screener_Quote_BBandsMultiError, or nil if none found.
func (m *ScreenerReply_Screener_Quote_BBands) ValidateAll() error {
	return m.validate(true)
}

func (m *ScreenerReply_Screener_Quote_BBands) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for High

	// no validation rules for Low

	if len(errors) > 0 {
		return ScreenerReply_Screener_Quote_BBandsMultiError(errors)
	}

	return nil
}

// ScreenerReply_Screener_Quote_BBandsMultiError is an error wrapping multiple
// validation errors returned by
// ScreenerReply_Screener_Quote_BBands.ValidateAll() if the designated
// constraints aren't met.
type ScreenerReply_Screener_Quote_BBandsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScreenerReply_Screener_Quote_BBandsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScreenerReply_Screener_Quote_BBandsMultiError) AllErrors() []error { return m }

// ScreenerReply_Screener_Quote_BBandsValidationError is the validation error
// returned by ScreenerReply_Screener_Quote_BBands.Validate if the designated
// constraints aren't met.
type ScreenerReply_Screener_Quote_BBandsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScreenerReply_Screener_Quote_BBandsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScreenerReply_Screener_Quote_BBandsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScreenerReply_Screener_Quote_BBandsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScreenerReply_Screener_Quote_BBandsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScreenerReply_Screener_Quote_BBandsValidationError) ErrorName() string {
	return "ScreenerReply_Screener_Quote_BBandsValidationError"
}

// Error satisfies the builtin error interface
func (e ScreenerReply_Screener_Quote_BBandsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScreenerReply_Screener_Quote_BBands.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScreenerReply_Screener_Quote_BBandsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScreenerReply_Screener_Quote_BBandsValidationError{}
