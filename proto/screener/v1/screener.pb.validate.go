// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/screener/v1/screener.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Filter with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Filter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Filter with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in FilterMultiError, or nil if none found.
func (m *Filter) ValidateAll() error {
	return m.validate(true)
}

func (m *Filter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := Operator_name[int32(m.GetOperator())]; !ok {
		err := FilterValidationError{
			field:  "Operator",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := Argument_name[int32(m.GetArgument())]; !ok {
		err := FilterValidationError{
			field:  "Argument",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := len(m.GetValues()); l < 1 || l > 100 {
		err := FilterValidationError{
			field:  "Values",
			reason: "value must contain between 1 and 100 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return FilterMultiError(errors)
	}

	return nil
}

// FilterMultiError is an error wrapping multiple validation errors returned by
// Filter.ValidateAll() if the designated constraints aren't met.
type FilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilterMultiError) AllErrors() []error { return m }

// FilterValidationError is the validation error returned by Filter.Validate if
// the designated constraints aren't met.
type FilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilterValidationError) ErrorName() string { return "FilterValidationError" }

// Error satisfies the builtin error interface
func (e FilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilterValidationError{}

// Validate checks the field values on ScreenerRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ScreenerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScreenerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ScreenerRequestMultiError, or nil if none found.
func (m *ScreenerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ScreenerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetFilters()); l < 1 || l > 20 {
		err := ScreenerRequestValidationError{
			field:  "Filters",
			reason: "value must contain between 1 and 20 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetFilters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ScreenerRequestValidationError{
						field:  fmt.Sprintf("Filters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ScreenerRequestValidationError{
						field:  fmt.Sprintf("Filters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ScreenerRequestValidationError{
					field:  fmt.Sprintf("Filters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.GetSort() == nil {
		err := ScreenerRequestValidationError{
			field:  "Sort",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetSort()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScreenerRequestValidationError{
					field:  "Sort",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScreenerRequestValidationError{
					field:  "Sort",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSort()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScreenerRequestValidationError{
				field:  "Sort",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if val := m.GetLimit(); val <= 0 || val > 10000 {
		err := ScreenerRequestValidationError{
			field:  "Limit",
			reason: "value must be inside range (0, 10000]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ScreenerRequestMultiError(errors)
	}

	return nil
}

// ScreenerRequestMultiError is an error wrapping multiple validation errors
// returned by ScreenerRequest.ValidateAll() if the designated constraints
// aren't met.
type ScreenerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScreenerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScreenerRequestMultiError) AllErrors() []error { return m }

// ScreenerRequestValidationError is the validation error returned by
// ScreenerRequest.Validate if the designated constraints aren't met.
type ScreenerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScreenerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScreenerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScreenerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScreenerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScreenerRequestValidationError) ErrorName() string { return "ScreenerRequestValidationError" }

// Error satisfies the builtin error interface
func (e ScreenerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScreenerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScreenerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScreenerRequestValidationError{}

// Validate checks the field values on ScreenerReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ScreenerReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScreenerReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ScreenerReplyMultiError, or
// nil if none found.
func (m *ScreenerReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ScreenerReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Ticker

	// no validation rules for TickerAlternative

	// no validation rules for Name

	// no validation rules for Isin

	// no validation rules for Exchange

	// no validation rules for Adr

	if all {
		switch v := interface{}(m.GetActivity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScreenerReplyValidationError{
					field:  "Activity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScreenerReplyValidationError{
					field:  "Activity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetActivity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScreenerReplyValidationError{
				field:  "Activity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetShares()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScreenerReplyValidationError{
					field:  "Shares",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScreenerReplyValidationError{
					field:  "Shares",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShares()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScreenerReplyValidationError{
				field:  "Shares",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPricing()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScreenerReplyValidationError{
					field:  "Pricing",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScreenerReplyValidationError{
					field:  "Pricing",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPricing()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScreenerReplyValidationError{
				field:  "Pricing",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDividends()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScreenerReplyValidationError{
					field:  "Dividends",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScreenerReplyValidationError{
					field:  "Dividends",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDividends()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScreenerReplyValidationError{
				field:  "Dividends",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetVolume()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScreenerReplyValidationError{
					field:  "Volume",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScreenerReplyValidationError{
					field:  "Volume",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVolume()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScreenerReplyValidationError{
				field:  "Volume",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScreenerReplyValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScreenerReplyValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScreenerReplyValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScreenerReplyValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScreenerReplyValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScreenerReplyValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ScreenerReplyMultiError(errors)
	}

	return nil
}

// ScreenerReplyMultiError is an error wrapping multiple validation errors
// returned by ScreenerReply.ValidateAll() if the designated constraints
// aren't met.
type ScreenerReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScreenerReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScreenerReplyMultiError) AllErrors() []error { return m }

// ScreenerReplyValidationError is the validation error returned by
// ScreenerReply.Validate if the designated constraints aren't met.
type ScreenerReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScreenerReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScreenerReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScreenerReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScreenerReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScreenerReplyValidationError) ErrorName() string { return "ScreenerReplyValidationError" }

// Error satisfies the builtin error interface
func (e ScreenerReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScreenerReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScreenerReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScreenerReplyValidationError{}

// Validate checks the field values on ScreenerReplies with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ScreenerReplies) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScreenerReplies with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ScreenerRepliesMultiError, or nil if none found.
func (m *ScreenerReplies) ValidateAll() error {
	return m.validate(true)
}

func (m *ScreenerReplies) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ScreenerRepliesValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ScreenerRepliesValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ScreenerRepliesValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ScreenerRepliesMultiError(errors)
	}

	return nil
}

// ScreenerRepliesMultiError is an error wrapping multiple validation errors
// returned by ScreenerReplies.ValidateAll() if the designated constraints
// aren't met.
type ScreenerRepliesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScreenerRepliesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScreenerRepliesMultiError) AllErrors() []error { return m }

// ScreenerRepliesValidationError is the validation error returned by
// ScreenerReplies.Validate if the designated constraints aren't met.
type ScreenerRepliesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScreenerRepliesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScreenerRepliesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScreenerRepliesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScreenerRepliesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScreenerRepliesValidationError) ErrorName() string { return "ScreenerRepliesValidationError" }

// Error satisfies the builtin error interface
func (e ScreenerRepliesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScreenerReplies.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScreenerRepliesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScreenerRepliesValidationError{}

// Validate checks the field values on ScreenerRequest_Sort with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ScreenerRequest_Sort) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScreenerRequest_Sort with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ScreenerRequest_SortMultiError, or nil if none found.
func (m *ScreenerRequest_Sort) ValidateAll() error {
	return m.validate(true)
}

func (m *ScreenerRequest_Sort) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := Argument_name[int32(m.GetArgument())]; !ok {
		err := ScreenerRequest_SortValidationError{
			field:  "Argument",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := ScreenerRequest_Sort_Orientation_name[int32(m.GetOrientation())]; !ok {
		err := ScreenerRequest_SortValidationError{
			field:  "Orientation",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ScreenerRequest_SortMultiError(errors)
	}

	return nil
}

// ScreenerRequest_SortMultiError is an error wrapping multiple validation
// errors returned by ScreenerRequest_Sort.ValidateAll() if the designated
// constraints aren't met.
type ScreenerRequest_SortMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScreenerRequest_SortMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScreenerRequest_SortMultiError) AllErrors() []error { return m }

// ScreenerRequest_SortValidationError is the validation error returned by
// ScreenerRequest_Sort.Validate if the designated constraints aren't met.
type ScreenerRequest_SortValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScreenerRequest_SortValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScreenerRequest_SortValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScreenerRequest_SortValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScreenerRequest_SortValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScreenerRequest_SortValidationError) ErrorName() string {
	return "ScreenerRequest_SortValidationError"
}

// Error satisfies the builtin error interface
func (e ScreenerRequest_SortValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScreenerRequest_Sort.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScreenerRequest_SortValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScreenerRequest_SortValidationError{}

// Validate checks the field values on ScreenerReply_Activity with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ScreenerReply_Activity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScreenerReply_Activity with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ScreenerReply_ActivityMultiError, or nil if none found.
func (m *ScreenerReply_Activity) ValidateAll() error {
	return m.validate(true)
}

func (m *ScreenerReply_Activity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EconomicSector

	// no validation rules for BusinessSector

	// no validation rules for IndustryGroup

	// no validation rules for Industry

	// no validation rules for Activity

	if len(errors) > 0 {
		return ScreenerReply_ActivityMultiError(errors)
	}

	return nil
}

// ScreenerReply_ActivityMultiError is an error wrapping multiple validation
// errors returned by ScreenerReply_Activity.ValidateAll() if the designated
// constraints aren't met.
type ScreenerReply_ActivityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScreenerReply_ActivityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScreenerReply_ActivityMultiError) AllErrors() []error { return m }

// ScreenerReply_ActivityValidationError is the validation error returned by
// ScreenerReply_Activity.Validate if the designated constraints aren't met.
type ScreenerReply_ActivityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScreenerReply_ActivityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScreenerReply_ActivityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScreenerReply_ActivityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScreenerReply_ActivityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScreenerReply_ActivityValidationError) ErrorName() string {
	return "ScreenerReply_ActivityValidationError"
}

// Error satisfies the builtin error interface
func (e ScreenerReply_ActivityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScreenerReply_Activity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScreenerReply_ActivityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScreenerReply_ActivityValidationError{}

// Validate checks the field values on ScreenerReply_Shares with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ScreenerReply_Shares) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScreenerReply_Shares with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ScreenerReply_SharesMultiError, or nil if none found.
func (m *ScreenerReply_Shares) ValidateAll() error {
	return m.validate(true)
}

func (m *ScreenerReply_Shares) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Outstanding

	// no validation rules for Float

	if len(errors) > 0 {
		return ScreenerReply_SharesMultiError(errors)
	}

	return nil
}

// ScreenerReply_SharesMultiError is an error wrapping multiple validation
// errors returned by ScreenerReply_Shares.ValidateAll() if the designated
// constraints aren't met.
type ScreenerReply_SharesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScreenerReply_SharesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScreenerReply_SharesMultiError) AllErrors() []error { return m }

// ScreenerReply_SharesValidationError is the validation error returned by
// ScreenerReply_Shares.Validate if the designated constraints aren't met.
type ScreenerReply_SharesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScreenerReply_SharesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScreenerReply_SharesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScreenerReply_SharesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScreenerReply_SharesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScreenerReply_SharesValidationError) ErrorName() string {
	return "ScreenerReply_SharesValidationError"
}

// Error satisfies the builtin error interface
func (e ScreenerReply_SharesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScreenerReply_Shares.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScreenerReply_SharesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScreenerReply_SharesValidationError{}

// Validate checks the field values on ScreenerReply_Pricing with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ScreenerReply_Pricing) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScreenerReply_Pricing with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ScreenerReply_PricingMultiError, or nil if none found.
func (m *ScreenerReply_Pricing) ValidateAll() error {
	return m.validate(true)
}

func (m *ScreenerReply_Pricing) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Last

	// no validation rules for MinYear

	// no validation rules for MaxYear

	// no validation rules for ReturnYear

	// no validation rules for Marketcap

	// no validation rules for Beta5Y

	if len(errors) > 0 {
		return ScreenerReply_PricingMultiError(errors)
	}

	return nil
}

// ScreenerReply_PricingMultiError is an error wrapping multiple validation
// errors returned by ScreenerReply_Pricing.ValidateAll() if the designated
// constraints aren't met.
type ScreenerReply_PricingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScreenerReply_PricingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScreenerReply_PricingMultiError) AllErrors() []error { return m }

// ScreenerReply_PricingValidationError is the validation error returned by
// ScreenerReply_Pricing.Validate if the designated constraints aren't met.
type ScreenerReply_PricingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScreenerReply_PricingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScreenerReply_PricingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScreenerReply_PricingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScreenerReply_PricingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScreenerReply_PricingValidationError) ErrorName() string {
	return "ScreenerReply_PricingValidationError"
}

// Error satisfies the builtin error interface
func (e ScreenerReply_PricingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScreenerReply_Pricing.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScreenerReply_PricingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScreenerReply_PricingValidationError{}

// Validate checks the field values on ScreenerReply_Volume with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ScreenerReply_Volume) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScreenerReply_Volume with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ScreenerReply_VolumeMultiError, or nil if none found.
func (m *ScreenerReply_Volume) ValidateAll() error {
	return m.validate(true)
}

func (m *ScreenerReply_Volume) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Last

	// no validation rules for Avg10D

	// no validation rules for Avg90D

	// no validation rules for Share10DRatio

	// no validation rules for Share90DRatio

	if len(errors) > 0 {
		return ScreenerReply_VolumeMultiError(errors)
	}

	return nil
}

// ScreenerReply_VolumeMultiError is an error wrapping multiple validation
// errors returned by ScreenerReply_Volume.ValidateAll() if the designated
// constraints aren't met.
type ScreenerReply_VolumeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScreenerReply_VolumeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScreenerReply_VolumeMultiError) AllErrors() []error { return m }

// ScreenerReply_VolumeValidationError is the validation error returned by
// ScreenerReply_Volume.Validate if the designated constraints aren't met.
type ScreenerReply_VolumeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScreenerReply_VolumeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScreenerReply_VolumeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScreenerReply_VolumeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScreenerReply_VolumeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScreenerReply_VolumeValidationError) ErrorName() string {
	return "ScreenerReply_VolumeValidationError"
}

// Error satisfies the builtin error interface
func (e ScreenerReply_VolumeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScreenerReply_Volume.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScreenerReply_VolumeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScreenerReply_VolumeValidationError{}

// Validate checks the field values on ScreenerReply_Dividends with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ScreenerReply_Dividends) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScreenerReply_Dividends with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ScreenerReply_DividendsMultiError, or nil if none found.
func (m *ScreenerReply_Dividends) ValidateAll() error {
	return m.validate(true)
}

func (m *ScreenerReply_Dividends) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Yield

	// no validation rules for Annual

	// no validation rules for YieldAvg5Y

	if len(errors) > 0 {
		return ScreenerReply_DividendsMultiError(errors)
	}

	return nil
}

// ScreenerReply_DividendsMultiError is an error wrapping multiple validation
// errors returned by ScreenerReply_Dividends.ValidateAll() if the designated
// constraints aren't met.
type ScreenerReply_DividendsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScreenerReply_DividendsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScreenerReply_DividendsMultiError) AllErrors() []error { return m }

// ScreenerReply_DividendsValidationError is the validation error returned by
// ScreenerReply_Dividends.Validate if the designated constraints aren't met.
type ScreenerReply_DividendsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScreenerReply_DividendsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScreenerReply_DividendsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScreenerReply_DividendsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScreenerReply_DividendsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScreenerReply_DividendsValidationError) ErrorName() string {
	return "ScreenerReply_DividendsValidationError"
}

// Error satisfies the builtin error interface
func (e ScreenerReply_DividendsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScreenerReply_Dividends.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScreenerReply_DividendsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScreenerReply_DividendsValidationError{}
