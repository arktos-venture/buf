syntax = "proto3";

package indicators.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "validate/validate.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

import "proto/quotes/v1/quotes.proto";

option go_package = "github.com/arktos-venture/buf/proto/indicators/v1;v1Indicators";
option java_multiple_files = true;
option java_package = "dev.kratos.api.indicators.v1";
option java_outer_classname = "APIIndicatorsProtoV1";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
	info: {
    title: "Indicators APIs";
	  description: "Indicators APIs";
    version: "1.0";
		contact: {
			name: "Arktos Venture project";
			url: "https://github.com/arktos-venture/buf";
			email: "oss@arktos-consulting.cloud";
		};
  };
	schemes: [HTTP, HTTPS];
	consumes: "application/json";
	produces: "application/json";
	security_definitions: {
	  security: {
			key: "bearer"
			value: {
		  	type: TYPE_API_KEY
		  	in: IN_HEADER
		  	name: "Authorization"
		  	description: "Authentication token, prefixed by Bearer: Bearer <token>"
			}
	  }
	}
	security: {
	  security_requirement: {
		  key: "bearer"
	  }
	}
};

service Indicators {
  // Public API
  // AVGPRICE - Average Price
  rpc AVGPRICE (IndicatorRequest) returns (IndicatorReply)  {
    option (google.api.http) = {
      post: "/v1/quotes/indicator/avgprice"
      body: "*"
    };
  }

  // Public API
  // SMA - Simple Moving Average
  rpc SMA (IndicatorRequest) returns (IndicatorReply)  {
    option (google.api.http) = {
      post: "/v1/quotes/indicator/sma"
      body: "*"
    };
  }

  // Public API
  // EMA - Exponential Moving Average
  rpc EMA (IndicatorRequest) returns (IndicatorReply)  {
    option (google.api.http) = {
      post: "/v1/quotes/indicator/ema"
      body: "*"
    };
  }

  // Public API
  // WMA - Weighted Moving Average
  rpc WMA (IndicatorRequest) returns (IndicatorReply)  {
    option (google.api.http) = {
      post: "/v1/quotes/indicator/wma"
      body: "*"
    };
  }
  
  // Public API
  // VAR - Variance
  rpc VAR (IndicatorRequest) returns (IndicatorReply)  {
    option (google.api.http) = {
      post: "/v1/quotes/indicator/volatility"
      body: "*"
    };
  }
  
  // Public API
  // RSI - Relative Strength Index
  rpc RSI (IndicatorRequest) returns (IndicatorRsiReply)  {
    option (google.api.http) = {
      post: "/v1/quotes/indicator/rsi"
      body: "*"
    };
  }
  
  // Public API
  // STDDEV - Standard Deviation
  rpc STDDEV (IndicatorRequest) returns (IndicatorReply)  {
    option (google.api.http) = {
      post: "/v1/quotes/indicator/stddev"
      body: "*"
    };
  }
  
  // Public API
  // LINEARREG_SLOPE - Linear Regression Slope
  rpc LINEARREG_SLOPE (IndicatorRequest) returns (IndicatorReply)  {
    option (google.api.http) = {
      post: "/v1/quotes/indicator/slope"
      body: "*"
    };
  }
  
  // Public API
  // DX - Directional Movement Index
  rpc DMI (IndicatorRequest) returns (IndicatorReply)  {
    option (google.api.http) = {
      post: "/v1/quotes/indicator/dmi"
      body: "*"
    };
  }
  
  // Public API
  // ADX - Average Directional Movement Index
  rpc ADX (IndicatorRequest) returns (IndicatorReply)  {
    option (google.api.http) = {
      post: "/v1/quotes/indicator/adx"
      body: "*"
    };
  }
  
  // Public API
  // MACD - Moving Average Convergence/Divergence
  rpc MACD (IndicatorRequest) returns (IndicatorMacdReply)  {
    option (google.api.http) = {
      post: "/v1/quotes/indicator/macd"
      body: "*"
    };
  }
  
  // Public API
  // ATR - Average True Range
  rpc ATR (IndicatorRequest) returns (IndicatorReply)  {
    option (google.api.http) = {
      post: "/v1/quotes/indicator/atr"
      body: "*"
    };
  }

  // Public API
  // CCI - Commodity Channel Index
  rpc CCI (IndicatorRequest) returns (IndicatorReply)  {
    option (google.api.http) = {
      post: "/v1/quotes/indicator/cci"
      body: "*"
    };
  }
  
  // Public API
  // BBANDS - Bollinger Bands
  rpc BBANDS (IndicatorRequest) returns (IndicatorBBandsReply)  {
    option (google.api.http) = {
      post: "/v1/quotes/indicator/bbands"
      body: "*"
    };
  }

  // Public API
  // WILLR - Williams' %R
  rpc WILLR (IndicatorRequest) returns (IndicatorReply)  {
    option (google.api.http) = {
      post: "/v1/quotes/indicator/willr"
      body: "*"
    };
  }

  // Public API
  // SAR - Parabolic SAR
  rpc SAR (IndicatorRequest) returns (IndicatorReply)  {
    option (google.api.http) = {
      post: "/v1/quotes/indicator/sar"
      body: "*"
    };
  }
}


// 
// Request
// 

message IndicatorRequest {
  repeated quotes.v1.QuoteReply quotes = 1 [(validate.rules).repeated.min_items = 3];
  map<string, float> parameters = 2 [(validate.rules).map.min_pairs = 1];
}


// 
// Reply
// 

message IndicatorReply {
  repeated float indicator = 1;
  repeated float close = 2;
	repeated google.protobuf.Timestamp created_at = 3;
}

message IndicatorBBandsReply {
  message Indicator {
    repeated float upper = 1;
    repeated float middle = 2;
    repeated float down = 3;
  }

  Indicator indicators = 1;
  repeated float close = 2;
	repeated google.protobuf.Timestamp created_at = 3;
}

message IndicatorRsiReply {
  message Indicator {
    repeated float fast = 1;
    repeated float slow = 2;
  }

  Indicator indicators = 1;
  repeated float close = 2;
	repeated google.protobuf.Timestamp created_at = 3;
}

message IndicatorMacdReply {
  message Indicator {
    repeated float fast = 1;
    repeated float slow = 2;
    repeated float signal = 3;
  }

  Indicator indicators = 1;
  repeated float close = 2;
	repeated google.protobuf.Timestamp created_at = 3;
}