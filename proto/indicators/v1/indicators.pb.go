// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.21.2
// source: proto/indicators/v1/indicators.proto

package v1Indicators

import (
	v1 "github.com/arktos-venture/buf/proto/quotes/v1"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IndicatorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Quotes     *v1.QuoteReply     `protobuf:"bytes,1,opt,name=quotes,proto3" json:"quotes,omitempty"`
	Parameters map[string]float32 `protobuf:"bytes,2,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
}

func (x *IndicatorRequest) Reset() {
	*x = IndicatorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_indicators_v1_indicators_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndicatorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndicatorRequest) ProtoMessage() {}

func (x *IndicatorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_indicators_v1_indicators_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndicatorRequest.ProtoReflect.Descriptor instead.
func (*IndicatorRequest) Descriptor() ([]byte, []int) {
	return file_proto_indicators_v1_indicators_proto_rawDescGZIP(), []int{0}
}

func (x *IndicatorRequest) GetQuotes() *v1.QuoteReply {
	if x != nil {
		return x.Quotes
	}
	return nil
}

func (x *IndicatorRequest) GetParameters() map[string]float32 {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type IndicatorReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Indicator []float32                `protobuf:"fixed32,1,rep,packed,name=indicator,proto3" json:"indicator,omitempty"`
	Close     []float32                `protobuf:"fixed32,2,rep,packed,name=close,proto3" json:"close,omitempty"`
	CreatedAt []*timestamppb.Timestamp `protobuf:"bytes,3,rep,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *IndicatorReply) Reset() {
	*x = IndicatorReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_indicators_v1_indicators_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndicatorReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndicatorReply) ProtoMessage() {}

func (x *IndicatorReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_indicators_v1_indicators_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndicatorReply.ProtoReflect.Descriptor instead.
func (*IndicatorReply) Descriptor() ([]byte, []int) {
	return file_proto_indicators_v1_indicators_proto_rawDescGZIP(), []int{1}
}

func (x *IndicatorReply) GetIndicator() []float32 {
	if x != nil {
		return x.Indicator
	}
	return nil
}

func (x *IndicatorReply) GetClose() []float32 {
	if x != nil {
		return x.Close
	}
	return nil
}

func (x *IndicatorReply) GetCreatedAt() []*timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type IndicatorBBandsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Indicators *IndicatorBBandsReply_Indicator `protobuf:"bytes,1,opt,name=indicators,proto3" json:"indicators,omitempty"`
	Close      []float32                       `protobuf:"fixed32,2,rep,packed,name=close,proto3" json:"close,omitempty"`
	CreatedAt  []*timestamppb.Timestamp        `protobuf:"bytes,3,rep,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *IndicatorBBandsReply) Reset() {
	*x = IndicatorBBandsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_indicators_v1_indicators_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndicatorBBandsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndicatorBBandsReply) ProtoMessage() {}

func (x *IndicatorBBandsReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_indicators_v1_indicators_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndicatorBBandsReply.ProtoReflect.Descriptor instead.
func (*IndicatorBBandsReply) Descriptor() ([]byte, []int) {
	return file_proto_indicators_v1_indicators_proto_rawDescGZIP(), []int{2}
}

func (x *IndicatorBBandsReply) GetIndicators() *IndicatorBBandsReply_Indicator {
	if x != nil {
		return x.Indicators
	}
	return nil
}

func (x *IndicatorBBandsReply) GetClose() []float32 {
	if x != nil {
		return x.Close
	}
	return nil
}

func (x *IndicatorBBandsReply) GetCreatedAt() []*timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type IndicatorRsiReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Indicators *IndicatorRsiReply_Indicator `protobuf:"bytes,1,opt,name=indicators,proto3" json:"indicators,omitempty"`
	Close      []float32                    `protobuf:"fixed32,2,rep,packed,name=close,proto3" json:"close,omitempty"`
	CreatedAt  []*timestamppb.Timestamp     `protobuf:"bytes,3,rep,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *IndicatorRsiReply) Reset() {
	*x = IndicatorRsiReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_indicators_v1_indicators_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndicatorRsiReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndicatorRsiReply) ProtoMessage() {}

func (x *IndicatorRsiReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_indicators_v1_indicators_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndicatorRsiReply.ProtoReflect.Descriptor instead.
func (*IndicatorRsiReply) Descriptor() ([]byte, []int) {
	return file_proto_indicators_v1_indicators_proto_rawDescGZIP(), []int{3}
}

func (x *IndicatorRsiReply) GetIndicators() *IndicatorRsiReply_Indicator {
	if x != nil {
		return x.Indicators
	}
	return nil
}

func (x *IndicatorRsiReply) GetClose() []float32 {
	if x != nil {
		return x.Close
	}
	return nil
}

func (x *IndicatorRsiReply) GetCreatedAt() []*timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type IndicatorMacdReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Indicators *IndicatorMacdReply_Indicator `protobuf:"bytes,1,opt,name=indicators,proto3" json:"indicators,omitempty"`
	Close      []float32                     `protobuf:"fixed32,2,rep,packed,name=close,proto3" json:"close,omitempty"`
	CreatedAt  []*timestamppb.Timestamp      `protobuf:"bytes,3,rep,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *IndicatorMacdReply) Reset() {
	*x = IndicatorMacdReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_indicators_v1_indicators_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndicatorMacdReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndicatorMacdReply) ProtoMessage() {}

func (x *IndicatorMacdReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_indicators_v1_indicators_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndicatorMacdReply.ProtoReflect.Descriptor instead.
func (*IndicatorMacdReply) Descriptor() ([]byte, []int) {
	return file_proto_indicators_v1_indicators_proto_rawDescGZIP(), []int{4}
}

func (x *IndicatorMacdReply) GetIndicators() *IndicatorMacdReply_Indicator {
	if x != nil {
		return x.Indicators
	}
	return nil
}

func (x *IndicatorMacdReply) GetClose() []float32 {
	if x != nil {
		return x.Close
	}
	return nil
}

func (x *IndicatorMacdReply) GetCreatedAt() []*timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type IndicatorBBandsReply_Indicator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Upper  []float32 `protobuf:"fixed32,1,rep,packed,name=upper,proto3" json:"upper,omitempty"`
	Middle []float32 `protobuf:"fixed32,2,rep,packed,name=middle,proto3" json:"middle,omitempty"`
	Down   []float32 `protobuf:"fixed32,3,rep,packed,name=down,proto3" json:"down,omitempty"`
}

func (x *IndicatorBBandsReply_Indicator) Reset() {
	*x = IndicatorBBandsReply_Indicator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_indicators_v1_indicators_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndicatorBBandsReply_Indicator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndicatorBBandsReply_Indicator) ProtoMessage() {}

func (x *IndicatorBBandsReply_Indicator) ProtoReflect() protoreflect.Message {
	mi := &file_proto_indicators_v1_indicators_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndicatorBBandsReply_Indicator.ProtoReflect.Descriptor instead.
func (*IndicatorBBandsReply_Indicator) Descriptor() ([]byte, []int) {
	return file_proto_indicators_v1_indicators_proto_rawDescGZIP(), []int{2, 0}
}

func (x *IndicatorBBandsReply_Indicator) GetUpper() []float32 {
	if x != nil {
		return x.Upper
	}
	return nil
}

func (x *IndicatorBBandsReply_Indicator) GetMiddle() []float32 {
	if x != nil {
		return x.Middle
	}
	return nil
}

func (x *IndicatorBBandsReply_Indicator) GetDown() []float32 {
	if x != nil {
		return x.Down
	}
	return nil
}

type IndicatorRsiReply_Indicator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fast []float32 `protobuf:"fixed32,1,rep,packed,name=fast,proto3" json:"fast,omitempty"`
	Slow []float32 `protobuf:"fixed32,2,rep,packed,name=slow,proto3" json:"slow,omitempty"`
}

func (x *IndicatorRsiReply_Indicator) Reset() {
	*x = IndicatorRsiReply_Indicator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_indicators_v1_indicators_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndicatorRsiReply_Indicator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndicatorRsiReply_Indicator) ProtoMessage() {}

func (x *IndicatorRsiReply_Indicator) ProtoReflect() protoreflect.Message {
	mi := &file_proto_indicators_v1_indicators_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndicatorRsiReply_Indicator.ProtoReflect.Descriptor instead.
func (*IndicatorRsiReply_Indicator) Descriptor() ([]byte, []int) {
	return file_proto_indicators_v1_indicators_proto_rawDescGZIP(), []int{3, 0}
}

func (x *IndicatorRsiReply_Indicator) GetFast() []float32 {
	if x != nil {
		return x.Fast
	}
	return nil
}

func (x *IndicatorRsiReply_Indicator) GetSlow() []float32 {
	if x != nil {
		return x.Slow
	}
	return nil
}

type IndicatorMacdReply_Indicator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fast   []float32 `protobuf:"fixed32,1,rep,packed,name=fast,proto3" json:"fast,omitempty"`
	Slow   []float32 `protobuf:"fixed32,2,rep,packed,name=slow,proto3" json:"slow,omitempty"`
	Signal []float32 `protobuf:"fixed32,3,rep,packed,name=signal,proto3" json:"signal,omitempty"`
}

func (x *IndicatorMacdReply_Indicator) Reset() {
	*x = IndicatorMacdReply_Indicator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_indicators_v1_indicators_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndicatorMacdReply_Indicator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndicatorMacdReply_Indicator) ProtoMessage() {}

func (x *IndicatorMacdReply_Indicator) ProtoReflect() protoreflect.Message {
	mi := &file_proto_indicators_v1_indicators_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndicatorMacdReply_Indicator.ProtoReflect.Descriptor instead.
func (*IndicatorMacdReply_Indicator) Descriptor() ([]byte, []int) {
	return file_proto_indicators_v1_indicators_proto_rawDescGZIP(), []int{4, 0}
}

func (x *IndicatorMacdReply_Indicator) GetFast() []float32 {
	if x != nil {
		return x.Fast
	}
	return nil
}

func (x *IndicatorMacdReply_Indicator) GetSlow() []float32 {
	if x != nil {
		return x.Slow
	}
	return nil
}

func (x *IndicatorMacdReply_Indicator) GetSignal() []float32 {
	if x != nil {
		return x.Signal
	}
	return nil
}

var File_proto_indicators_v1_indicators_proto protoreflect.FileDescriptor

var file_proto_indicators_v1_indicators_proto_rawDesc = []byte{
	0x0a, 0x24, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x71,
	0x75, 0x6f, 0x74, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe5, 0x01, 0x0a, 0x10,
	0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x37, 0x0a, 0x06, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f,
	0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x06, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x0a, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x9a, 0x01, 0x02, 0x08, 0x01, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x7f, 0x0a, 0x0e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x02, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x02, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x22, 0x85, 0x02, 0x0a, 0x14, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x42, 0x42, 0x61, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4d, 0x0a,
	0x0a, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x42, 0x61, 0x6e, 0x64,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x52, 0x0a, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x02, 0x52, 0x05, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x1a, 0x4d, 0x0a,
	0x09, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x70,
	0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x02, 0x52, 0x05, 0x75, 0x70, 0x70, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x02,
	0x52, 0x06, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6f, 0x77, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x02, 0x52, 0x04, 0x64, 0x6f, 0x77, 0x6e, 0x22, 0xe5, 0x01, 0x0a,
	0x11, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x73, 0x69, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x4a, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x52, 0x73, 0x69, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x52, 0x0a, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x02, 0x52, 0x05, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x1a,
	0x33, 0x0a, 0x09, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x66, 0x61, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x02, 0x52, 0x04, 0x66, 0x61, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x03, 0x28, 0x02, 0x52, 0x04,
	0x73, 0x6c, 0x6f, 0x77, 0x22, 0xff, 0x01, 0x0a, 0x12, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x4d, 0x61, 0x63, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4b, 0x0a, 0x0a, 0x69,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x61, 0x63, 0x64, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x69, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x02, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x39,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x1a, 0x4b, 0x0a, 0x09, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x61, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x02, 0x52, 0x04, 0x66, 0x61, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c,
	0x6f, 0x77, 0x18, 0x02, 0x20, 0x03, 0x28, 0x02, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x77, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x03, 0x28, 0x02, 0x52, 0x06,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x32, 0x8a, 0x0e, 0x0a, 0x0a, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x74, 0x0a, 0x08, 0x41, 0x56, 0x47, 0x50, 0x52, 0x49, 0x43,
	0x45, 0x12, 0x1f, 0x2e, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x71,
	0x75, 0x6f, 0x74, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2f,
	0x61, 0x76, 0x67, 0x70, 0x72, 0x69, 0x63, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x6a, 0x0a, 0x03, 0x53,
	0x4d, 0x41, 0x12, 0x1f, 0x2e, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x18, 0x2f, 0x76, 0x31, 0x2f,
	0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x2f, 0x73, 0x6d, 0x61, 0x3a, 0x01, 0x2a, 0x12, 0x6a, 0x0a, 0x03, 0x45, 0x4d, 0x41, 0x12, 0x1f,
	0x2e, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x23,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x6f, 0x74,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x65, 0x6d, 0x61,
	0x3a, 0x01, 0x2a, 0x12, 0x6a, 0x0a, 0x03, 0x57, 0x4d, 0x41, 0x12, 0x1f, 0x2e, 0x69, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x69, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1d, 0x22, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x77, 0x6d, 0x61, 0x3a, 0x01, 0x2a, 0x12,
	0x71, 0x0a, 0x03, 0x56, 0x41, 0x52, 0x12, 0x1f, 0x2e, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x22, 0x1f,
	0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x2f, 0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x3a,
	0x01, 0x2a, 0x12, 0x6d, 0x0a, 0x03, 0x52, 0x53, 0x49, 0x12, 0x1f, 0x2e, 0x69, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x69, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x52, 0x73, 0x69, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x23, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1d, 0x22, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x72, 0x73, 0x69, 0x3a, 0x01,
	0x2a, 0x12, 0x70, 0x0a, 0x06, 0x53, 0x54, 0x44, 0x44, 0x45, 0x56, 0x12, 0x1f, 0x2e, 0x69, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x69,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x26, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x64, 0x64, 0x65, 0x76,
	0x3a, 0x01, 0x2a, 0x12, 0x78, 0x0a, 0x0f, 0x4c, 0x49, 0x4e, 0x45, 0x41, 0x52, 0x52, 0x45, 0x47,
	0x5f, 0x53, 0x4c, 0x4f, 0x50, 0x45, 0x12, 0x1f, 0x2e, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1a,
	0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x2f, 0x73, 0x6c, 0x6f, 0x70, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x6a, 0x0a,
	0x03, 0x44, 0x4d, 0x49, 0x12, 0x1f, 0x2e, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x18, 0x2f, 0x76,
	0x31, 0x2f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x2f, 0x64, 0x6d, 0x69, 0x3a, 0x01, 0x2a, 0x12, 0x6a, 0x0a, 0x03, 0x41, 0x44, 0x58,
	0x12, 0x1f, 0x2e, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1d, 0x2e, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75,
	0x6f, 0x74, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x61,
	0x64, 0x78, 0x3a, 0x01, 0x2a, 0x12, 0x70, 0x0a, 0x04, 0x4d, 0x41, 0x43, 0x44, 0x12, 0x1f, 0x2e,
	0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x61, 0x63, 0x64, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x71,
	0x75, 0x6f, 0x74, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2f,
	0x6d, 0x61, 0x63, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0x6a, 0x0a, 0x03, 0x41, 0x54, 0x52, 0x12, 0x1f,
	0x2e, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x23,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x6f, 0x74,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x74, 0x72,
	0x3a, 0x01, 0x2a, 0x12, 0x6a, 0x0a, 0x03, 0x43, 0x43, 0x49, 0x12, 0x1f, 0x2e, 0x69, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x69, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1d, 0x22, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x63, 0x63, 0x69, 0x3a, 0x01, 0x2a, 0x12,
	0x76, 0x0a, 0x06, 0x42, 0x42, 0x41, 0x4e, 0x44, 0x53, 0x12, 0x1f, 0x2e, 0x69, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x69, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x42, 0x42, 0x61, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x6f,
	0x74, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x62, 0x62,
	0x61, 0x6e, 0x64, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x6e, 0x0a, 0x05, 0x57, 0x49, 0x4c, 0x4c, 0x52,
	0x12, 0x1f, 0x2e, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1d, 0x2e, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75,
	0x6f, 0x74, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x77,
	0x69, 0x6c, 0x6c, 0x72, 0x3a, 0x01, 0x2a, 0x12, 0x6a, 0x0a, 0x03, 0x53, 0x41, 0x52, 0x12, 0x1f,
	0x2e, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x23,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x6f, 0x74,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x73, 0x61, 0x72,
	0x3a, 0x01, 0x2a, 0x42, 0x93, 0x03, 0x0a, 0x1c, 0x64, 0x65, 0x76, 0x2e, 0x6b, 0x72, 0x61, 0x74,
	0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x73, 0x2e, 0x76, 0x31, 0x42, 0x14, 0x41, 0x50, 0x49, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x56, 0x31, 0x50, 0x01, 0x5a, 0x3e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x72, 0x6b, 0x74, 0x6f, 0x73, 0x2d,
	0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x62, 0x75, 0x66, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x76, 0x31, 0x3b,
	0x76, 0x31, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x92, 0x41, 0x99, 0x02,
	0x12, 0x85, 0x01, 0x0a, 0x0f, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x20,
	0x41, 0x50, 0x49, 0x73, 0x12, 0x0f, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0x20, 0x41, 0x50, 0x49, 0x73, 0x22, 0x5c, 0x0a, 0x16, 0x41, 0x72, 0x6b, 0x74, 0x6f, 0x73, 0x20,
	0x56, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x25, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x72, 0x6b, 0x74, 0x6f, 0x73, 0x2d, 0x76, 0x65, 0x6e, 0x74, 0x75,
	0x72, 0x65, 0x2f, 0x62, 0x75, 0x66, 0x1a, 0x1b, 0x6f, 0x73, 0x73, 0x40, 0x61, 0x72, 0x6b, 0x74,
	0x6f, 0x73, 0x2d, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x32, 0x03, 0x31, 0x2e, 0x30, 0x2a, 0x02, 0x01, 0x02, 0x32, 0x10, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e,
	0x5a, 0x59, 0x0a, 0x57, 0x0a, 0x06, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x12, 0x4d, 0x08, 0x02,
	0x12, 0x38, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2c, 0x20, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x20, 0x62, 0x79, 0x20, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x3a, 0x20, 0x42, 0x65, 0x61, 0x72,
	0x65, 0x72, 0x20, 0x3c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x3e, 0x1a, 0x0d, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x02, 0x62, 0x0c, 0x0a, 0x0a, 0x0a,
	0x06, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x12, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_proto_indicators_v1_indicators_proto_rawDescOnce sync.Once
	file_proto_indicators_v1_indicators_proto_rawDescData = file_proto_indicators_v1_indicators_proto_rawDesc
)

func file_proto_indicators_v1_indicators_proto_rawDescGZIP() []byte {
	file_proto_indicators_v1_indicators_proto_rawDescOnce.Do(func() {
		file_proto_indicators_v1_indicators_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_indicators_v1_indicators_proto_rawDescData)
	})
	return file_proto_indicators_v1_indicators_proto_rawDescData
}

var file_proto_indicators_v1_indicators_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_proto_indicators_v1_indicators_proto_goTypes = []interface{}{
	(*IndicatorRequest)(nil),               // 0: indicators.v1.IndicatorRequest
	(*IndicatorReply)(nil),                 // 1: indicators.v1.IndicatorReply
	(*IndicatorBBandsReply)(nil),           // 2: indicators.v1.IndicatorBBandsReply
	(*IndicatorRsiReply)(nil),              // 3: indicators.v1.IndicatorRsiReply
	(*IndicatorMacdReply)(nil),             // 4: indicators.v1.IndicatorMacdReply
	nil,                                    // 5: indicators.v1.IndicatorRequest.ParametersEntry
	(*IndicatorBBandsReply_Indicator)(nil), // 6: indicators.v1.IndicatorBBandsReply.Indicator
	(*IndicatorRsiReply_Indicator)(nil),    // 7: indicators.v1.IndicatorRsiReply.Indicator
	(*IndicatorMacdReply_Indicator)(nil),   // 8: indicators.v1.IndicatorMacdReply.Indicator
	(*v1.QuoteReply)(nil),                  // 9: quotes.v1.QuoteReply
	(*timestamppb.Timestamp)(nil),          // 10: google.protobuf.Timestamp
}
var file_proto_indicators_v1_indicators_proto_depIdxs = []int32{
	9,  // 0: indicators.v1.IndicatorRequest.quotes:type_name -> quotes.v1.QuoteReply
	5,  // 1: indicators.v1.IndicatorRequest.parameters:type_name -> indicators.v1.IndicatorRequest.ParametersEntry
	10, // 2: indicators.v1.IndicatorReply.created_at:type_name -> google.protobuf.Timestamp
	6,  // 3: indicators.v1.IndicatorBBandsReply.indicators:type_name -> indicators.v1.IndicatorBBandsReply.Indicator
	10, // 4: indicators.v1.IndicatorBBandsReply.created_at:type_name -> google.protobuf.Timestamp
	7,  // 5: indicators.v1.IndicatorRsiReply.indicators:type_name -> indicators.v1.IndicatorRsiReply.Indicator
	10, // 6: indicators.v1.IndicatorRsiReply.created_at:type_name -> google.protobuf.Timestamp
	8,  // 7: indicators.v1.IndicatorMacdReply.indicators:type_name -> indicators.v1.IndicatorMacdReply.Indicator
	10, // 8: indicators.v1.IndicatorMacdReply.created_at:type_name -> google.protobuf.Timestamp
	0,  // 9: indicators.v1.Indicators.AVGPRICE:input_type -> indicators.v1.IndicatorRequest
	0,  // 10: indicators.v1.Indicators.SMA:input_type -> indicators.v1.IndicatorRequest
	0,  // 11: indicators.v1.Indicators.EMA:input_type -> indicators.v1.IndicatorRequest
	0,  // 12: indicators.v1.Indicators.WMA:input_type -> indicators.v1.IndicatorRequest
	0,  // 13: indicators.v1.Indicators.VAR:input_type -> indicators.v1.IndicatorRequest
	0,  // 14: indicators.v1.Indicators.RSI:input_type -> indicators.v1.IndicatorRequest
	0,  // 15: indicators.v1.Indicators.STDDEV:input_type -> indicators.v1.IndicatorRequest
	0,  // 16: indicators.v1.Indicators.LINEARREG_SLOPE:input_type -> indicators.v1.IndicatorRequest
	0,  // 17: indicators.v1.Indicators.DMI:input_type -> indicators.v1.IndicatorRequest
	0,  // 18: indicators.v1.Indicators.ADX:input_type -> indicators.v1.IndicatorRequest
	0,  // 19: indicators.v1.Indicators.MACD:input_type -> indicators.v1.IndicatorRequest
	0,  // 20: indicators.v1.Indicators.ATR:input_type -> indicators.v1.IndicatorRequest
	0,  // 21: indicators.v1.Indicators.CCI:input_type -> indicators.v1.IndicatorRequest
	0,  // 22: indicators.v1.Indicators.BBANDS:input_type -> indicators.v1.IndicatorRequest
	0,  // 23: indicators.v1.Indicators.WILLR:input_type -> indicators.v1.IndicatorRequest
	0,  // 24: indicators.v1.Indicators.SAR:input_type -> indicators.v1.IndicatorRequest
	1,  // 25: indicators.v1.Indicators.AVGPRICE:output_type -> indicators.v1.IndicatorReply
	1,  // 26: indicators.v1.Indicators.SMA:output_type -> indicators.v1.IndicatorReply
	1,  // 27: indicators.v1.Indicators.EMA:output_type -> indicators.v1.IndicatorReply
	1,  // 28: indicators.v1.Indicators.WMA:output_type -> indicators.v1.IndicatorReply
	1,  // 29: indicators.v1.Indicators.VAR:output_type -> indicators.v1.IndicatorReply
	3,  // 30: indicators.v1.Indicators.RSI:output_type -> indicators.v1.IndicatorRsiReply
	1,  // 31: indicators.v1.Indicators.STDDEV:output_type -> indicators.v1.IndicatorReply
	1,  // 32: indicators.v1.Indicators.LINEARREG_SLOPE:output_type -> indicators.v1.IndicatorReply
	1,  // 33: indicators.v1.Indicators.DMI:output_type -> indicators.v1.IndicatorReply
	1,  // 34: indicators.v1.Indicators.ADX:output_type -> indicators.v1.IndicatorReply
	4,  // 35: indicators.v1.Indicators.MACD:output_type -> indicators.v1.IndicatorMacdReply
	1,  // 36: indicators.v1.Indicators.ATR:output_type -> indicators.v1.IndicatorReply
	1,  // 37: indicators.v1.Indicators.CCI:output_type -> indicators.v1.IndicatorReply
	2,  // 38: indicators.v1.Indicators.BBANDS:output_type -> indicators.v1.IndicatorBBandsReply
	1,  // 39: indicators.v1.Indicators.WILLR:output_type -> indicators.v1.IndicatorReply
	1,  // 40: indicators.v1.Indicators.SAR:output_type -> indicators.v1.IndicatorReply
	25, // [25:41] is the sub-list for method output_type
	9,  // [9:25] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_proto_indicators_v1_indicators_proto_init() }
func file_proto_indicators_v1_indicators_proto_init() {
	if File_proto_indicators_v1_indicators_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_indicators_v1_indicators_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndicatorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_indicators_v1_indicators_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndicatorReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_indicators_v1_indicators_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndicatorBBandsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_indicators_v1_indicators_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndicatorRsiReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_indicators_v1_indicators_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndicatorMacdReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_indicators_v1_indicators_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndicatorBBandsReply_Indicator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_indicators_v1_indicators_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndicatorRsiReply_Indicator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_indicators_v1_indicators_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndicatorMacdReply_Indicator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_indicators_v1_indicators_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_indicators_v1_indicators_proto_goTypes,
		DependencyIndexes: file_proto_indicators_v1_indicators_proto_depIdxs,
		MessageInfos:      file_proto_indicators_v1_indicators_proto_msgTypes,
	}.Build()
	File_proto_indicators_v1_indicators_proto = out.File
	file_proto_indicators_v1_indicators_proto_rawDesc = nil
	file_proto_indicators_v1_indicators_proto_goTypes = nil
	file_proto_indicators_v1_indicators_proto_depIdxs = nil
}
