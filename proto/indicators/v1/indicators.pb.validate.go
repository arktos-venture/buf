// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/indicators/v1/indicators.proto

package v1Indicators

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on IndicatorRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IndicatorRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IndicatorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IndicatorRequestMultiError, or nil if none found.
func (m *IndicatorRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IndicatorRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetQuotes() == nil {
		err := IndicatorRequestValidationError{
			field:  "Quotes",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetQuotes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IndicatorRequestValidationError{
					field:  "Quotes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IndicatorRequestValidationError{
					field:  "Quotes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQuotes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IndicatorRequestValidationError{
				field:  "Quotes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetParameters()) < 1 {
		err := IndicatorRequestValidationError{
			field:  "Parameters",
			reason: "value must contain at least 1 pair(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IndicatorRequestMultiError(errors)
	}

	return nil
}

// IndicatorRequestMultiError is an error wrapping multiple validation errors
// returned by IndicatorRequest.ValidateAll() if the designated constraints
// aren't met.
type IndicatorRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IndicatorRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IndicatorRequestMultiError) AllErrors() []error { return m }

// IndicatorRequestValidationError is the validation error returned by
// IndicatorRequest.Validate if the designated constraints aren't met.
type IndicatorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IndicatorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IndicatorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IndicatorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IndicatorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IndicatorRequestValidationError) ErrorName() string { return "IndicatorRequestValidationError" }

// Error satisfies the builtin error interface
func (e IndicatorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIndicatorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IndicatorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IndicatorRequestValidationError{}

// Validate checks the field values on IndicatorReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IndicatorReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IndicatorReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IndicatorReplyMultiError,
// or nil if none found.
func (m *IndicatorReply) ValidateAll() error {
	return m.validate(true)
}

func (m *IndicatorReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCreatedAt() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IndicatorReplyValidationError{
						field:  fmt.Sprintf("CreatedAt[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IndicatorReplyValidationError{
						field:  fmt.Sprintf("CreatedAt[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IndicatorReplyValidationError{
					field:  fmt.Sprintf("CreatedAt[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return IndicatorReplyMultiError(errors)
	}

	return nil
}

// IndicatorReplyMultiError is an error wrapping multiple validation errors
// returned by IndicatorReply.ValidateAll() if the designated constraints
// aren't met.
type IndicatorReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IndicatorReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IndicatorReplyMultiError) AllErrors() []error { return m }

// IndicatorReplyValidationError is the validation error returned by
// IndicatorReply.Validate if the designated constraints aren't met.
type IndicatorReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IndicatorReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IndicatorReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IndicatorReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IndicatorReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IndicatorReplyValidationError) ErrorName() string { return "IndicatorReplyValidationError" }

// Error satisfies the builtin error interface
func (e IndicatorReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIndicatorReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IndicatorReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IndicatorReplyValidationError{}

// Validate checks the field values on IndicatorBBandsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IndicatorBBandsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IndicatorBBandsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IndicatorBBandsReplyMultiError, or nil if none found.
func (m *IndicatorBBandsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *IndicatorBBandsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetIndicators()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IndicatorBBandsReplyValidationError{
					field:  "Indicators",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IndicatorBBandsReplyValidationError{
					field:  "Indicators",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIndicators()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IndicatorBBandsReplyValidationError{
				field:  "Indicators",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetCreatedAt() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IndicatorBBandsReplyValidationError{
						field:  fmt.Sprintf("CreatedAt[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IndicatorBBandsReplyValidationError{
						field:  fmt.Sprintf("CreatedAt[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IndicatorBBandsReplyValidationError{
					field:  fmt.Sprintf("CreatedAt[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return IndicatorBBandsReplyMultiError(errors)
	}

	return nil
}

// IndicatorBBandsReplyMultiError is an error wrapping multiple validation
// errors returned by IndicatorBBandsReply.ValidateAll() if the designated
// constraints aren't met.
type IndicatorBBandsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IndicatorBBandsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IndicatorBBandsReplyMultiError) AllErrors() []error { return m }

// IndicatorBBandsReplyValidationError is the validation error returned by
// IndicatorBBandsReply.Validate if the designated constraints aren't met.
type IndicatorBBandsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IndicatorBBandsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IndicatorBBandsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IndicatorBBandsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IndicatorBBandsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IndicatorBBandsReplyValidationError) ErrorName() string {
	return "IndicatorBBandsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e IndicatorBBandsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIndicatorBBandsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IndicatorBBandsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IndicatorBBandsReplyValidationError{}

// Validate checks the field values on IndicatorRsiReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IndicatorRsiReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IndicatorRsiReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IndicatorRsiReplyMultiError, or nil if none found.
func (m *IndicatorRsiReply) ValidateAll() error {
	return m.validate(true)
}

func (m *IndicatorRsiReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetIndicators()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IndicatorRsiReplyValidationError{
					field:  "Indicators",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IndicatorRsiReplyValidationError{
					field:  "Indicators",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIndicators()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IndicatorRsiReplyValidationError{
				field:  "Indicators",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetCreatedAt() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IndicatorRsiReplyValidationError{
						field:  fmt.Sprintf("CreatedAt[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IndicatorRsiReplyValidationError{
						field:  fmt.Sprintf("CreatedAt[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IndicatorRsiReplyValidationError{
					field:  fmt.Sprintf("CreatedAt[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return IndicatorRsiReplyMultiError(errors)
	}

	return nil
}

// IndicatorRsiReplyMultiError is an error wrapping multiple validation errors
// returned by IndicatorRsiReply.ValidateAll() if the designated constraints
// aren't met.
type IndicatorRsiReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IndicatorRsiReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IndicatorRsiReplyMultiError) AllErrors() []error { return m }

// IndicatorRsiReplyValidationError is the validation error returned by
// IndicatorRsiReply.Validate if the designated constraints aren't met.
type IndicatorRsiReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IndicatorRsiReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IndicatorRsiReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IndicatorRsiReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IndicatorRsiReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IndicatorRsiReplyValidationError) ErrorName() string {
	return "IndicatorRsiReplyValidationError"
}

// Error satisfies the builtin error interface
func (e IndicatorRsiReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIndicatorRsiReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IndicatorRsiReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IndicatorRsiReplyValidationError{}

// Validate checks the field values on IndicatorMacdReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IndicatorMacdReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IndicatorMacdReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IndicatorMacdReplyMultiError, or nil if none found.
func (m *IndicatorMacdReply) ValidateAll() error {
	return m.validate(true)
}

func (m *IndicatorMacdReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetIndicators()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IndicatorMacdReplyValidationError{
					field:  "Indicators",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IndicatorMacdReplyValidationError{
					field:  "Indicators",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIndicators()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IndicatorMacdReplyValidationError{
				field:  "Indicators",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetCreatedAt() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IndicatorMacdReplyValidationError{
						field:  fmt.Sprintf("CreatedAt[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IndicatorMacdReplyValidationError{
						field:  fmt.Sprintf("CreatedAt[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IndicatorMacdReplyValidationError{
					field:  fmt.Sprintf("CreatedAt[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return IndicatorMacdReplyMultiError(errors)
	}

	return nil
}

// IndicatorMacdReplyMultiError is an error wrapping multiple validation errors
// returned by IndicatorMacdReply.ValidateAll() if the designated constraints
// aren't met.
type IndicatorMacdReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IndicatorMacdReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IndicatorMacdReplyMultiError) AllErrors() []error { return m }

// IndicatorMacdReplyValidationError is the validation error returned by
// IndicatorMacdReply.Validate if the designated constraints aren't met.
type IndicatorMacdReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IndicatorMacdReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IndicatorMacdReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IndicatorMacdReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IndicatorMacdReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IndicatorMacdReplyValidationError) ErrorName() string {
	return "IndicatorMacdReplyValidationError"
}

// Error satisfies the builtin error interface
func (e IndicatorMacdReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIndicatorMacdReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IndicatorMacdReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IndicatorMacdReplyValidationError{}

// Validate checks the field values on IndicatorBBandsReply_Indicator with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IndicatorBBandsReply_Indicator) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IndicatorBBandsReply_Indicator with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IndicatorBBandsReply_IndicatorMultiError, or nil if none found.
func (m *IndicatorBBandsReply_Indicator) ValidateAll() error {
	return m.validate(true)
}

func (m *IndicatorBBandsReply_Indicator) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return IndicatorBBandsReply_IndicatorMultiError(errors)
	}

	return nil
}

// IndicatorBBandsReply_IndicatorMultiError is an error wrapping multiple
// validation errors returned by IndicatorBBandsReply_Indicator.ValidateAll()
// if the designated constraints aren't met.
type IndicatorBBandsReply_IndicatorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IndicatorBBandsReply_IndicatorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IndicatorBBandsReply_IndicatorMultiError) AllErrors() []error { return m }

// IndicatorBBandsReply_IndicatorValidationError is the validation error
// returned by IndicatorBBandsReply_Indicator.Validate if the designated
// constraints aren't met.
type IndicatorBBandsReply_IndicatorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IndicatorBBandsReply_IndicatorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IndicatorBBandsReply_IndicatorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IndicatorBBandsReply_IndicatorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IndicatorBBandsReply_IndicatorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IndicatorBBandsReply_IndicatorValidationError) ErrorName() string {
	return "IndicatorBBandsReply_IndicatorValidationError"
}

// Error satisfies the builtin error interface
func (e IndicatorBBandsReply_IndicatorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIndicatorBBandsReply_Indicator.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IndicatorBBandsReply_IndicatorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IndicatorBBandsReply_IndicatorValidationError{}

// Validate checks the field values on IndicatorRsiReply_Indicator with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IndicatorRsiReply_Indicator) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IndicatorRsiReply_Indicator with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IndicatorRsiReply_IndicatorMultiError, or nil if none found.
func (m *IndicatorRsiReply_Indicator) ValidateAll() error {
	return m.validate(true)
}

func (m *IndicatorRsiReply_Indicator) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return IndicatorRsiReply_IndicatorMultiError(errors)
	}

	return nil
}

// IndicatorRsiReply_IndicatorMultiError is an error wrapping multiple
// validation errors returned by IndicatorRsiReply_Indicator.ValidateAll() if
// the designated constraints aren't met.
type IndicatorRsiReply_IndicatorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IndicatorRsiReply_IndicatorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IndicatorRsiReply_IndicatorMultiError) AllErrors() []error { return m }

// IndicatorRsiReply_IndicatorValidationError is the validation error returned
// by IndicatorRsiReply_Indicator.Validate if the designated constraints
// aren't met.
type IndicatorRsiReply_IndicatorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IndicatorRsiReply_IndicatorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IndicatorRsiReply_IndicatorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IndicatorRsiReply_IndicatorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IndicatorRsiReply_IndicatorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IndicatorRsiReply_IndicatorValidationError) ErrorName() string {
	return "IndicatorRsiReply_IndicatorValidationError"
}

// Error satisfies the builtin error interface
func (e IndicatorRsiReply_IndicatorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIndicatorRsiReply_Indicator.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IndicatorRsiReply_IndicatorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IndicatorRsiReply_IndicatorValidationError{}

// Validate checks the field values on IndicatorMacdReply_Indicator with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IndicatorMacdReply_Indicator) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IndicatorMacdReply_Indicator with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IndicatorMacdReply_IndicatorMultiError, or nil if none found.
func (m *IndicatorMacdReply_Indicator) ValidateAll() error {
	return m.validate(true)
}

func (m *IndicatorMacdReply_Indicator) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return IndicatorMacdReply_IndicatorMultiError(errors)
	}

	return nil
}

// IndicatorMacdReply_IndicatorMultiError is an error wrapping multiple
// validation errors returned by IndicatorMacdReply_Indicator.ValidateAll() if
// the designated constraints aren't met.
type IndicatorMacdReply_IndicatorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IndicatorMacdReply_IndicatorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IndicatorMacdReply_IndicatorMultiError) AllErrors() []error { return m }

// IndicatorMacdReply_IndicatorValidationError is the validation error returned
// by IndicatorMacdReply_Indicator.Validate if the designated constraints
// aren't met.
type IndicatorMacdReply_IndicatorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IndicatorMacdReply_IndicatorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IndicatorMacdReply_IndicatorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IndicatorMacdReply_IndicatorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IndicatorMacdReply_IndicatorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IndicatorMacdReply_IndicatorValidationError) ErrorName() string {
	return "IndicatorMacdReply_IndicatorValidationError"
}

// Error satisfies the builtin error interface
func (e IndicatorMacdReply_IndicatorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIndicatorMacdReply_Indicator.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IndicatorMacdReply_IndicatorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IndicatorMacdReply_IndicatorValidationError{}
