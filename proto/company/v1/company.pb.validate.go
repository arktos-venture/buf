// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/company/v1/company.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CompanyRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CompanyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompanyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CompanyRequestMultiError,
// or nil if none found.
func (m *CompanyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CompanyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetTicker()); l < 1 || l > 8 {
		err := CompanyRequestValidationError{
			field:  "Ticker",
			reason: "value length must be between 1 and 8 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCurrency()) != 3 {
		err := CompanyRequestValidationError{
			field:  "Currency",
			reason: "value length must be 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if l := utf8.RuneCountInString(m.GetExchange()); l < 1 || l > 8 {
		err := CompanyRequestValidationError{
			field:  "Exchange",
			reason: "value length must be between 1 and 8 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CompanyRequestMultiError(errors)
	}

	return nil
}

// CompanyRequestMultiError is an error wrapping multiple validation errors
// returned by CompanyRequest.ValidateAll() if the designated constraints
// aren't met.
type CompanyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompanyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompanyRequestMultiError) AllErrors() []error { return m }

// CompanyRequestValidationError is the validation error returned by
// CompanyRequest.Validate if the designated constraints aren't met.
type CompanyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompanyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompanyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompanyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompanyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompanyRequestValidationError) ErrorName() string { return "CompanyRequestValidationError" }

// Error satisfies the builtin error interface
func (e CompanyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompanyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompanyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompanyRequestValidationError{}

// Validate checks the field values on CompanySearchByIDsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompanySearchByIDsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompanySearchByIDsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompanySearchByIDsRequestMultiError, or nil if none found.
func (m *CompanySearchByIDsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CompanySearchByIDsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetCurrency()) != 3 {
		err := CompanySearchByIDsRequestValidationError{
			field:  "Currency",
			reason: "value length must be 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if l := len(m.GetIds()); l < 1 || l > 20 {
		err := CompanySearchByIDsRequestValidationError{
			field:  "Ids",
			reason: "value must contain between 1 and 20 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CompanySearchByIDsRequestMultiError(errors)
	}

	return nil
}

// CompanySearchByIDsRequestMultiError is an error wrapping multiple validation
// errors returned by CompanySearchByIDsRequest.ValidateAll() if the
// designated constraints aren't met.
type CompanySearchByIDsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompanySearchByIDsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompanySearchByIDsRequestMultiError) AllErrors() []error { return m }

// CompanySearchByIDsRequestValidationError is the validation error returned by
// CompanySearchByIDsRequest.Validate if the designated constraints aren't met.
type CompanySearchByIDsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompanySearchByIDsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompanySearchByIDsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompanySearchByIDsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompanySearchByIDsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompanySearchByIDsRequestValidationError) ErrorName() string {
	return "CompanySearchByIDsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CompanySearchByIDsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompanySearchByIDsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompanySearchByIDsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompanySearchByIDsRequestValidationError{}

// Validate checks the field values on Filter with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Filter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Filter with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in FilterMultiError, or nil if none found.
func (m *Filter) ValidateAll() error {
	return m.validate(true)
}

func (m *Filter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetExchanges()) > 0 {

		_Filter_Exchanges_Unique := make(map[string]struct{}, len(m.GetExchanges()))

		for idx, item := range m.GetExchanges() {
			_, _ = idx, item

			if _, exists := _Filter_Exchanges_Unique[item]; exists {
				err := FilterValidationError{
					field:  fmt.Sprintf("Exchanges[%v]", idx),
					reason: "repeated value must contain unique items",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			} else {
				_Filter_Exchanges_Unique[item] = struct{}{}
			}

			if l := utf8.RuneCountInString(item); l < 1 || l > 8 {
				err := FilterValidationError{
					field:  fmt.Sprintf("Exchanges[%v]", idx),
					reason: "value length must be between 1 and 8 runes, inclusive",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if len(m.GetIndustries()) > 0 {

		_Filter_Industries_Unique := make(map[int64]struct{}, len(m.GetIndustries()))

		for idx, item := range m.GetIndustries() {
			_, _ = idx, item

			if _, exists := _Filter_Industries_Unique[item]; exists {
				err := FilterValidationError{
					field:  fmt.Sprintf("Industries[%v]", idx),
					reason: "repeated value must contain unique items",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			} else {
				_Filter_Industries_Unique[item] = struct{}{}
			}

			if val := item; val < 5010101010 || val > 6310301010 {
				err := FilterValidationError{
					field:  fmt.Sprintf("Industries[%v]", idx),
					reason: "value must be inside range [5010101010, 6310301010]",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if len(m.GetCountries()) > 0 {

		_Filter_Countries_Unique := make(map[string]struct{}, len(m.GetCountries()))

		for idx, item := range m.GetCountries() {
			_, _ = idx, item

			if _, exists := _Filter_Countries_Unique[item]; exists {
				err := FilterValidationError{
					field:  fmt.Sprintf("Countries[%v]", idx),
					reason: "repeated value must contain unique items",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			} else {
				_Filter_Countries_Unique[item] = struct{}{}
			}

			if utf8.RuneCountInString(item) != 2 {
				err := FilterValidationError{
					field:  fmt.Sprintf("Countries[%v]", idx),
					reason: "value length must be 2 runes",
				}
				if !all {
					return err
				}
				errors = append(errors, err)

			}

		}

	}

	if len(m.GetFiscalYearEnd()) > 0 {

		_Filter_FiscalYearEnd_Unique := make(map[int64]struct{}, len(m.GetFiscalYearEnd()))

		for idx, item := range m.GetFiscalYearEnd() {
			_, _ = idx, item

			if _, exists := _Filter_FiscalYearEnd_Unique[item]; exists {
				err := FilterValidationError{
					field:  fmt.Sprintf("FiscalYearEnd[%v]", idx),
					reason: "repeated value must contain unique items",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			} else {
				_Filter_FiscalYearEnd_Unique[item] = struct{}{}
			}

			if val := item; val < 1 || val > 12 {
				err := FilterValidationError{
					field:  fmt.Sprintf("FiscalYearEnd[%v]", idx),
					reason: "value must be inside range [1, 12]",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if len(m.GetCurrencyReport()) > 0 {

		_Filter_CurrencyReport_Unique := make(map[string]struct{}, len(m.GetCurrencyReport()))

		for idx, item := range m.GetCurrencyReport() {
			_, _ = idx, item

			if _, exists := _Filter_CurrencyReport_Unique[item]; exists {
				err := FilterValidationError{
					field:  fmt.Sprintf("CurrencyReport[%v]", idx),
					reason: "repeated value must contain unique items",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			} else {
				_Filter_CurrencyReport_Unique[item] = struct{}{}
			}

			if utf8.RuneCountInString(item) != 3 {
				err := FilterValidationError{
					field:  fmt.Sprintf("CurrencyReport[%v]", idx),
					reason: "value length must be 3 runes",
				}
				if !all {
					return err
				}
				errors = append(errors, err)

			}

		}

	}

	if len(errors) > 0 {
		return FilterMultiError(errors)
	}

	return nil
}

// FilterMultiError is an error wrapping multiple validation errors returned by
// Filter.ValidateAll() if the designated constraints aren't met.
type FilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilterMultiError) AllErrors() []error { return m }

// FilterValidationError is the validation error returned by Filter.Validate if
// the designated constraints aren't met.
type FilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilterValidationError) ErrorName() string { return "FilterValidationError" }

// Error satisfies the builtin error interface
func (e FilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilterValidationError{}

// Validate checks the field values on CompanySearchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompanySearchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompanySearchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompanySearchRequestMultiError, or nil if none found.
func (m *CompanySearchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CompanySearchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetCurrency()) != 3 {
		err := CompanySearchRequestValidationError{
			field:  "Currency",
			reason: "value length must be 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if m.GetFilters() == nil {
		err := CompanySearchRequestValidationError{
			field:  "Filters",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetFilters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CompanySearchRequestValidationError{
					field:  "Filters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CompanySearchRequestValidationError{
					field:  "Filters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompanySearchRequestValidationError{
				field:  "Filters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if val := m.GetLimit(); val < 1 || val > 150 {
		err := CompanySearchRequestValidationError{
			field:  "Limit",
			reason: "value must be inside range [1, 150]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPage() < 1 {
		err := CompanySearchRequestValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CompanySearchRequestMultiError(errors)
	}

	return nil
}

// CompanySearchRequestMultiError is an error wrapping multiple validation
// errors returned by CompanySearchRequest.ValidateAll() if the designated
// constraints aren't met.
type CompanySearchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompanySearchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompanySearchRequestMultiError) AllErrors() []error { return m }

// CompanySearchRequestValidationError is the validation error returned by
// CompanySearchRequest.Validate if the designated constraints aren't met.
type CompanySearchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompanySearchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompanySearchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompanySearchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompanySearchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompanySearchRequestValidationError) ErrorName() string {
	return "CompanySearchRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CompanySearchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompanySearchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompanySearchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompanySearchRequestValidationError{}

// Validate checks the field values on CompanyBulkSearchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompanyBulkSearchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompanyBulkSearchRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompanyBulkSearchRequestMultiError, or nil if none found.
func (m *CompanyBulkSearchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CompanyBulkSearchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetCurrency()) != 3 {
		err := CompanyBulkSearchRequestValidationError{
			field:  "Currency",
			reason: "value length must be 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if all {
		switch v := interface{}(m.GetFilters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CompanyBulkSearchRequestValidationError{
					field:  "Filters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CompanyBulkSearchRequestValidationError{
					field:  "Filters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompanyBulkSearchRequestValidationError{
				field:  "Filters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if val := m.GetLimit(); val < 1 || val > 30000 {
		err := CompanyBulkSearchRequestValidationError{
			field:  "Limit",
			reason: "value must be inside range [1, 30000]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CompanyBulkSearchRequestMultiError(errors)
	}

	return nil
}

// CompanyBulkSearchRequestMultiError is an error wrapping multiple validation
// errors returned by CompanyBulkSearchRequest.ValidateAll() if the designated
// constraints aren't met.
type CompanyBulkSearchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompanyBulkSearchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompanyBulkSearchRequestMultiError) AllErrors() []error { return m }

// CompanyBulkSearchRequestValidationError is the validation error returned by
// CompanyBulkSearchRequest.Validate if the designated constraints aren't met.
type CompanyBulkSearchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompanyBulkSearchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompanyBulkSearchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompanyBulkSearchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompanyBulkSearchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompanyBulkSearchRequestValidationError) ErrorName() string {
	return "CompanyBulkSearchRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CompanyBulkSearchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompanyBulkSearchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompanyBulkSearchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompanyBulkSearchRequestValidationError{}

// Validate checks the field values on CompanyAddress with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CompanyAddress) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompanyAddress with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CompanyAddressMultiError,
// or nil if none found.
func (m *CompanyAddress) ValidateAll() error {
	return m.validate(true)
}

func (m *CompanyAddress) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Street

	// no validation rules for City

	// no validation rules for State

	// no validation rules for Country

	if len(errors) > 0 {
		return CompanyAddressMultiError(errors)
	}

	return nil
}

// CompanyAddressMultiError is an error wrapping multiple validation errors
// returned by CompanyAddress.ValidateAll() if the designated constraints
// aren't met.
type CompanyAddressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompanyAddressMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompanyAddressMultiError) AllErrors() []error { return m }

// CompanyAddressValidationError is the validation error returned by
// CompanyAddress.Validate if the designated constraints aren't met.
type CompanyAddressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompanyAddressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompanyAddressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompanyAddressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompanyAddressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompanyAddressValidationError) ErrorName() string { return "CompanyAddressValidationError" }

// Error satisfies the builtin error interface
func (e CompanyAddressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompanyAddress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompanyAddressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompanyAddressValidationError{}

// Validate checks the field values on CompanyContact with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CompanyContact) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompanyContact with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CompanyContactMultiError,
// or nil if none found.
func (m *CompanyContact) ValidateAll() error {
	return m.validate(true)
}

func (m *CompanyContact) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Phone

	// no validation rules for Website

	// no validation rules for Email

	if len(errors) > 0 {
		return CompanyContactMultiError(errors)
	}

	return nil
}

// CompanyContactMultiError is an error wrapping multiple validation errors
// returned by CompanyContact.ValidateAll() if the designated constraints
// aren't met.
type CompanyContactMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompanyContactMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompanyContactMultiError) AllErrors() []error { return m }

// CompanyContactValidationError is the validation error returned by
// CompanyContact.Validate if the designated constraints aren't met.
type CompanyContactValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompanyContactValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompanyContactValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompanyContactValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompanyContactValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompanyContactValidationError) ErrorName() string { return "CompanyContactValidationError" }

// Error satisfies the builtin error interface
func (e CompanyContactValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompanyContact.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompanyContactValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompanyContactValidationError{}

// Validate checks the field values on CompanyReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CompanyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompanyReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CompanyReplyMultiError, or
// nil if none found.
func (m *CompanyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CompanyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Ticker

	// no validation rules for TickerAlternative

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Exchange

	// no validation rules for Routing

	// no validation rules for Isin

	// no validation rules for Activity

	// no validation rules for CurrencyReport

	// no validation rules for FiscalYearEnd

	if all {
		switch v := interface{}(m.GetContact()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CompanyReplyValidationError{
					field:  "Contact",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CompanyReplyValidationError{
					field:  "Contact",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContact()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompanyReplyValidationError{
				field:  "Contact",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CompanyReplyValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CompanyReplyValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompanyReplyValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CompanyReplyMultiError(errors)
	}

	return nil
}

// CompanyReplyMultiError is an error wrapping multiple validation errors
// returned by CompanyReply.ValidateAll() if the designated constraints aren't met.
type CompanyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompanyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompanyReplyMultiError) AllErrors() []error { return m }

// CompanyReplyValidationError is the validation error returned by
// CompanyReply.Validate if the designated constraints aren't met.
type CompanyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompanyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompanyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompanyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompanyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompanyReplyValidationError) ErrorName() string { return "CompanyReplyValidationError" }

// Error satisfies the builtin error interface
func (e CompanyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompanyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompanyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompanyReplyValidationError{}

// Validate checks the field values on CompanyReplies with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CompanyReplies) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompanyReplies with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CompanyRepliesMultiError,
// or nil if none found.
func (m *CompanyReplies) ValidateAll() error {
	return m.validate(true)
}

func (m *CompanyReplies) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CompanyRepliesValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CompanyRepliesValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CompanyRepliesValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return CompanyRepliesMultiError(errors)
	}

	return nil
}

// CompanyRepliesMultiError is an error wrapping multiple validation errors
// returned by CompanyReplies.ValidateAll() if the designated constraints
// aren't met.
type CompanyRepliesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompanyRepliesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompanyRepliesMultiError) AllErrors() []error { return m }

// CompanyRepliesValidationError is the validation error returned by
// CompanyReplies.Validate if the designated constraints aren't met.
type CompanyRepliesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompanyRepliesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompanyRepliesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompanyRepliesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompanyRepliesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompanyRepliesValidationError) ErrorName() string { return "CompanyRepliesValidationError" }

// Error satisfies the builtin error interface
func (e CompanyRepliesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompanyReplies.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompanyRepliesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompanyRepliesValidationError{}
