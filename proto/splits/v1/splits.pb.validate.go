// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/splits/v1/splits.proto

package v1Splits

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	v1Screener "github.com/arktos-venture/buf/proto/screener/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = v1Screener.Interval(0)
)

// Validate checks the field values on SplitsRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SplitsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SplitsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SplitsRequestMultiError, or
// nil if none found.
func (m *SplitsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SplitsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := v1Screener.Interval_name[int32(m.GetInterval())]; !ok {
		err := SplitsRequestValidationError{
			field:  "Interval",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := len(m.GetFilters()); l < 1 || l > 20 {
		err := SplitsRequestValidationError{
			field:  "Filters",
			reason: "value must contain between 1 and 20 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetFilters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SplitsRequestValidationError{
						field:  fmt.Sprintf("Filters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SplitsRequestValidationError{
						field:  fmt.Sprintf("Filters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SplitsRequestValidationError{
					field:  fmt.Sprintf("Filters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SplitsRequestMultiError(errors)
	}

	return nil
}

// SplitsRequestMultiError is an error wrapping multiple validation errors
// returned by SplitsRequest.ValidateAll() if the designated constraints
// aren't met.
type SplitsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SplitsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SplitsRequestMultiError) AllErrors() []error { return m }

// SplitsRequestValidationError is the validation error returned by
// SplitsRequest.Validate if the designated constraints aren't met.
type SplitsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SplitsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SplitsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SplitsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SplitsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SplitsRequestValidationError) ErrorName() string { return "SplitsRequestValidationError" }

// Error satisfies the builtin error interface
func (e SplitsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSplitsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SplitsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SplitsRequestValidationError{}

// Validate checks the field values on SplitsLastRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SplitsLastRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SplitsLastRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SplitsLastRequestMultiError, or nil if none found.
func (m *SplitsLastRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SplitsLastRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Exchange

	// no validation rules for Ticker

	if len(errors) > 0 {
		return SplitsLastRequestMultiError(errors)
	}

	return nil
}

// SplitsLastRequestMultiError is an error wrapping multiple validation errors
// returned by SplitsLastRequest.ValidateAll() if the designated constraints
// aren't met.
type SplitsLastRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SplitsLastRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SplitsLastRequestMultiError) AllErrors() []error { return m }

// SplitsLastRequestValidationError is the validation error returned by
// SplitsLastRequest.Validate if the designated constraints aren't met.
type SplitsLastRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SplitsLastRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SplitsLastRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SplitsLastRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SplitsLastRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SplitsLastRequestValidationError) ErrorName() string {
	return "SplitsLastRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SplitsLastRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSplitsLastRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SplitsLastRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SplitsLastRequestValidationError{}

// Validate checks the field values on SplitsLastReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SplitsLastReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SplitsLastReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SplitsLastReplyMultiError, or nil if none found.
func (m *SplitsLastReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SplitsLastReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for From

	// no validation rules for To

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SplitsLastReplyValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SplitsLastReplyValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SplitsLastReplyValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SplitsLastReplyMultiError(errors)
	}

	return nil
}

// SplitsLastReplyMultiError is an error wrapping multiple validation errors
// returned by SplitsLastReply.ValidateAll() if the designated constraints
// aren't met.
type SplitsLastReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SplitsLastReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SplitsLastReplyMultiError) AllErrors() []error { return m }

// SplitsLastReplyValidationError is the validation error returned by
// SplitsLastReply.Validate if the designated constraints aren't met.
type SplitsLastReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SplitsLastReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SplitsLastReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SplitsLastReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SplitsLastReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SplitsLastReplyValidationError) ErrorName() string { return "SplitsLastReplyValidationError" }

// Error satisfies the builtin error interface
func (e SplitsLastReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSplitsLastReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SplitsLastReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SplitsLastReplyValidationError{}

// Validate checks the field values on SplitsReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SplitsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SplitsReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SplitsReplyMultiError, or
// nil if none found.
func (m *SplitsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SplitsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCreatedAt() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SplitsReplyValidationError{
						field:  fmt.Sprintf("CreatedAt[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SplitsReplyValidationError{
						field:  fmt.Sprintf("CreatedAt[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SplitsReplyValidationError{
					field:  fmt.Sprintf("CreatedAt[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SplitsReplyMultiError(errors)
	}

	return nil
}

// SplitsReplyMultiError is an error wrapping multiple validation errors
// returned by SplitsReply.ValidateAll() if the designated constraints aren't met.
type SplitsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SplitsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SplitsReplyMultiError) AllErrors() []error { return m }

// SplitsReplyValidationError is the validation error returned by
// SplitsReply.Validate if the designated constraints aren't met.
type SplitsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SplitsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SplitsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SplitsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SplitsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SplitsReplyValidationError) ErrorName() string { return "SplitsReplyValidationError" }

// Error satisfies the builtin error interface
func (e SplitsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSplitsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SplitsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SplitsReplyValidationError{}
