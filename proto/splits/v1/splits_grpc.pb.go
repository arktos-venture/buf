// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SplitsClient is the client API for Splits service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SplitsClient interface {
	Get(ctx context.Context, in *SplitPeriodRequest, opts ...grpc.CallOption) (*SplitReplies, error)
	GetByTimestamp(ctx context.Context, in *SplitTimestampRequest, opts ...grpc.CallOption) (*SplitReplies, error)
	Bulk(ctx context.Context, in *SplitBulkRequest, opts ...grpc.CallOption) (*SplitReplies, error)
	Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type splitsClient struct {
	cc grpc.ClientConnInterface
}

func NewSplitsClient(cc grpc.ClientConnInterface) SplitsClient {
	return &splitsClient{cc}
}

func (c *splitsClient) Get(ctx context.Context, in *SplitPeriodRequest, opts ...grpc.CallOption) (*SplitReplies, error) {
	out := new(SplitReplies)
	err := c.cc.Invoke(ctx, "/splits.v1.Splits/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *splitsClient) GetByTimestamp(ctx context.Context, in *SplitTimestampRequest, opts ...grpc.CallOption) (*SplitReplies, error) {
	out := new(SplitReplies)
	err := c.cc.Invoke(ctx, "/splits.v1.Splits/GetByTimestamp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *splitsClient) Bulk(ctx context.Context, in *SplitBulkRequest, opts ...grpc.CallOption) (*SplitReplies, error) {
	out := new(SplitReplies)
	err := c.cc.Invoke(ctx, "/splits.v1.Splits/Bulk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *splitsClient) Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/splits.v1.Splits/Health", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SplitsServer is the server API for Splits service.
// All implementations must embed UnimplementedSplitsServer
// for forward compatibility
type SplitsServer interface {
	Get(context.Context, *SplitPeriodRequest) (*SplitReplies, error)
	GetByTimestamp(context.Context, *SplitTimestampRequest) (*SplitReplies, error)
	Bulk(context.Context, *SplitBulkRequest) (*SplitReplies, error)
	Health(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedSplitsServer()
}

// UnimplementedSplitsServer must be embedded to have forward compatible implementations.
type UnimplementedSplitsServer struct {
}

func (UnimplementedSplitsServer) Get(context.Context, *SplitPeriodRequest) (*SplitReplies, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedSplitsServer) GetByTimestamp(context.Context, *SplitTimestampRequest) (*SplitReplies, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByTimestamp not implemented")
}
func (UnimplementedSplitsServer) Bulk(context.Context, *SplitBulkRequest) (*SplitReplies, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bulk not implemented")
}
func (UnimplementedSplitsServer) Health(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedSplitsServer) mustEmbedUnimplementedSplitsServer() {}

// UnsafeSplitsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SplitsServer will
// result in compilation errors.
type UnsafeSplitsServer interface {
	mustEmbedUnimplementedSplitsServer()
}

func RegisterSplitsServer(s grpc.ServiceRegistrar, srv SplitsServer) {
	s.RegisterService(&Splits_ServiceDesc, srv)
}

func _Splits_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SplitPeriodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SplitsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/splits.v1.Splits/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SplitsServer).Get(ctx, req.(*SplitPeriodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Splits_GetByTimestamp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SplitTimestampRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SplitsServer).GetByTimestamp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/splits.v1.Splits/GetByTimestamp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SplitsServer).GetByTimestamp(ctx, req.(*SplitTimestampRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Splits_Bulk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SplitBulkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SplitsServer).Bulk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/splits.v1.Splits/Bulk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SplitsServer).Bulk(ctx, req.(*SplitBulkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Splits_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SplitsServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/splits.v1.Splits/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SplitsServer).Health(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Splits_ServiceDesc is the grpc.ServiceDesc for Splits service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Splits_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "splits.v1.Splits",
	HandlerType: (*SplitsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Splits_Get_Handler,
		},
		{
			MethodName: "GetByTimestamp",
			Handler:    _Splits_GetByTimestamp_Handler,
		},
		{
			MethodName: "Bulk",
			Handler:    _Splits_Bulk_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _Splits_Health_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/splits/v1/splits.proto",
}
