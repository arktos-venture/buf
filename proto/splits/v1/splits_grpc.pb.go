// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package splits_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SplitsClient is the client API for Splits service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SplitsClient interface {
	Last(ctx context.Context, in *SplitsLastRequest, opts ...grpc.CallOption) (*SplitsLastReply, error)
	Search(ctx context.Context, in *SplitsRequest, opts ...grpc.CallOption) (*SplitsReply, error)
}

type splitsClient struct {
	cc grpc.ClientConnInterface
}

func NewSplitsClient(cc grpc.ClientConnInterface) SplitsClient {
	return &splitsClient{cc}
}

func (c *splitsClient) Last(ctx context.Context, in *SplitsLastRequest, opts ...grpc.CallOption) (*SplitsLastReply, error) {
	out := new(SplitsLastReply)
	err := c.cc.Invoke(ctx, "/splits.v1.Splits/Last", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *splitsClient) Search(ctx context.Context, in *SplitsRequest, opts ...grpc.CallOption) (*SplitsReply, error) {
	out := new(SplitsReply)
	err := c.cc.Invoke(ctx, "/splits.v1.Splits/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SplitsServer is the server API for Splits service.
// All implementations must embed UnimplementedSplitsServer
// for forward compatibility
type SplitsServer interface {
	Last(context.Context, *SplitsLastRequest) (*SplitsLastReply, error)
	Search(context.Context, *SplitsRequest) (*SplitsReply, error)
	mustEmbedUnimplementedSplitsServer()
}

// UnimplementedSplitsServer must be embedded to have forward compatible implementations.
type UnimplementedSplitsServer struct {
}

func (UnimplementedSplitsServer) Last(context.Context, *SplitsLastRequest) (*SplitsLastReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Last not implemented")
}
func (UnimplementedSplitsServer) Search(context.Context, *SplitsRequest) (*SplitsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedSplitsServer) mustEmbedUnimplementedSplitsServer() {}

// UnsafeSplitsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SplitsServer will
// result in compilation errors.
type UnsafeSplitsServer interface {
	mustEmbedUnimplementedSplitsServer()
}

func RegisterSplitsServer(s grpc.ServiceRegistrar, srv SplitsServer) {
	s.RegisterService(&Splits_ServiceDesc, srv)
}

func _Splits_Last_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SplitsLastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SplitsServer).Last(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/splits.v1.Splits/Last",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SplitsServer).Last(ctx, req.(*SplitsLastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Splits_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SplitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SplitsServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/splits.v1.Splits/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SplitsServer).Search(ctx, req.(*SplitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Splits_ServiceDesc is the grpc.ServiceDesc for Splits service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Splits_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "splits.v1.Splits",
	HandlerType: (*SplitsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Last",
			Handler:    _Splits_Last_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _Splits_Search_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/splits/v1/splits.proto",
}
