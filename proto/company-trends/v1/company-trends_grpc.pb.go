// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CompanyTrendsClient is the client API for CompanyTrends service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CompanyTrendsClient interface {
	Get(ctx context.Context, in *TrendRequest, opts ...grpc.CallOption) (*TrendIdReply, error)
	Search(ctx context.Context, in *TrendRequest, opts ...grpc.CallOption) (*TrendReply, error)
	Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type companyTrendsClient struct {
	cc grpc.ClientConnInterface
}

func NewCompanyTrendsClient(cc grpc.ClientConnInterface) CompanyTrendsClient {
	return &companyTrendsClient{cc}
}

func (c *companyTrendsClient) Get(ctx context.Context, in *TrendRequest, opts ...grpc.CallOption) (*TrendIdReply, error) {
	out := new(TrendIdReply)
	err := c.cc.Invoke(ctx, "/company.trends.v1.CompanyTrends/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyTrendsClient) Search(ctx context.Context, in *TrendRequest, opts ...grpc.CallOption) (*TrendReply, error) {
	out := new(TrendReply)
	err := c.cc.Invoke(ctx, "/company.trends.v1.CompanyTrends/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyTrendsClient) Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/company.trends.v1.CompanyTrends/Health", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompanyTrendsServer is the server API for CompanyTrends service.
// All implementations must embed UnimplementedCompanyTrendsServer
// for forward compatibility
type CompanyTrendsServer interface {
	Get(context.Context, *TrendRequest) (*TrendIdReply, error)
	Search(context.Context, *TrendRequest) (*TrendReply, error)
	Health(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedCompanyTrendsServer()
}

// UnimplementedCompanyTrendsServer must be embedded to have forward compatible implementations.
type UnimplementedCompanyTrendsServer struct {
}

func (UnimplementedCompanyTrendsServer) Get(context.Context, *TrendRequest) (*TrendIdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedCompanyTrendsServer) Search(context.Context, *TrendRequest) (*TrendReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedCompanyTrendsServer) Health(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedCompanyTrendsServer) mustEmbedUnimplementedCompanyTrendsServer() {}

// UnsafeCompanyTrendsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompanyTrendsServer will
// result in compilation errors.
type UnsafeCompanyTrendsServer interface {
	mustEmbedUnimplementedCompanyTrendsServer()
}

func RegisterCompanyTrendsServer(s grpc.ServiceRegistrar, srv CompanyTrendsServer) {
	s.RegisterService(&CompanyTrends_ServiceDesc, srv)
}

func _CompanyTrends_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyTrendsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.trends.v1.CompanyTrends/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyTrendsServer).Get(ctx, req.(*TrendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyTrends_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyTrendsServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.trends.v1.CompanyTrends/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyTrendsServer).Search(ctx, req.(*TrendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyTrends_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyTrendsServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.trends.v1.CompanyTrends/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyTrendsServer).Health(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// CompanyTrends_ServiceDesc is the grpc.ServiceDesc for CompanyTrends service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CompanyTrends_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "company.trends.v1.CompanyTrends",
	HandlerType: (*CompanyTrendsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _CompanyTrends_Get_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _CompanyTrends_Search_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _CompanyTrends_Health_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/company-trends/v1/company-trends.proto",
}
