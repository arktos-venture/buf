// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/exchanges/v1/exchanges.proto

package v1Exchanges

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Holiday with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Holiday) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Holiday with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in HolidayMultiError, or nil if none found.
func (m *Holiday) ValidateAll() error {
	return m.validate(true)
}

func (m *Holiday) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Date

	// no validation rules for Official

	if len(errors) > 0 {
		return HolidayMultiError(errors)
	}

	return nil
}

// HolidayMultiError is an error wrapping multiple validation errors returned
// by Holiday.ValidateAll() if the designated constraints aren't met.
type HolidayMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HolidayMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HolidayMultiError) AllErrors() []error { return m }

// HolidayValidationError is the validation error returned by Holiday.Validate
// if the designated constraints aren't met.
type HolidayValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HolidayValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HolidayValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HolidayValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HolidayValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HolidayValidationError) ErrorName() string { return "HolidayValidationError" }

// Error satisfies the builtin error interface
func (e HolidayValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHoliday.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HolidayValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HolidayValidationError{}

// Validate checks the field values on ExchangeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ExchangeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExchangeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExchangeRequestMultiError, or nil if none found.
func (m *ExchangeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExchangeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetTicker()); l < 1 || l > 8 {
		err := ExchangeRequestValidationError{
			field:  "Ticker",
			reason: "value length must be between 1 and 8 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ExchangeRequestMultiError(errors)
	}

	return nil
}

// ExchangeRequestMultiError is an error wrapping multiple validation errors
// returned by ExchangeRequest.ValidateAll() if the designated constraints
// aren't met.
type ExchangeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExchangeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExchangeRequestMultiError) AllErrors() []error { return m }

// ExchangeRequestValidationError is the validation error returned by
// ExchangeRequest.Validate if the designated constraints aren't met.
type ExchangeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExchangeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExchangeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExchangeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExchangeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExchangeRequestValidationError) ErrorName() string { return "ExchangeRequestValidationError" }

// Error satisfies the builtin error interface
func (e ExchangeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExchangeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExchangeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExchangeRequestValidationError{}

// Validate checks the field values on ExchangeSearchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExchangeSearchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExchangeSearchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExchangeSearchRequestMultiError, or nil if none found.
func (m *ExchangeSearchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExchangeSearchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetCountry()) != 2 {
		err := ExchangeSearchRequestValidationError{
			field:  "Country",
			reason: "value length must be 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if utf8.RuneCountInString(m.GetCurrency()) != 3 {
		err := ExchangeSearchRequestValidationError{
			field:  "Currency",
			reason: "value length must be 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	// no validation rules for Open

	if len(errors) > 0 {
		return ExchangeSearchRequestMultiError(errors)
	}

	return nil
}

// ExchangeSearchRequestMultiError is an error wrapping multiple validation
// errors returned by ExchangeSearchRequest.ValidateAll() if the designated
// constraints aren't met.
type ExchangeSearchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExchangeSearchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExchangeSearchRequestMultiError) AllErrors() []error { return m }

// ExchangeSearchRequestValidationError is the validation error returned by
// ExchangeSearchRequest.Validate if the designated constraints aren't met.
type ExchangeSearchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExchangeSearchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExchangeSearchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExchangeSearchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExchangeSearchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExchangeSearchRequestValidationError) ErrorName() string {
	return "ExchangeSearchRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExchangeSearchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExchangeSearchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExchangeSearchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExchangeSearchRequestValidationError{}

// Validate checks the field values on ExchangeCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExchangeCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExchangeCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExchangeCreateRequestMultiError, or nil if none found.
func (m *ExchangeCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExchangeCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetTicker()); l < 1 || l > 8 {
		err := ExchangeCreateRequestValidationError{
			field:  "Ticker",
			reason: "value length must be between 1 and 8 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 3 || l > 64 {
		err := ExchangeCreateRequestValidationError{
			field:  "Name",
			reason: "value length must be between 3 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetDescription()); l < 0 || l > 256 {
		err := ExchangeCreateRequestValidationError{
			field:  "Description",
			reason: "value length must be between 0 and 256 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCurrency()) != 3 {
		err := ExchangeCreateRequestValidationError{
			field:  "Currency",
			reason: "value length must be 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if l := utf8.RuneCountInString(m.GetRouting()); l < 3 || l > 16 {
		err := ExchangeCreateRequestValidationError{
			field:  "Routing",
			reason: "value length must be between 3 and 16 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetTradingHours()); l < 3 || l > 16 {
		err := ExchangeCreateRequestValidationError{
			field:  "TradingHours",
			reason: "value length must be between 3 and 16 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCountry()) != 2 {
		err := ExchangeCreateRequestValidationError{
			field:  "Country",
			reason: "value length must be 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if l := utf8.RuneCountInString(m.GetTimezone()); l < 5 || l > 32 {
		err := ExchangeCreateRequestValidationError{
			field:  "Timezone",
			reason: "value length must be between 5 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PrimaryIndice

	for idx, item := range m.GetHolidays() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExchangeCreateRequestValidationError{
						field:  fmt.Sprintf("Holidays[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExchangeCreateRequestValidationError{
						field:  fmt.Sprintf("Holidays[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExchangeCreateRequestValidationError{
					field:  fmt.Sprintf("Holidays[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ExchangeCreateRequestMultiError(errors)
	}

	return nil
}

// ExchangeCreateRequestMultiError is an error wrapping multiple validation
// errors returned by ExchangeCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type ExchangeCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExchangeCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExchangeCreateRequestMultiError) AllErrors() []error { return m }

// ExchangeCreateRequestValidationError is the validation error returned by
// ExchangeCreateRequest.Validate if the designated constraints aren't met.
type ExchangeCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExchangeCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExchangeCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExchangeCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExchangeCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExchangeCreateRequestValidationError) ErrorName() string {
	return "ExchangeCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExchangeCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExchangeCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExchangeCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExchangeCreateRequestValidationError{}

// Validate checks the field values on ExchangeUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExchangeUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExchangeUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExchangeUpdateRequestMultiError, or nil if none found.
func (m *ExchangeUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExchangeUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetTicker()); l < 1 || l > 8 {
		err := ExchangeUpdateRequestValidationError{
			field:  "Ticker",
			reason: "value length must be between 1 and 8 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 3 || l > 64 {
		err := ExchangeUpdateRequestValidationError{
			field:  "Name",
			reason: "value length must be between 3 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetDescription()); l < 0 || l > 256 {
		err := ExchangeUpdateRequestValidationError{
			field:  "Description",
			reason: "value length must be between 0 and 256 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetRouting()); l < 3 || l > 16 {
		err := ExchangeUpdateRequestValidationError{
			field:  "Routing",
			reason: "value length must be between 3 and 16 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetTradingHours()); l < 3 || l > 16 {
		err := ExchangeUpdateRequestValidationError{
			field:  "TradingHours",
			reason: "value length must be between 3 and 16 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PrimaryIndice

	for idx, item := range m.GetHolidays() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExchangeUpdateRequestValidationError{
						field:  fmt.Sprintf("Holidays[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExchangeUpdateRequestValidationError{
						field:  fmt.Sprintf("Holidays[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExchangeUpdateRequestValidationError{
					field:  fmt.Sprintf("Holidays[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ExchangeUpdateRequestMultiError(errors)
	}

	return nil
}

// ExchangeUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by ExchangeUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type ExchangeUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExchangeUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExchangeUpdateRequestMultiError) AllErrors() []error { return m }

// ExchangeUpdateRequestValidationError is the validation error returned by
// ExchangeUpdateRequest.Validate if the designated constraints aren't met.
type ExchangeUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExchangeUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExchangeUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExchangeUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExchangeUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExchangeUpdateRequestValidationError) ErrorName() string {
	return "ExchangeUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExchangeUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExchangeUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExchangeUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExchangeUpdateRequestValidationError{}

// Validate checks the field values on ExchangeDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExchangeDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExchangeDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExchangeDeleteRequestMultiError, or nil if none found.
func (m *ExchangeDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExchangeDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetTickers()) < 1 {
		err := ExchangeDeleteRequestValidationError{
			field:  "Tickers",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_ExchangeDeleteRequest_Tickers_Unique := make(map[string]struct{}, len(m.GetTickers()))

	for idx, item := range m.GetTickers() {
		_, _ = idx, item

		if _, exists := _ExchangeDeleteRequest_Tickers_Unique[item]; exists {
			err := ExchangeDeleteRequestValidationError{
				field:  fmt.Sprintf("Tickers[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_ExchangeDeleteRequest_Tickers_Unique[item] = struct{}{}
		}

		// no validation rules for Tickers[idx]
	}

	if len(errors) > 0 {
		return ExchangeDeleteRequestMultiError(errors)
	}

	return nil
}

// ExchangeDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by ExchangeDeleteRequest.ValidateAll() if the designated
// constraints aren't met.
type ExchangeDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExchangeDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExchangeDeleteRequestMultiError) AllErrors() []error { return m }

// ExchangeDeleteRequestValidationError is the validation error returned by
// ExchangeDeleteRequest.Validate if the designated constraints aren't met.
type ExchangeDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExchangeDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExchangeDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExchangeDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExchangeDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExchangeDeleteRequestValidationError) ErrorName() string {
	return "ExchangeDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExchangeDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExchangeDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExchangeDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExchangeDeleteRequestValidationError{}

// Validate checks the field values on ExchangeReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ExchangeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExchangeReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ExchangeReplyMultiError, or
// nil if none found.
func (m *ExchangeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ExchangeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ticker

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for PrimaryIndice

	for idx, item := range m.GetIndices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExchangeReplyValidationError{
						field:  fmt.Sprintf("Indices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExchangeReplyValidationError{
						field:  fmt.Sprintf("Indices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExchangeReplyValidationError{
					field:  fmt.Sprintf("Indices[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetStats()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExchangeReplyValidationError{
					field:  "Stats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExchangeReplyValidationError{
					field:  "Stats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStats()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExchangeReplyValidationError{
				field:  "Stats",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Routing

	// no validation rules for Country

	// no validation rules for Currency

	// no validation rules for Timezone

	for idx, item := range m.GetHolidays() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExchangeReplyValidationError{
						field:  fmt.Sprintf("Holidays[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExchangeReplyValidationError{
						field:  fmt.Sprintf("Holidays[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExchangeReplyValidationError{
					field:  fmt.Sprintf("Holidays[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TradingHours

	// no validation rules for Open

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExchangeReplyValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExchangeReplyValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExchangeReplyValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExchangeReplyValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExchangeReplyValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExchangeReplyValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExchangeReplyMultiError(errors)
	}

	return nil
}

// ExchangeReplyMultiError is an error wrapping multiple validation errors
// returned by ExchangeReply.ValidateAll() if the designated constraints
// aren't met.
type ExchangeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExchangeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExchangeReplyMultiError) AllErrors() []error { return m }

// ExchangeReplyValidationError is the validation error returned by
// ExchangeReply.Validate if the designated constraints aren't met.
type ExchangeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExchangeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExchangeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExchangeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExchangeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExchangeReplyValidationError) ErrorName() string { return "ExchangeReplyValidationError" }

// Error satisfies the builtin error interface
func (e ExchangeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExchangeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExchangeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExchangeReplyValidationError{}

// Validate checks the field values on ExchangeStatsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExchangeStatsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExchangeStatsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExchangeStatsReplyMultiError, or nil if none found.
func (m *ExchangeStatsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ExchangeStatsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPrice()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExchangeStatsReplyValidationError{
					field:  "Price",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExchangeStatsReplyValidationError{
					field:  "Price",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPrice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExchangeStatsReplyValidationError{
				field:  "Price",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetVolume()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExchangeStatsReplyValidationError{
					field:  "Volume",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExchangeStatsReplyValidationError{
					field:  "Volume",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVolume()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExchangeStatsReplyValidationError{
				field:  "Volume",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExchangeStatsReplyValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExchangeStatsReplyValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExchangeStatsReplyValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExchangeStatsReplyValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExchangeStatsReplyValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExchangeStatsReplyValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExchangeStatsReplyMultiError(errors)
	}

	return nil
}

// ExchangeStatsReplyMultiError is an error wrapping multiple validation errors
// returned by ExchangeStatsReply.ValidateAll() if the designated constraints
// aren't met.
type ExchangeStatsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExchangeStatsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExchangeStatsReplyMultiError) AllErrors() []error { return m }

// ExchangeStatsReplyValidationError is the validation error returned by
// ExchangeStatsReply.Validate if the designated constraints aren't met.
type ExchangeStatsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExchangeStatsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExchangeStatsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExchangeStatsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExchangeStatsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExchangeStatsReplyValidationError) ErrorName() string {
	return "ExchangeStatsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ExchangeStatsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExchangeStatsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExchangeStatsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExchangeStatsReplyValidationError{}

// Validate checks the field values on ExchangeReplies with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ExchangeReplies) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExchangeReplies with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExchangeRepliesMultiError, or nil if none found.
func (m *ExchangeReplies) ValidateAll() error {
	return m.validate(true)
}

func (m *ExchangeReplies) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExchangeRepliesValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExchangeRepliesValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExchangeRepliesValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ExchangeRepliesMultiError(errors)
	}

	return nil
}

// ExchangeRepliesMultiError is an error wrapping multiple validation errors
// returned by ExchangeReplies.ValidateAll() if the designated constraints
// aren't met.
type ExchangeRepliesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExchangeRepliesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExchangeRepliesMultiError) AllErrors() []error { return m }

// ExchangeRepliesValidationError is the validation error returned by
// ExchangeReplies.Validate if the designated constraints aren't met.
type ExchangeRepliesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExchangeRepliesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExchangeRepliesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExchangeRepliesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExchangeRepliesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExchangeRepliesValidationError) ErrorName() string { return "ExchangeRepliesValidationError" }

// Error satisfies the builtin error interface
func (e ExchangeRepliesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExchangeReplies.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExchangeRepliesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExchangeRepliesValidationError{}

// Validate checks the field values on ExchangeSimpleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExchangeSimpleReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExchangeSimpleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExchangeSimpleReplyMultiError, or nil if none found.
func (m *ExchangeSimpleReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ExchangeSimpleReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return ExchangeSimpleReplyMultiError(errors)
	}

	return nil
}

// ExchangeSimpleReplyMultiError is an error wrapping multiple validation
// errors returned by ExchangeSimpleReply.ValidateAll() if the designated
// constraints aren't met.
type ExchangeSimpleReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExchangeSimpleReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExchangeSimpleReplyMultiError) AllErrors() []error { return m }

// ExchangeSimpleReplyValidationError is the validation error returned by
// ExchangeSimpleReply.Validate if the designated constraints aren't met.
type ExchangeSimpleReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExchangeSimpleReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExchangeSimpleReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExchangeSimpleReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExchangeSimpleReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExchangeSimpleReplyValidationError) ErrorName() string {
	return "ExchangeSimpleReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ExchangeSimpleReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExchangeSimpleReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExchangeSimpleReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExchangeSimpleReplyValidationError{}

// Validate checks the field values on ExchangeDelete with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ExchangeDelete) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExchangeDelete with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ExchangeDeleteMultiError,
// or nil if none found.
func (m *ExchangeDelete) ValidateAll() error {
	return m.validate(true)
}

func (m *ExchangeDelete) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	if len(errors) > 0 {
		return ExchangeDeleteMultiError(errors)
	}

	return nil
}

// ExchangeDeleteMultiError is an error wrapping multiple validation errors
// returned by ExchangeDelete.ValidateAll() if the designated constraints
// aren't met.
type ExchangeDeleteMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExchangeDeleteMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExchangeDeleteMultiError) AllErrors() []error { return m }

// ExchangeDeleteValidationError is the validation error returned by
// ExchangeDelete.Validate if the designated constraints aren't met.
type ExchangeDeleteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExchangeDeleteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExchangeDeleteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExchangeDeleteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExchangeDeleteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExchangeDeleteValidationError) ErrorName() string { return "ExchangeDeleteValidationError" }

// Error satisfies the builtin error interface
func (e ExchangeDeleteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExchangeDelete.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExchangeDeleteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExchangeDeleteValidationError{}

// Validate checks the field values on ExchangeStatsReply_Price with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExchangeStatsReply_Price) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExchangeStatsReply_Price with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExchangeStatsReply_PriceMultiError, or nil if none found.
func (m *ExchangeStatsReply_Price) ValidateAll() error {
	return m.validate(true)
}

func (m *ExchangeStatsReply_Price) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MaxAnnual

	// no validation rules for MinAnnual

	// no validation rules for ReturnYear

	// no validation rules for MarketCapUsd

	// no validation rules for Beta5Y

	// no validation rules for Start

	if len(errors) > 0 {
		return ExchangeStatsReply_PriceMultiError(errors)
	}

	return nil
}

// ExchangeStatsReply_PriceMultiError is an error wrapping multiple validation
// errors returned by ExchangeStatsReply_Price.ValidateAll() if the designated
// constraints aren't met.
type ExchangeStatsReply_PriceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExchangeStatsReply_PriceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExchangeStatsReply_PriceMultiError) AllErrors() []error { return m }

// ExchangeStatsReply_PriceValidationError is the validation error returned by
// ExchangeStatsReply_Price.Validate if the designated constraints aren't met.
type ExchangeStatsReply_PriceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExchangeStatsReply_PriceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExchangeStatsReply_PriceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExchangeStatsReply_PriceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExchangeStatsReply_PriceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExchangeStatsReply_PriceValidationError) ErrorName() string {
	return "ExchangeStatsReply_PriceValidationError"
}

// Error satisfies the builtin error interface
func (e ExchangeStatsReply_PriceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExchangeStatsReply_Price.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExchangeStatsReply_PriceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExchangeStatsReply_PriceValidationError{}

// Validate checks the field values on ExchangeStatsReply_Volume with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExchangeStatsReply_Volume) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExchangeStatsReply_Volume with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExchangeStatsReply_VolumeMultiError, or nil if none found.
func (m *ExchangeStatsReply_Volume) ValidateAll() error {
	return m.validate(true)
}

func (m *ExchangeStatsReply_Volume) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for VolumeAvg10D

	// no validation rules for VolumeAvg30D

	// no validation rules for VolumeAvg90D

	if len(errors) > 0 {
		return ExchangeStatsReply_VolumeMultiError(errors)
	}

	return nil
}

// ExchangeStatsReply_VolumeMultiError is an error wrapping multiple validation
// errors returned by ExchangeStatsReply_Volume.ValidateAll() if the
// designated constraints aren't met.
type ExchangeStatsReply_VolumeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExchangeStatsReply_VolumeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExchangeStatsReply_VolumeMultiError) AllErrors() []error { return m }

// ExchangeStatsReply_VolumeValidationError is the validation error returned by
// ExchangeStatsReply_Volume.Validate if the designated constraints aren't met.
type ExchangeStatsReply_VolumeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExchangeStatsReply_VolumeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExchangeStatsReply_VolumeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExchangeStatsReply_VolumeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExchangeStatsReply_VolumeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExchangeStatsReply_VolumeValidationError) ErrorName() string {
	return "ExchangeStatsReply_VolumeValidationError"
}

// Error satisfies the builtin error interface
func (e ExchangeStatsReply_VolumeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExchangeStatsReply_Volume.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExchangeStatsReply_VolumeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExchangeStatsReply_VolumeValidationError{}

// Validate checks the field values on ExchangeReplies_Result with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExchangeReplies_Result) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExchangeReplies_Result with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExchangeReplies_ResultMultiError, or nil if none found.
func (m *ExchangeReplies_Result) ValidateAll() error {
	return m.validate(true)
}

func (m *ExchangeReplies_Result) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ticker

	// no validation rules for Routing

	// no validation rules for Name

	// no validation rules for Open

	if len(errors) > 0 {
		return ExchangeReplies_ResultMultiError(errors)
	}

	return nil
}

// ExchangeReplies_ResultMultiError is an error wrapping multiple validation
// errors returned by ExchangeReplies_Result.ValidateAll() if the designated
// constraints aren't met.
type ExchangeReplies_ResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExchangeReplies_ResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExchangeReplies_ResultMultiError) AllErrors() []error { return m }

// ExchangeReplies_ResultValidationError is the validation error returned by
// ExchangeReplies_Result.Validate if the designated constraints aren't met.
type ExchangeReplies_ResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExchangeReplies_ResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExchangeReplies_ResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExchangeReplies_ResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExchangeReplies_ResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExchangeReplies_ResultValidationError) ErrorName() string {
	return "ExchangeReplies_ResultValidationError"
}

// Error satisfies the builtin error interface
func (e ExchangeReplies_ResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExchangeReplies_Result.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExchangeReplies_ResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExchangeReplies_ResultValidationError{}
