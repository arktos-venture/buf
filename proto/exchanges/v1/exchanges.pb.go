// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: proto/exchanges/v1/exchanges.proto

package exchanges_v1

import (
	v1 "github.com/arktos-venture/buf/proto/indices/v1"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ExchangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticker  string                   `protobuf:"bytes,1,opt,name=ticker,proto3" json:"ticker,omitempty"`
	Request *ExchangeRequest_Request `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *ExchangeRequest) Reset() {
	*x = ExchangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_exchanges_v1_exchanges_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeRequest) ProtoMessage() {}

func (x *ExchangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_exchanges_v1_exchanges_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeRequest.ProtoReflect.Descriptor instead.
func (*ExchangeRequest) Descriptor() ([]byte, []int) {
	return file_proto_exchanges_v1_exchanges_proto_rawDescGZIP(), []int{0}
}

func (x *ExchangeRequest) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *ExchangeRequest) GetRequest() *ExchangeRequest_Request {
	if x != nil {
		return x.Request
	}
	return nil
}

type ExchangeIsOpenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticker string `protobuf:"bytes,1,opt,name=ticker,proto3" json:"ticker,omitempty"`
}

func (x *ExchangeIsOpenRequest) Reset() {
	*x = ExchangeIsOpenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_exchanges_v1_exchanges_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeIsOpenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeIsOpenRequest) ProtoMessage() {}

func (x *ExchangeIsOpenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_exchanges_v1_exchanges_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeIsOpenRequest.ProtoReflect.Descriptor instead.
func (*ExchangeIsOpenRequest) Descriptor() ([]byte, []int) {
	return file_proto_exchanges_v1_exchanges_proto_rawDescGZIP(), []int{1}
}

func (x *ExchangeIsOpenRequest) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

type ExchangeListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page *ExchangeListRequest_Page `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *ExchangeListRequest) Reset() {
	*x = ExchangeListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_exchanges_v1_exchanges_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeListRequest) ProtoMessage() {}

func (x *ExchangeListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_exchanges_v1_exchanges_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeListRequest.ProtoReflect.Descriptor instead.
func (*ExchangeListRequest) Descriptor() ([]byte, []int) {
	return file_proto_exchanges_v1_exchanges_proto_rawDescGZIP(), []int{2}
}

func (x *ExchangeListRequest) GetPage() *ExchangeListRequest_Page {
	if x != nil {
		return x.Page
	}
	return nil
}

type ExchangeDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tickers []string `protobuf:"bytes,1,rep,name=tickers,proto3" json:"tickers,omitempty"`
}

func (x *ExchangeDeleteRequest) Reset() {
	*x = ExchangeDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_exchanges_v1_exchanges_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeDeleteRequest) ProtoMessage() {}

func (x *ExchangeDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_exchanges_v1_exchanges_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeDeleteRequest.ProtoReflect.Descriptor instead.
func (*ExchangeDeleteRequest) Descriptor() ([]byte, []int) {
	return file_proto_exchanges_v1_exchanges_proto_rawDescGZIP(), []int{3}
}

func (x *ExchangeDeleteRequest) GetTickers() []string {
	if x != nil {
		return x.Tickers
	}
	return nil
}

type ExchangeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticker       string                   `protobuf:"bytes,1,opt,name=ticker,proto3" json:"ticker,omitempty"`
	Name         string                   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description  string                   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Indices      []*v1.IndiceShortReply   `protobuf:"bytes,4,rep,name=indices,proto3" json:"indices,omitempty"`
	Routing      string                   `protobuf:"bytes,5,opt,name=routing,proto3" json:"routing,omitempty"`
	Country      string                   `protobuf:"bytes,6,opt,name=country,proto3" json:"country,omitempty"`
	Currency     string                   `protobuf:"bytes,7,opt,name=currency,proto3" json:"currency,omitempty"`
	Timezone     string                   `protobuf:"bytes,8,opt,name=timezone,proto3" json:"timezone,omitempty"`
	Holidays     []*ExchangeReply_Holiday `protobuf:"bytes,9,rep,name=holidays,proto3" json:"holidays,omitempty"`
	TradingHours string                   `protobuf:"bytes,10,opt,name=tradingHours,proto3" json:"tradingHours,omitempty"`
	Companies    []*ExchangeReply_Company `protobuf:"bytes,11,rep,name=companies,proto3" json:"companies,omitempty"`
	CreatedAt    *timestamppb.Timestamp   `protobuf:"bytes,12,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt    *timestamppb.Timestamp   `protobuf:"bytes,13,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *ExchangeReply) Reset() {
	*x = ExchangeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_exchanges_v1_exchanges_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeReply) ProtoMessage() {}

func (x *ExchangeReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_exchanges_v1_exchanges_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeReply.ProtoReflect.Descriptor instead.
func (*ExchangeReply) Descriptor() ([]byte, []int) {
	return file_proto_exchanges_v1_exchanges_proto_rawDescGZIP(), []int{4}
}

func (x *ExchangeReply) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *ExchangeReply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExchangeReply) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ExchangeReply) GetIndices() []*v1.IndiceShortReply {
	if x != nil {
		return x.Indices
	}
	return nil
}

func (x *ExchangeReply) GetRouting() string {
	if x != nil {
		return x.Routing
	}
	return ""
}

func (x *ExchangeReply) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *ExchangeReply) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *ExchangeReply) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *ExchangeReply) GetHolidays() []*ExchangeReply_Holiday {
	if x != nil {
		return x.Holidays
	}
	return nil
}

func (x *ExchangeReply) GetTradingHours() string {
	if x != nil {
		return x.TradingHours
	}
	return ""
}

func (x *ExchangeReply) GetCompanies() []*ExchangeReply_Company {
	if x != nil {
		return x.Companies
	}
	return nil
}

func (x *ExchangeReply) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ExchangeReply) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type ExchangeIsOpenReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticker       string `protobuf:"bytes,1,opt,name=ticker,proto3" json:"ticker,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Timezone     string `protobuf:"bytes,3,opt,name=timezone,proto3" json:"timezone,omitempty"`
	TradingHours string `protobuf:"bytes,4,opt,name=tradingHours,proto3" json:"tradingHours,omitempty"`
	Open         bool   `protobuf:"varint,5,opt,name=open,proto3" json:"open,omitempty"`
}

func (x *ExchangeIsOpenReply) Reset() {
	*x = ExchangeIsOpenReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_exchanges_v1_exchanges_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeIsOpenReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeIsOpenReply) ProtoMessage() {}

func (x *ExchangeIsOpenReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_exchanges_v1_exchanges_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeIsOpenReply.ProtoReflect.Descriptor instead.
func (*ExchangeIsOpenReply) Descriptor() ([]byte, []int) {
	return file_proto_exchanges_v1_exchanges_proto_rawDescGZIP(), []int{5}
}

func (x *ExchangeIsOpenReply) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *ExchangeIsOpenReply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExchangeIsOpenReply) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *ExchangeIsOpenReply) GetTradingHours() string {
	if x != nil {
		return x.TradingHours
	}
	return ""
}

func (x *ExchangeIsOpenReply) GetOpen() bool {
	if x != nil {
		return x.Open
	}
	return false
}

type ExchangeShortReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticker   string `protobuf:"bytes,1,opt,name=ticker,proto3" json:"ticker,omitempty"`
	Routing  string `protobuf:"bytes,2,opt,name=routing,proto3" json:"routing,omitempty"`
	Name     string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Country  string `protobuf:"bytes,4,opt,name=country,proto3" json:"country,omitempty"`
	Currency string `protobuf:"bytes,5,opt,name=currency,proto3" json:"currency,omitempty"`
}

func (x *ExchangeShortReply) Reset() {
	*x = ExchangeShortReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_exchanges_v1_exchanges_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeShortReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeShortReply) ProtoMessage() {}

func (x *ExchangeShortReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_exchanges_v1_exchanges_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeShortReply.ProtoReflect.Descriptor instead.
func (*ExchangeShortReply) Descriptor() ([]byte, []int) {
	return file_proto_exchanges_v1_exchanges_proto_rawDescGZIP(), []int{6}
}

func (x *ExchangeShortReply) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *ExchangeShortReply) GetRouting() string {
	if x != nil {
		return x.Routing
	}
	return ""
}

func (x *ExchangeShortReply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExchangeShortReply) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *ExchangeShortReply) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

type ExchangeReplies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ExchangeShortReply `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Total   int64                 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *ExchangeReplies) Reset() {
	*x = ExchangeReplies{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_exchanges_v1_exchanges_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeReplies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeReplies) ProtoMessage() {}

func (x *ExchangeReplies) ProtoReflect() protoreflect.Message {
	mi := &file_proto_exchanges_v1_exchanges_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeReplies.ProtoReflect.Descriptor instead.
func (*ExchangeReplies) Descriptor() ([]byte, []int) {
	return file_proto_exchanges_v1_exchanges_proto_rawDescGZIP(), []int{7}
}

func (x *ExchangeReplies) GetResults() []*ExchangeShortReply {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ExchangeReplies) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type ExchangeDeleteReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *ExchangeDeleteReply) Reset() {
	*x = ExchangeDeleteReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_exchanges_v1_exchanges_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeDeleteReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeDeleteReply) ProtoMessage() {}

func (x *ExchangeDeleteReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_exchanges_v1_exchanges_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeDeleteReply.ProtoReflect.Descriptor instead.
func (*ExchangeDeleteReply) Descriptor() ([]byte, []int) {
	return file_proto_exchanges_v1_exchanges_proto_rawDescGZIP(), []int{8}
}

func (x *ExchangeDeleteReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type ExchangeRequest_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Companies bool `protobuf:"varint,1,opt,name=companies,proto3" json:"companies,omitempty"`
	Holidays  bool `protobuf:"varint,2,opt,name=holidays,proto3" json:"holidays,omitempty"`
}

func (x *ExchangeRequest_Request) Reset() {
	*x = ExchangeRequest_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_exchanges_v1_exchanges_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeRequest_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeRequest_Request) ProtoMessage() {}

func (x *ExchangeRequest_Request) ProtoReflect() protoreflect.Message {
	mi := &file_proto_exchanges_v1_exchanges_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeRequest_Request.ProtoReflect.Descriptor instead.
func (*ExchangeRequest_Request) Descriptor() ([]byte, []int) {
	return file_proto_exchanges_v1_exchanges_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ExchangeRequest_Request) GetCompanies() bool {
	if x != nil {
		return x.Companies
	}
	return false
}

func (x *ExchangeRequest_Request) GetHolidays() bool {
	if x != nil {
		return x.Holidays
	}
	return false
}

type ExchangeListRequest_Page struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number int32 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	Limit  int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *ExchangeListRequest_Page) Reset() {
	*x = ExchangeListRequest_Page{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_exchanges_v1_exchanges_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeListRequest_Page) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeListRequest_Page) ProtoMessage() {}

func (x *ExchangeListRequest_Page) ProtoReflect() protoreflect.Message {
	mi := &file_proto_exchanges_v1_exchanges_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeListRequest_Page.ProtoReflect.Descriptor instead.
func (*ExchangeListRequest_Page) Descriptor() ([]byte, []int) {
	return file_proto_exchanges_v1_exchanges_proto_rawDescGZIP(), []int{2, 0}
}

func (x *ExchangeListRequest_Page) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *ExchangeListRequest_Page) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ExchangeReply_Holiday struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Date        string `protobuf:"bytes,3,opt,name=date,proto3" json:"date,omitempty"`
	Official    bool   `protobuf:"varint,4,opt,name=official,proto3" json:"official,omitempty"`
}

func (x *ExchangeReply_Holiday) Reset() {
	*x = ExchangeReply_Holiday{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_exchanges_v1_exchanges_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeReply_Holiday) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeReply_Holiday) ProtoMessage() {}

func (x *ExchangeReply_Holiday) ProtoReflect() protoreflect.Message {
	mi := &file_proto_exchanges_v1_exchanges_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeReply_Holiday.ProtoReflect.Descriptor instead.
func (*ExchangeReply_Holiday) Descriptor() ([]byte, []int) {
	return file_proto_exchanges_v1_exchanges_proto_rawDescGZIP(), []int{4, 0}
}

func (x *ExchangeReply_Holiday) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExchangeReply_Holiday) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ExchangeReply_Holiday) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *ExchangeReply_Holiday) GetOfficial() bool {
	if x != nil {
		return x.Official
	}
	return false
}

type ExchangeReply_Company struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Ticker   string `protobuf:"bytes,2,opt,name=ticker,proto3" json:"ticker,omitempty"`
	Name     string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Isin     string `protobuf:"bytes,4,opt,name=isin,proto3" json:"isin,omitempty"`
	Activity int64  `protobuf:"varint,5,opt,name=activity,proto3" json:"activity,omitempty"`
}

func (x *ExchangeReply_Company) Reset() {
	*x = ExchangeReply_Company{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_exchanges_v1_exchanges_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeReply_Company) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeReply_Company) ProtoMessage() {}

func (x *ExchangeReply_Company) ProtoReflect() protoreflect.Message {
	mi := &file_proto_exchanges_v1_exchanges_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeReply_Company.ProtoReflect.Descriptor instead.
func (*ExchangeReply_Company) Descriptor() ([]byte, []int) {
	return file_proto_exchanges_v1_exchanges_proto_rawDescGZIP(), []int{4, 1}
}

func (x *ExchangeReply_Company) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ExchangeReply_Company) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *ExchangeReply_Company) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExchangeReply_Company) GetIsin() string {
	if x != nil {
		return x.Isin
	}
	return ""
}

func (x *ExchangeReply_Company) GetActivity() int64 {
	if x != nil {
		return x.Activity
	}
	return 0
}

type ExchangeReplies_Company struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Ticker string `protobuf:"bytes,2,opt,name=ticker,proto3" json:"ticker,omitempty"`
	Name   string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Isin   string `protobuf:"bytes,4,opt,name=isin,proto3" json:"isin,omitempty"`
}

func (x *ExchangeReplies_Company) Reset() {
	*x = ExchangeReplies_Company{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_exchanges_v1_exchanges_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeReplies_Company) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeReplies_Company) ProtoMessage() {}

func (x *ExchangeReplies_Company) ProtoReflect() protoreflect.Message {
	mi := &file_proto_exchanges_v1_exchanges_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeReplies_Company.ProtoReflect.Descriptor instead.
func (*ExchangeReplies_Company) Descriptor() ([]byte, []int) {
	return file_proto_exchanges_v1_exchanges_proto_rawDescGZIP(), []int{7, 0}
}

func (x *ExchangeReplies_Company) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ExchangeReplies_Company) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *ExchangeReplies_Company) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExchangeReplies_Company) GetIsin() string {
	if x != nil {
		return x.Isin
	}
	return ""
}

var File_proto_exchanges_v1_exchanges_proto protoreflect.FileDescriptor

var file_proto_exchanges_v1_exchanges_proto_rawDesc = []byte{
	0x0a, 0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x64,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x96, 0x04, 0x0a, 0x0f, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0xf2,
	0x02, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0xd9, 0x02, 0xfa, 0x42, 0xd5, 0x02, 0x72, 0xd2, 0x02, 0x52, 0x06, 0x4e, 0x41, 0x53, 0x44, 0x41,
	0x51, 0x52, 0x04, 0x4e, 0x59, 0x53, 0x45, 0x52, 0x03, 0x4c, 0x53, 0x45, 0x52, 0x02, 0x54, 0x4f,
	0x52, 0x01, 0x56, 0x52, 0x03, 0x4e, 0x45, 0x4f, 0x52, 0x02, 0x42, 0x45, 0x52, 0x02, 0x48, 0x4d,
	0x52, 0x05, 0x58, 0x45, 0x54, 0x52, 0x41, 0x52, 0x02, 0x44, 0x55, 0x52, 0x01, 0x46, 0x52, 0x02,
	0x48, 0x41, 0x52, 0x02, 0x4d, 0x55, 0x52, 0x03, 0x53, 0x54, 0x55, 0x52, 0x02, 0x4c, 0x55, 0x52,
	0x02, 0x56, 0x49, 0x52, 0x02, 0x4d, 0x49, 0x52, 0x02, 0x50, 0x41, 0x52, 0x02, 0x42, 0x52, 0x52,
	0x02, 0x4c, 0x53, 0x52, 0x02, 0x56, 0x58, 0x52, 0x02, 0x41, 0x53, 0x52, 0x02, 0x53, 0x57, 0x52,
	0x02, 0x4d, 0x43, 0x52, 0x02, 0x49, 0x52, 0x52, 0x02, 0x49, 0x43, 0x52, 0x03, 0x4e, 0x46, 0x4e,
	0x52, 0x02, 0x52, 0x47, 0x52, 0x02, 0x56, 0x53, 0x52, 0x02, 0x4e, 0x42, 0x52, 0x02, 0x48, 0x45,
	0x52, 0x02, 0x4f, 0x4c, 0x52, 0x02, 0x53, 0x54, 0x52, 0x02, 0x54, 0x4c, 0x52, 0x02, 0x43, 0x4f,
	0x52, 0x02, 0x54, 0x41, 0x52, 0x02, 0x48, 0x4b, 0x52, 0x02, 0x4b, 0x4f, 0x52, 0x02, 0x4b, 0x51,
	0x52, 0x03, 0x50, 0x53, 0x45, 0x52, 0x03, 0x42, 0x55, 0x44, 0x52, 0x03, 0x57, 0x41, 0x52, 0x52,
	0x02, 0x53, 0x47, 0x52, 0x03, 0x42, 0x53, 0x45, 0x52, 0x03, 0x53, 0x48, 0x45, 0x52, 0x02, 0x53,
	0x4e, 0x52, 0x02, 0x41, 0x54, 0x52, 0x02, 0x4a, 0x4b, 0x52, 0x03, 0x4a, 0x53, 0x45, 0x52, 0x02,
	0x42, 0x4b, 0x52, 0x02, 0x53, 0x52, 0x52, 0x03, 0x4e, 0x53, 0x45, 0x52, 0x03, 0x4b, 0x41, 0x52,
	0x52, 0x02, 0x41, 0x55, 0x52, 0x03, 0x53, 0x48, 0x47, 0x52, 0x02, 0x43, 0x4d, 0x52, 0x02, 0x56,
	0x4e, 0x52, 0x04, 0x4b, 0x4c, 0x53, 0x45, 0x52, 0x02, 0x52, 0x4f, 0x52, 0x02, 0x53, 0x41, 0x52,
	0x02, 0x42, 0x41, 0x52, 0x02, 0x4d, 0x58, 0x52, 0x02, 0x49, 0x4c, 0x52, 0x03, 0x5a, 0x53, 0x45,
	0x52, 0x02, 0x54, 0x57, 0x52, 0x03, 0x4c, 0x49, 0x4d, 0x52, 0x02, 0x43, 0x43, 0x52, 0x03, 0x54,
	0x57, 0x4f, 0x52, 0x02, 0x49, 0x53, 0x52, 0x02, 0x43, 0x4e, 0x52, 0x04, 0x49, 0x4e, 0x44, 0x58,
	0x52, 0x05, 0x47, 0x42, 0x4f, 0x4e, 0x44, 0x52, 0x05, 0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x52, 0x04,
	0x43, 0x4f, 0x4d, 0x4d, 0x52, 0x05, 0x46, 0x4f, 0x52, 0x45, 0x58, 0x52, 0x06, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43,
	0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x6c, 0x69, 0x64,
	0x61, 0x79, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x68, 0x6f, 0x6c, 0x69, 0x64,
	0x61, 0x79, 0x73, 0x22, 0x8c, 0x03, 0x0a, 0x15, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x49, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0xf2, 0x02,
	0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0xd9,
	0x02, 0xfa, 0x42, 0xd5, 0x02, 0x72, 0xd2, 0x02, 0x52, 0x06, 0x4e, 0x41, 0x53, 0x44, 0x41, 0x51,
	0x52, 0x04, 0x4e, 0x59, 0x53, 0x45, 0x52, 0x03, 0x4c, 0x53, 0x45, 0x52, 0x02, 0x54, 0x4f, 0x52,
	0x01, 0x56, 0x52, 0x03, 0x4e, 0x45, 0x4f, 0x52, 0x02, 0x42, 0x45, 0x52, 0x02, 0x48, 0x4d, 0x52,
	0x05, 0x58, 0x45, 0x54, 0x52, 0x41, 0x52, 0x02, 0x44, 0x55, 0x52, 0x01, 0x46, 0x52, 0x02, 0x48,
	0x41, 0x52, 0x02, 0x4d, 0x55, 0x52, 0x03, 0x53, 0x54, 0x55, 0x52, 0x02, 0x4c, 0x55, 0x52, 0x02,
	0x56, 0x49, 0x52, 0x02, 0x4d, 0x49, 0x52, 0x02, 0x50, 0x41, 0x52, 0x02, 0x42, 0x52, 0x52, 0x02,
	0x4c, 0x53, 0x52, 0x02, 0x56, 0x58, 0x52, 0x02, 0x41, 0x53, 0x52, 0x02, 0x53, 0x57, 0x52, 0x02,
	0x4d, 0x43, 0x52, 0x02, 0x49, 0x52, 0x52, 0x02, 0x49, 0x43, 0x52, 0x03, 0x4e, 0x46, 0x4e, 0x52,
	0x02, 0x52, 0x47, 0x52, 0x02, 0x56, 0x53, 0x52, 0x02, 0x4e, 0x42, 0x52, 0x02, 0x48, 0x45, 0x52,
	0x02, 0x4f, 0x4c, 0x52, 0x02, 0x53, 0x54, 0x52, 0x02, 0x54, 0x4c, 0x52, 0x02, 0x43, 0x4f, 0x52,
	0x02, 0x54, 0x41, 0x52, 0x02, 0x48, 0x4b, 0x52, 0x02, 0x4b, 0x4f, 0x52, 0x02, 0x4b, 0x51, 0x52,
	0x03, 0x50, 0x53, 0x45, 0x52, 0x03, 0x42, 0x55, 0x44, 0x52, 0x03, 0x57, 0x41, 0x52, 0x52, 0x02,
	0x53, 0x47, 0x52, 0x03, 0x42, 0x53, 0x45, 0x52, 0x03, 0x53, 0x48, 0x45, 0x52, 0x02, 0x53, 0x4e,
	0x52, 0x02, 0x41, 0x54, 0x52, 0x02, 0x4a, 0x4b, 0x52, 0x03, 0x4a, 0x53, 0x45, 0x52, 0x02, 0x42,
	0x4b, 0x52, 0x02, 0x53, 0x52, 0x52, 0x03, 0x4e, 0x53, 0x45, 0x52, 0x03, 0x4b, 0x41, 0x52, 0x52,
	0x02, 0x41, 0x55, 0x52, 0x03, 0x53, 0x48, 0x47, 0x52, 0x02, 0x43, 0x4d, 0x52, 0x02, 0x56, 0x4e,
	0x52, 0x04, 0x4b, 0x4c, 0x53, 0x45, 0x52, 0x02, 0x52, 0x4f, 0x52, 0x02, 0x53, 0x41, 0x52, 0x02,
	0x42, 0x41, 0x52, 0x02, 0x4d, 0x58, 0x52, 0x02, 0x49, 0x4c, 0x52, 0x03, 0x5a, 0x53, 0x45, 0x52,
	0x02, 0x54, 0x57, 0x52, 0x03, 0x4c, 0x49, 0x4d, 0x52, 0x02, 0x43, 0x43, 0x52, 0x03, 0x54, 0x57,
	0x4f, 0x52, 0x02, 0x49, 0x53, 0x52, 0x02, 0x43, 0x4e, 0x52, 0x04, 0x49, 0x4e, 0x44, 0x58, 0x52,
	0x05, 0x47, 0x42, 0x4f, 0x4e, 0x44, 0x52, 0x05, 0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x52, 0x04, 0x43,
	0x4f, 0x4d, 0x4d, 0x52, 0x05, 0x46, 0x4f, 0x52, 0x45, 0x58, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x22, 0xa9, 0x01, 0x0a, 0x13, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x67, 0x65,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x1a, 0x4c, 0x0a, 0x04, 0x50, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x1a, 0x05, 0x18,
	0x90, 0x4e, 0x20, 0x00, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xfa, 0x42, 0x07,
	0x1a, 0x05, 0x18, 0x96, 0x01, 0x20, 0x00, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x43,
	0x0a, 0x15, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x07, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x10, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02,
	0x08, 0x01, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x18, 0x01, 0x52, 0x07, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x73, 0x22, 0x87, 0x06, 0x0a, 0x0d, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x68, 0x6f, 0x6c, 0x69, 0x64,
	0x61, 0x79, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x52, 0x08,
	0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x41, 0x0a, 0x09,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x12,
	0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x1a, 0x6f, 0x0a, 0x07, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x66,
	0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x66,
	0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x1a, 0x75, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x69, 0x73, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x73, 0x69,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x22, 0x95, 0x01,
	0x0a, 0x13, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x73, 0x4f, 0x70, 0x65, 0x6e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x6f, 0x75, 0x72,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x6f, 0x70, 0x65, 0x6e, 0x22, 0x90, 0x01, 0x0a, 0x12, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0xbe, 0x01, 0x0a, 0x0f, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x1a, 0x59,
	0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x69, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x73, 0x69, 0x6e, 0x22, 0x2b, 0x0a, 0x13, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x32, 0xaf, 0x03, 0x0a, 0x09, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x12, 0x76, 0x0a, 0x06, 0x49, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x23,
	0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x73, 0x4f, 0x70, 0x65,
	0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c,
	0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x7b, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x7d, 0x2f, 0x69, 0x73, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x60, 0x0a, 0x03,
	0x47, 0x65, 0x74, 0x12, 0x1d, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x7b, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x7d, 0x12, 0x5f,
	0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f,
	0x12, 0x0d, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12,
	0x67, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x23, 0x2e, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x2a, 0x0d, 0x2f, 0x76, 0x31, 0x2f, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x42, 0x8e, 0x03, 0x0a, 0x1b, 0x64, 0x65, 0x76,
	0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x13, 0x41, 0x50, 0x49, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x56, 0x31, 0x50, 0x01, 0x5a,
	0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x72, 0x6b, 0x74,
	0x6f, 0x73, 0x2d, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x62, 0x75, 0x66, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x2f, 0x76,
	0x31, 0x3b, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x5f, 0x76, 0x31, 0x92, 0x41,
	0x97, 0x02, 0x12, 0x83, 0x01, 0x0a, 0x0e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x20, 0x41, 0x50, 0x49, 0x73, 0x12, 0x0e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x20, 0x41, 0x50, 0x49, 0x73, 0x22, 0x5c, 0x0a, 0x16, 0x41, 0x72, 0x6b, 0x74, 0x6f, 0x73, 0x20,
	0x56, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x25, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x72, 0x6b, 0x74, 0x6f, 0x73, 0x2d, 0x76, 0x65, 0x6e, 0x74, 0x75,
	0x72, 0x65, 0x2f, 0x62, 0x75, 0x66, 0x1a, 0x1b, 0x6f, 0x73, 0x73, 0x40, 0x61, 0x72, 0x6b, 0x74,
	0x6f, 0x73, 0x2d, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x32, 0x03, 0x31, 0x2e, 0x30, 0x2a, 0x02, 0x01, 0x02, 0x32, 0x10, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e,
	0x5a, 0x59, 0x0a, 0x57, 0x0a, 0x06, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x12, 0x4d, 0x08, 0x02,
	0x12, 0x38, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2c, 0x20, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x20, 0x62, 0x79, 0x20, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x3a, 0x20, 0x42, 0x65, 0x61, 0x72,
	0x65, 0x72, 0x20, 0x3c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x3e, 0x1a, 0x0d, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x02, 0x62, 0x0c, 0x0a, 0x0a, 0x0a,
	0x06, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x12, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_proto_exchanges_v1_exchanges_proto_rawDescOnce sync.Once
	file_proto_exchanges_v1_exchanges_proto_rawDescData = file_proto_exchanges_v1_exchanges_proto_rawDesc
)

func file_proto_exchanges_v1_exchanges_proto_rawDescGZIP() []byte {
	file_proto_exchanges_v1_exchanges_proto_rawDescOnce.Do(func() {
		file_proto_exchanges_v1_exchanges_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_exchanges_v1_exchanges_proto_rawDescData)
	})
	return file_proto_exchanges_v1_exchanges_proto_rawDescData
}

var file_proto_exchanges_v1_exchanges_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_proto_exchanges_v1_exchanges_proto_goTypes = []interface{}{
	(*ExchangeRequest)(nil),          // 0: exchanges.v1.ExchangeRequest
	(*ExchangeIsOpenRequest)(nil),    // 1: exchanges.v1.ExchangeIsOpenRequest
	(*ExchangeListRequest)(nil),      // 2: exchanges.v1.ExchangeListRequest
	(*ExchangeDeleteRequest)(nil),    // 3: exchanges.v1.ExchangeDeleteRequest
	(*ExchangeReply)(nil),            // 4: exchanges.v1.ExchangeReply
	(*ExchangeIsOpenReply)(nil),      // 5: exchanges.v1.ExchangeIsOpenReply
	(*ExchangeShortReply)(nil),       // 6: exchanges.v1.ExchangeShortReply
	(*ExchangeReplies)(nil),          // 7: exchanges.v1.ExchangeReplies
	(*ExchangeDeleteReply)(nil),      // 8: exchanges.v1.ExchangeDeleteReply
	(*ExchangeRequest_Request)(nil),  // 9: exchanges.v1.ExchangeRequest.Request
	(*ExchangeListRequest_Page)(nil), // 10: exchanges.v1.ExchangeListRequest.Page
	(*ExchangeReply_Holiday)(nil),    // 11: exchanges.v1.ExchangeReply.Holiday
	(*ExchangeReply_Company)(nil),    // 12: exchanges.v1.ExchangeReply.Company
	(*ExchangeReplies_Company)(nil),  // 13: exchanges.v1.ExchangeReplies.Company
	(*v1.IndiceShortReply)(nil),      // 14: indices.v1.IndiceShortReply
	(*timestamppb.Timestamp)(nil),    // 15: google.protobuf.Timestamp
}
var file_proto_exchanges_v1_exchanges_proto_depIdxs = []int32{
	9,  // 0: exchanges.v1.ExchangeRequest.request:type_name -> exchanges.v1.ExchangeRequest.Request
	10, // 1: exchanges.v1.ExchangeListRequest.page:type_name -> exchanges.v1.ExchangeListRequest.Page
	14, // 2: exchanges.v1.ExchangeReply.indices:type_name -> indices.v1.IndiceShortReply
	11, // 3: exchanges.v1.ExchangeReply.holidays:type_name -> exchanges.v1.ExchangeReply.Holiday
	12, // 4: exchanges.v1.ExchangeReply.companies:type_name -> exchanges.v1.ExchangeReply.Company
	15, // 5: exchanges.v1.ExchangeReply.created_at:type_name -> google.protobuf.Timestamp
	15, // 6: exchanges.v1.ExchangeReply.updated_at:type_name -> google.protobuf.Timestamp
	6,  // 7: exchanges.v1.ExchangeReplies.results:type_name -> exchanges.v1.ExchangeShortReply
	1,  // 8: exchanges.v1.Exchanges.IsOpen:input_type -> exchanges.v1.ExchangeIsOpenRequest
	0,  // 9: exchanges.v1.Exchanges.Get:input_type -> exchanges.v1.ExchangeRequest
	2,  // 10: exchanges.v1.Exchanges.List:input_type -> exchanges.v1.ExchangeListRequest
	3,  // 11: exchanges.v1.Exchanges.Delete:input_type -> exchanges.v1.ExchangeDeleteRequest
	5,  // 12: exchanges.v1.Exchanges.IsOpen:output_type -> exchanges.v1.ExchangeIsOpenReply
	4,  // 13: exchanges.v1.Exchanges.Get:output_type -> exchanges.v1.ExchangeReply
	7,  // 14: exchanges.v1.Exchanges.List:output_type -> exchanges.v1.ExchangeReplies
	8,  // 15: exchanges.v1.Exchanges.Delete:output_type -> exchanges.v1.ExchangeDeleteReply
	12, // [12:16] is the sub-list for method output_type
	8,  // [8:12] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_proto_exchanges_v1_exchanges_proto_init() }
func file_proto_exchanges_v1_exchanges_proto_init() {
	if File_proto_exchanges_v1_exchanges_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_exchanges_v1_exchanges_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_exchanges_v1_exchanges_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeIsOpenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_exchanges_v1_exchanges_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_exchanges_v1_exchanges_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_exchanges_v1_exchanges_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_exchanges_v1_exchanges_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeIsOpenReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_exchanges_v1_exchanges_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeShortReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_exchanges_v1_exchanges_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeReplies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_exchanges_v1_exchanges_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeDeleteReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_exchanges_v1_exchanges_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeRequest_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_exchanges_v1_exchanges_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeListRequest_Page); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_exchanges_v1_exchanges_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeReply_Holiday); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_exchanges_v1_exchanges_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeReply_Company); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_exchanges_v1_exchanges_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeReplies_Company); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_exchanges_v1_exchanges_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_exchanges_v1_exchanges_proto_goTypes,
		DependencyIndexes: file_proto_exchanges_v1_exchanges_proto_depIdxs,
		MessageInfos:      file_proto_exchanges_v1_exchanges_proto_msgTypes,
	}.Build()
	File_proto_exchanges_v1_exchanges_proto = out.File
	file_proto_exchanges_v1_exchanges_proto_rawDesc = nil
	file_proto_exchanges_v1_exchanges_proto_goTypes = nil
	file_proto_exchanges_v1_exchanges_proto_depIdxs = nil
}
