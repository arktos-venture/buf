// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.21.4
// source: proto/exchanges/v1/exchanges.proto

package v1Exchanges

import (
	v1 "github.com/arktos-venture/buf/proto/indices/v1"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Holiday struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Date        string `protobuf:"bytes,3,opt,name=date,proto3" json:"date,omitempty"`
	Official    bool   `protobuf:"varint,4,opt,name=official,proto3" json:"official,omitempty"`
}

func (x *Holiday) Reset() {
	*x = Holiday{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_exchanges_v1_exchanges_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Holiday) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Holiday) ProtoMessage() {}

func (x *Holiday) ProtoReflect() protoreflect.Message {
	mi := &file_proto_exchanges_v1_exchanges_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Holiday.ProtoReflect.Descriptor instead.
func (*Holiday) Descriptor() ([]byte, []int) {
	return file_proto_exchanges_v1_exchanges_proto_rawDescGZIP(), []int{0}
}

func (x *Holiday) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Holiday) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Holiday) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *Holiday) GetOfficial() bool {
	if x != nil {
		return x.Official
	}
	return false
}

type ExchangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticker string `protobuf:"bytes,1,opt,name=ticker,proto3" json:"ticker,omitempty"`
}

func (x *ExchangeRequest) Reset() {
	*x = ExchangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_exchanges_v1_exchanges_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeRequest) ProtoMessage() {}

func (x *ExchangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_exchanges_v1_exchanges_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeRequest.ProtoReflect.Descriptor instead.
func (*ExchangeRequest) Descriptor() ([]byte, []int) {
	return file_proto_exchanges_v1_exchanges_proto_rawDescGZIP(), []int{1}
}

func (x *ExchangeRequest) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

type ExchangeSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Country  string `protobuf:"bytes,1,opt,name=country,proto3" json:"country,omitempty"`
	Currency string `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
	Open     bool   `protobuf:"varint,3,opt,name=open,proto3" json:"open,omitempty"`
}

func (x *ExchangeSearchRequest) Reset() {
	*x = ExchangeSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_exchanges_v1_exchanges_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeSearchRequest) ProtoMessage() {}

func (x *ExchangeSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_exchanges_v1_exchanges_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeSearchRequest.ProtoReflect.Descriptor instead.
func (*ExchangeSearchRequest) Descriptor() ([]byte, []int) {
	return file_proto_exchanges_v1_exchanges_proto_rawDescGZIP(), []int{2}
}

func (x *ExchangeSearchRequest) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *ExchangeSearchRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *ExchangeSearchRequest) GetOpen() bool {
	if x != nil {
		return x.Open
	}
	return false
}

type ExchangeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticker        string                     `protobuf:"bytes,1,opt,name=ticker,proto3" json:"ticker,omitempty"`
	Name          string                     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                     `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	PrimaryIndice string                     `protobuf:"bytes,4,opt,name=primary_indice,json=primaryIndice,proto3" json:"primary_indice,omitempty"`
	Indices       []*v1.IndiceReplies_Result `protobuf:"bytes,5,rep,name=indices,proto3" json:"indices,omitempty"`
	Stats         *ExchangeStatsReply        `protobuf:"bytes,6,opt,name=stats,proto3" json:"stats,omitempty"`
	Routing       string                     `protobuf:"bytes,7,opt,name=routing,proto3" json:"routing,omitempty"`
	Country       string                     `protobuf:"bytes,8,opt,name=country,proto3" json:"country,omitempty"`
	Currency      string                     `protobuf:"bytes,9,opt,name=currency,proto3" json:"currency,omitempty"`
	Timezone      string                     `protobuf:"bytes,10,opt,name=timezone,proto3" json:"timezone,omitempty"`
	Holidays      []*Holiday                 `protobuf:"bytes,11,rep,name=holidays,proto3" json:"holidays,omitempty"`
	TradingHours  string                     `protobuf:"bytes,12,opt,name=trading_hours,json=tradingHours,proto3" json:"trading_hours,omitempty"`
	Open          bool                       `protobuf:"varint,13,opt,name=open,proto3" json:"open,omitempty"`
	CreatedAt     *timestamppb.Timestamp     `protobuf:"bytes,14,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     *timestamppb.Timestamp     `protobuf:"bytes,15,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *ExchangeReply) Reset() {
	*x = ExchangeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_exchanges_v1_exchanges_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeReply) ProtoMessage() {}

func (x *ExchangeReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_exchanges_v1_exchanges_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeReply.ProtoReflect.Descriptor instead.
func (*ExchangeReply) Descriptor() ([]byte, []int) {
	return file_proto_exchanges_v1_exchanges_proto_rawDescGZIP(), []int{3}
}

func (x *ExchangeReply) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *ExchangeReply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExchangeReply) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ExchangeReply) GetPrimaryIndice() string {
	if x != nil {
		return x.PrimaryIndice
	}
	return ""
}

func (x *ExchangeReply) GetIndices() []*v1.IndiceReplies_Result {
	if x != nil {
		return x.Indices
	}
	return nil
}

func (x *ExchangeReply) GetStats() *ExchangeStatsReply {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *ExchangeReply) GetRouting() string {
	if x != nil {
		return x.Routing
	}
	return ""
}

func (x *ExchangeReply) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *ExchangeReply) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *ExchangeReply) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *ExchangeReply) GetHolidays() []*Holiday {
	if x != nil {
		return x.Holidays
	}
	return nil
}

func (x *ExchangeReply) GetTradingHours() string {
	if x != nil {
		return x.TradingHours
	}
	return ""
}

func (x *ExchangeReply) GetOpen() bool {
	if x != nil {
		return x.Open
	}
	return false
}

func (x *ExchangeReply) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ExchangeReply) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type ExchangeStatsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price     *ExchangeStatsReply_Price  `protobuf:"bytes,1,opt,name=price,proto3" json:"price,omitempty"`
	Volume    *ExchangeStatsReply_Volume `protobuf:"bytes,2,opt,name=volume,proto3" json:"volume,omitempty"`
	CreatedAt *timestamppb.Timestamp     `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt *timestamppb.Timestamp     `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *ExchangeStatsReply) Reset() {
	*x = ExchangeStatsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_exchanges_v1_exchanges_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeStatsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeStatsReply) ProtoMessage() {}

func (x *ExchangeStatsReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_exchanges_v1_exchanges_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeStatsReply.ProtoReflect.Descriptor instead.
func (*ExchangeStatsReply) Descriptor() ([]byte, []int) {
	return file_proto_exchanges_v1_exchanges_proto_rawDescGZIP(), []int{4}
}

func (x *ExchangeStatsReply) GetPrice() *ExchangeStatsReply_Price {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *ExchangeStatsReply) GetVolume() *ExchangeStatsReply_Volume {
	if x != nil {
		return x.Volume
	}
	return nil
}

func (x *ExchangeStatsReply) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ExchangeStatsReply) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type ExchangeReplies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ExchangeReplies_Result `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Total   int64                     `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *ExchangeReplies) Reset() {
	*x = ExchangeReplies{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_exchanges_v1_exchanges_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeReplies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeReplies) ProtoMessage() {}

func (x *ExchangeReplies) ProtoReflect() protoreflect.Message {
	mi := &file_proto_exchanges_v1_exchanges_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeReplies.ProtoReflect.Descriptor instead.
func (*ExchangeReplies) Descriptor() ([]byte, []int) {
	return file_proto_exchanges_v1_exchanges_proto_rawDescGZIP(), []int{5}
}

func (x *ExchangeReplies) GetResults() []*ExchangeReplies_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ExchangeReplies) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type ExchangeStatsReply_Price struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxAnnual    float32 `protobuf:"fixed32,1,opt,name=max_annual,json=maxAnnual,proto3" json:"max_annual,omitempty"`
	MinAnnual    float32 `protobuf:"fixed32,2,opt,name=min_annual,json=minAnnual,proto3" json:"min_annual,omitempty"`
	ReturnYear   float32 `protobuf:"fixed32,3,opt,name=return_year,json=returnYear,proto3" json:"return_year,omitempty"`
	MarketCapUsd int64   `protobuf:"varint,4,opt,name=market_cap_usd,json=marketCapUsd,proto3" json:"market_cap_usd,omitempty"`
	Beta5Y       float32 `protobuf:"fixed32,5,opt,name=beta5y,proto3" json:"beta5y,omitempty"`
	Start        float32 `protobuf:"fixed32,6,opt,name=start,proto3" json:"start,omitempty"`
}

func (x *ExchangeStatsReply_Price) Reset() {
	*x = ExchangeStatsReply_Price{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_exchanges_v1_exchanges_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeStatsReply_Price) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeStatsReply_Price) ProtoMessage() {}

func (x *ExchangeStatsReply_Price) ProtoReflect() protoreflect.Message {
	mi := &file_proto_exchanges_v1_exchanges_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeStatsReply_Price.ProtoReflect.Descriptor instead.
func (*ExchangeStatsReply_Price) Descriptor() ([]byte, []int) {
	return file_proto_exchanges_v1_exchanges_proto_rawDescGZIP(), []int{4, 0}
}

func (x *ExchangeStatsReply_Price) GetMaxAnnual() float32 {
	if x != nil {
		return x.MaxAnnual
	}
	return 0
}

func (x *ExchangeStatsReply_Price) GetMinAnnual() float32 {
	if x != nil {
		return x.MinAnnual
	}
	return 0
}

func (x *ExchangeStatsReply_Price) GetReturnYear() float32 {
	if x != nil {
		return x.ReturnYear
	}
	return 0
}

func (x *ExchangeStatsReply_Price) GetMarketCapUsd() int64 {
	if x != nil {
		return x.MarketCapUsd
	}
	return 0
}

func (x *ExchangeStatsReply_Price) GetBeta5Y() float32 {
	if x != nil {
		return x.Beta5Y
	}
	return 0
}

func (x *ExchangeStatsReply_Price) GetStart() float32 {
	if x != nil {
		return x.Start
	}
	return 0
}

type ExchangeStatsReply_Volume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg_10D int64 `protobuf:"varint,1,opt,name=avg_10d,json=avg10d,proto3" json:"avg_10d,omitempty"`
	Avg_30D int64 `protobuf:"varint,2,opt,name=avg_30d,json=avg30d,proto3" json:"avg_30d,omitempty"`
	Avg_90D int64 `protobuf:"varint,3,opt,name=avg_90d,json=avg90d,proto3" json:"avg_90d,omitempty"`
}

func (x *ExchangeStatsReply_Volume) Reset() {
	*x = ExchangeStatsReply_Volume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_exchanges_v1_exchanges_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeStatsReply_Volume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeStatsReply_Volume) ProtoMessage() {}

func (x *ExchangeStatsReply_Volume) ProtoReflect() protoreflect.Message {
	mi := &file_proto_exchanges_v1_exchanges_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeStatsReply_Volume.ProtoReflect.Descriptor instead.
func (*ExchangeStatsReply_Volume) Descriptor() ([]byte, []int) {
	return file_proto_exchanges_v1_exchanges_proto_rawDescGZIP(), []int{4, 1}
}

func (x *ExchangeStatsReply_Volume) GetAvg_10D() int64 {
	if x != nil {
		return x.Avg_10D
	}
	return 0
}

func (x *ExchangeStatsReply_Volume) GetAvg_30D() int64 {
	if x != nil {
		return x.Avg_30D
	}
	return 0
}

func (x *ExchangeStatsReply_Volume) GetAvg_90D() int64 {
	if x != nil {
		return x.Avg_90D
	}
	return 0
}

type ExchangeReplies_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticker  string `protobuf:"bytes,1,opt,name=ticker,proto3" json:"ticker,omitempty"`
	Routing string `protobuf:"bytes,2,opt,name=routing,proto3" json:"routing,omitempty"`
	Name    string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Open    bool   `protobuf:"varint,4,opt,name=open,proto3" json:"open,omitempty"`
}

func (x *ExchangeReplies_Result) Reset() {
	*x = ExchangeReplies_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_exchanges_v1_exchanges_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeReplies_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeReplies_Result) ProtoMessage() {}

func (x *ExchangeReplies_Result) ProtoReflect() protoreflect.Message {
	mi := &file_proto_exchanges_v1_exchanges_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeReplies_Result.ProtoReflect.Descriptor instead.
func (*ExchangeReplies_Result) Descriptor() ([]byte, []int) {
	return file_proto_exchanges_v1_exchanges_proto_rawDescGZIP(), []int{5, 0}
}

func (x *ExchangeReplies_Result) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *ExchangeReplies_Result) GetRouting() string {
	if x != nil {
		return x.Routing
	}
	return ""
}

func (x *ExchangeReplies_Result) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExchangeReplies_Result) GetOpen() bool {
	if x != nil {
		return x.Open
	}
	return false
}

var File_proto_exchanges_v1_exchanges_proto protoreflect.FileDescriptor

var file_proto_exchanges_v1_exchanges_proto_rawDesc = []byte{
	0x0a, 0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x64,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6f, 0x0a, 0x07, 0x48, 0x6f,
	0x6c, 0x69, 0x64, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x22, 0x34, 0x0a, 0x0f, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21,
	0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09,
	0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x08, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x22, 0x75, 0x0a, 0x15, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x07, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x72, 0x03, 0x98, 0x01, 0x02, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x24,
	0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x98, 0x01, 0x03, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x22, 0xc6, 0x04, 0x0a, 0x0d, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x12,
	0x3a, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x64, 0x69, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12,
	0x31, 0x0a, 0x08, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x52, 0x08, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61,
	0x79, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x6f,
	0x75, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x22, 0x9b, 0x04, 0x0a, 0x12, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3c, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52,
	0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x1a, 0xba, 0x01,
	0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x61,
	0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6d, 0x61, 0x78,
	0x41, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x6e,
	0x6e, 0x75, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x41,
	0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f,
	0x79, 0x65, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x5f, 0x63, 0x61, 0x70, 0x5f, 0x75, 0x73, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x70, 0x55, 0x73, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x62, 0x65, 0x74, 0x61, 0x35, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x62, 0x65,
	0x74, 0x61, 0x35, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x1a, 0x53, 0x0a, 0x06, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x76, 0x67, 0x5f, 0x31, 0x30, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x76, 0x67, 0x31, 0x30, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x61, 0x76, 0x67, 0x5f, 0x33, 0x30, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x61, 0x76, 0x67, 0x33, 0x30, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x76, 0x67, 0x5f, 0x39, 0x30,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x76, 0x67, 0x39, 0x30, 0x64, 0x22,
	0xcb, 0x01, 0x0a, 0x0f, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x1a, 0x62, 0x0a, 0x06, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x32, 0xc4, 0x02,
	0x0a, 0x09, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x60, 0x0a, 0x03, 0x47,
	0x65, 0x74, 0x12, 0x1d, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1b, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1d,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x2f, 0x7b, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x7d, 0x12, 0x6d, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1d, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12,
	0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x7b, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x7d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x66, 0x0a, 0x06,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x23, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x12, 0x22, 0x0d, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x3a, 0x01, 0x2a, 0x42, 0x8d, 0x03, 0x0a, 0x1b, 0x64, 0x65, 0x76, 0x2e, 0x6b, 0x72, 0x61,
	0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x42, 0x13, 0x41, 0x50, 0x49, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x56, 0x31, 0x50, 0x01, 0x5a, 0x3c, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x72, 0x6b, 0x74, 0x6f, 0x73, 0x2d, 0x76,
	0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x62, 0x75, 0x66, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x92, 0x41, 0x97, 0x02, 0x12, 0x83, 0x01,
	0x0a, 0x0e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x20, 0x41, 0x50, 0x49, 0x73,
	0x12, 0x0e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x20, 0x41, 0x50, 0x49, 0x73,
	0x22, 0x5c, 0x0a, 0x16, 0x41, 0x72, 0x6b, 0x74, 0x6f, 0x73, 0x20, 0x56, 0x65, 0x6e, 0x74, 0x75,
	0x72, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x25, 0x68, 0x74, 0x74, 0x70,
	0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61,
	0x72, 0x6b, 0x74, 0x6f, 0x73, 0x2d, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x62, 0x75,
	0x66, 0x1a, 0x1b, 0x6f, 0x73, 0x73, 0x40, 0x61, 0x72, 0x6b, 0x74, 0x6f, 0x73, 0x2d, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x32, 0x03,
	0x31, 0x2e, 0x30, 0x2a, 0x02, 0x01, 0x02, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x5a, 0x59, 0x0a, 0x57, 0x0a,
	0x06, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x12, 0x4d, 0x08, 0x02, 0x12, 0x38, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x2c, 0x20, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x42,
	0x65, 0x61, 0x72, 0x65, 0x72, 0x3a, 0x20, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x20, 0x3c, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x3e, 0x1a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x02, 0x62, 0x0c, 0x0a, 0x0a, 0x0a, 0x06, 0x62, 0x65, 0x61, 0x72,
	0x65, 0x72, 0x12, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_exchanges_v1_exchanges_proto_rawDescOnce sync.Once
	file_proto_exchanges_v1_exchanges_proto_rawDescData = file_proto_exchanges_v1_exchanges_proto_rawDesc
)

func file_proto_exchanges_v1_exchanges_proto_rawDescGZIP() []byte {
	file_proto_exchanges_v1_exchanges_proto_rawDescOnce.Do(func() {
		file_proto_exchanges_v1_exchanges_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_exchanges_v1_exchanges_proto_rawDescData)
	})
	return file_proto_exchanges_v1_exchanges_proto_rawDescData
}

var file_proto_exchanges_v1_exchanges_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_proto_exchanges_v1_exchanges_proto_goTypes = []interface{}{
	(*Holiday)(nil),                   // 0: exchanges.v1.Holiday
	(*ExchangeRequest)(nil),           // 1: exchanges.v1.ExchangeRequest
	(*ExchangeSearchRequest)(nil),     // 2: exchanges.v1.ExchangeSearchRequest
	(*ExchangeReply)(nil),             // 3: exchanges.v1.ExchangeReply
	(*ExchangeStatsReply)(nil),        // 4: exchanges.v1.ExchangeStatsReply
	(*ExchangeReplies)(nil),           // 5: exchanges.v1.ExchangeReplies
	(*ExchangeStatsReply_Price)(nil),  // 6: exchanges.v1.ExchangeStatsReply.Price
	(*ExchangeStatsReply_Volume)(nil), // 7: exchanges.v1.ExchangeStatsReply.Volume
	(*ExchangeReplies_Result)(nil),    // 8: exchanges.v1.ExchangeReplies.Result
	(*v1.IndiceReplies_Result)(nil),   // 9: indices.v1.IndiceReplies.Result
	(*timestamppb.Timestamp)(nil),     // 10: google.protobuf.Timestamp
}
var file_proto_exchanges_v1_exchanges_proto_depIdxs = []int32{
	9,  // 0: exchanges.v1.ExchangeReply.indices:type_name -> indices.v1.IndiceReplies.Result
	4,  // 1: exchanges.v1.ExchangeReply.stats:type_name -> exchanges.v1.ExchangeStatsReply
	0,  // 2: exchanges.v1.ExchangeReply.holidays:type_name -> exchanges.v1.Holiday
	10, // 3: exchanges.v1.ExchangeReply.created_at:type_name -> google.protobuf.Timestamp
	10, // 4: exchanges.v1.ExchangeReply.updated_at:type_name -> google.protobuf.Timestamp
	6,  // 5: exchanges.v1.ExchangeStatsReply.price:type_name -> exchanges.v1.ExchangeStatsReply.Price
	7,  // 6: exchanges.v1.ExchangeStatsReply.volume:type_name -> exchanges.v1.ExchangeStatsReply.Volume
	10, // 7: exchanges.v1.ExchangeStatsReply.created_at:type_name -> google.protobuf.Timestamp
	10, // 8: exchanges.v1.ExchangeStatsReply.updated_at:type_name -> google.protobuf.Timestamp
	8,  // 9: exchanges.v1.ExchangeReplies.results:type_name -> exchanges.v1.ExchangeReplies.Result
	1,  // 10: exchanges.v1.Exchanges.Get:input_type -> exchanges.v1.ExchangeRequest
	1,  // 11: exchanges.v1.Exchanges.Stats:input_type -> exchanges.v1.ExchangeRequest
	2,  // 12: exchanges.v1.Exchanges.Search:input_type -> exchanges.v1.ExchangeSearchRequest
	3,  // 13: exchanges.v1.Exchanges.Get:output_type -> exchanges.v1.ExchangeReply
	4,  // 14: exchanges.v1.Exchanges.Stats:output_type -> exchanges.v1.ExchangeStatsReply
	5,  // 15: exchanges.v1.Exchanges.Search:output_type -> exchanges.v1.ExchangeReplies
	13, // [13:16] is the sub-list for method output_type
	10, // [10:13] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_proto_exchanges_v1_exchanges_proto_init() }
func file_proto_exchanges_v1_exchanges_proto_init() {
	if File_proto_exchanges_v1_exchanges_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_exchanges_v1_exchanges_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Holiday); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_exchanges_v1_exchanges_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_exchanges_v1_exchanges_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_exchanges_v1_exchanges_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_exchanges_v1_exchanges_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeStatsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_exchanges_v1_exchanges_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeReplies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_exchanges_v1_exchanges_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeStatsReply_Price); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_exchanges_v1_exchanges_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeStatsReply_Volume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_exchanges_v1_exchanges_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeReplies_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_exchanges_v1_exchanges_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_exchanges_v1_exchanges_proto_goTypes,
		DependencyIndexes: file_proto_exchanges_v1_exchanges_proto_depIdxs,
		MessageInfos:      file_proto_exchanges_v1_exchanges_proto_msgTypes,
	}.Build()
	File_proto_exchanges_v1_exchanges_proto = out.File
	file_proto_exchanges_v1_exchanges_proto_rawDesc = nil
	file_proto_exchanges_v1_exchanges_proto_goTypes = nil
	file_proto_exchanges_v1_exchanges_proto_depIdxs = nil
}
