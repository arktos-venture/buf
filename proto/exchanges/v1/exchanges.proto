syntax = "proto3";

package exchanges.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "validate/validate.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/arktos-venture/buf/proto/exchanges/v1;exchanges_v1";
option java_multiple_files = true;
option java_package = "dev.kratos.api.exchanges.v1";
option java_outer_classname = "APIExchangesProtoV1";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
	info: {
        title: "Exchanges APIs";
		description: "Exchanges APIs";
        version: "1.0";
		contact: {
			name: "Arktos Venture project";
			url: "https://github.com/arktos-venture/buf";
			email: "oss@arktos-consulting.cloud";
		};
  	};
	schemes: [HTTP, HTTPS];
	consumes: "application/json";
	produces: "application/json";
	security_definitions: {
	  	security: {
			key: "bearer"
			value: {
		  		type: TYPE_API_KEY
		  		in: IN_HEADER
		  		name: "Authorization"
		  		description: "Authentication token, prefixed by Bearer: Bearer <token>"
			}
	  	}
	}
	security: {
	  	security_requirement: {
			key: "bearer"
	  	}
	}
};

service Exchanges {
	rpc IsOpen (ExchangeIsOpenRequest) returns (ExchangeIsOpenReply) {
		option (google.api.http) = {
            get: "/v1/exchange/{ticker}/isopen"
        };
	}

  	rpc Get (ExchangeRequest) returns (ExchangeReply)  {
        option (google.api.http) = {
            get: "/v1/exchange/{ticker}"
        };
    }

	rpc List (ExchangeListRequest) returns (ExchangeReplies)  {
        option (google.api.http) = {
            get: "/v1/exchanges"
        };
    }
}


// 
// Request
// 

message ExchangeRequest {
	message Request {
		bool companies = 1;
		bool holidays = 2;
	}

	string ticker = 1 [(validate.rules).string = {in: ["NASDAQ", "NYSE", "LSE", "TO", "V", "NEO", "BE", "HM", "XETRA", "DU", "F", "HA", "MU", "STU", "LU", "VI", "MI", "PA", "BR", "LS", "VX", "AS", "SW", "MC", "IR", "IC", "NFN", "RG", "VS", "NB", "HE", "OL", "ST", "TL", "CO", "TA", "HK", "KO", "KQ", "PSE", "BUD", "WAR", "SG", "BSE", "SHE", "SN", "AT", "JK", "JSE", "BK", "SR", "NSE", "KAR", "AU", "SHG", "CM", "VN", "KLSE", "RO", "SA", "BA", "MX", "IL", "ZSE", "TW", "LIM", "CC", "TWO", "IS", "CN", "INDX", "GBOND", "MONEY", "COMM", "FOREX"]}];
	Request request = 2  [(validate.rules).message.required = true];
}

message ExchangeIsOpenRequest {
	string ticker = 1 [(validate.rules).string = {in: ["NASDAQ", "NYSE", "LSE", "TO", "V", "NEO", "BE", "HM", "XETRA", "DU", "F", "HA", "MU", "STU", "LU", "VI", "MI", "PA", "BR", "LS", "VX", "AS", "SW", "MC", "IR", "IC", "NFN", "RG", "VS", "NB", "HE", "OL", "ST", "TL", "CO", "TA", "HK", "KO", "KQ", "PSE", "BUD", "WAR", "SG", "BSE", "SHE", "SN", "AT", "JK", "JSE", "BK", "SR", "NSE", "KAR", "AU", "SHG", "CM", "VN", "KLSE", "RO", "SA", "BA", "MX", "IL", "ZSE", "TW", "LIM", "CC", "TWO", "IS", "CN", "INDX", "GBOND", "MONEY", "COMM", "FOREX"]}];
}

message ExchangeListRequest {
	message Page {
		int32 number = 1 [(validate.rules).int32 = {gt: 0, lte: 10000}];
		int32 limit = 2 [(validate.rules).int32 = {gt: 0, lte: 150}];
	}

	Page page = 1 [(validate.rules).message.required = true];
}


// 
// Reply
// 
  
message ExchangeReply {
	message Holiday {
		string name = 1;
		string description = 2;
		string date = 3;
		bool official = 4;
	}
  
	message Company {
		int64 id = 1;
		string ticker = 2;
		string name = 3;
		string isin = 4;
		int64 activity = 5;
	}

	message Indice {
		string ticker = 1;
		string name = 2;
		string description = 3;
	}
  
	int64 id = 1;
	string ticker = 2;
	string name = 3;
	string description = 4;
	repeated Indice indices = 5;
	string routing = 6;
	string country = 7;
	string currency = 8;
	string timezone = 9;
	repeated Holiday holidays = 10;
	string tradingHours = 11;
	repeated Company companies = 12;
	google.protobuf.Timestamp created_at = 13;
	google.protobuf.Timestamp updated_at = 14;
}
  
message ExchangeIsOpenReply {
	int64 id = 1;
	string name = 2;
	string timezone = 3;
	string tradingHours = 4;
	bool open = 5;
}
  
message ExchangeShortReply {
	string ticker = 1;
	string routing = 2;
	string name = 3;
	string country = 4;
	string currency = 5;
}

message ExchangeReplies {
	message Company {
		int64 id = 1;
		string ticker = 2;
		string name = 3;
		string isin = 4;
	}

	repeated ExchangeShortReply results = 1;
	int32 total = 2;
}