syntax = "proto3";

package exchanges.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "validate/validate.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

import "proto/indices/v1/indices.proto";

option go_package = "github.com/arktos-venture/buf/proto/exchanges/v1;v1Exchanges";
option java_multiple_files = true;
option java_package = "dev.kratos.api.exchanges.v1";
option java_outer_classname = "APIExchangesProtoV1";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
	info: {
        title: "Exchanges APIs";
		description: "Exchanges APIs";
        version: "1.0";
		contact: {
			name: "Arktos Venture project";
			url: "https://github.com/arktos-venture/buf";
			email: "oss@arktos-consulting.cloud";
		};
  	};
	schemes: [HTTP, HTTPS];
	consumes: "application/json";
	produces: "application/json";
	security_definitions: {
	  	security: {
			key: "bearer"
			value: {
		  		type: TYPE_API_KEY
		  		in: IN_HEADER
		  		name: "Authorization"
		  		description: "Authentication token, prefixed by Bearer: Bearer <token>"
			}
	  	}
	}
	security: {
	  	security_requirement: {
			key: "bearer"
	  	}
	}
};

service Exchanges {
	// Public API: Get Exchange properties
  	rpc Get (ExchangeRequest) returns (ExchangeReply)  {
        option (google.api.http) = {
            get: "/v1/exchange/{ticker}"
        };
    }

	// Private API: Get Stats Exchange
	rpc Stats (ExchangeRequest) returns (ExchangeStatsReply) {
		option (google.api.http) = {
			get: "/v1/exchange/{ticker}/stats"
	  	};
	}

	// Public API: Search Exchanges available
	rpc Search (ExchangeSearchRequest) returns (ExchangeReplies)  {
        option (google.api.http) = {
            post: "/v1/exchanges"
			body: "*"
        };
    }
}


// 
// Transverse 
// 

message Holiday {
	string name = 1;
	string description = 2;
	string date = 3;
	bool official = 4;
}


// 
// Request
// 

message ExchangeRequest {
	string ticker = 1 [(validate.rules).string = {min_len: 1, max_len: 8}];
}

message ExchangeSearchRequest {
	string country = 1 [(validate.rules).string.len = 2];
	string currency = 2 [(validate.rules).string.len = 3];
	bool open = 3;
}


// 
// Reply
// 
  
message ExchangeReply {
	string ticker = 1;
	string name = 2;
	string description = 3;
	string primary_indice = 4;
	repeated indices.v1.IndiceReplies.Result indices = 5;
	ExchangeStatsReply stats = 6;
	string routing = 7;
	string country = 8;
	string currency = 9;
	string timezone = 10;
	repeated Holiday holidays = 11;
	string trading_hours = 12;
	bool open = 13;
	google.protobuf.Timestamp created_at = 14;
	google.protobuf.Timestamp updated_at = 15;
}

message ExchangeStatsReply {
	message Price {
		float max_annual = 1;
		float min_annual = 2;
		float return_year = 3;
		int64 market_cap_usd = 4;
		float beta5y = 5;
		float start = 6;
	}
		
	message Volume {
		int64 avg_10d = 1;
		int64 avg_30d = 2;
		int64 avg_90d = 3;
	}

	Price price = 1;
	Volume volume = 2;
	google.protobuf.Timestamp created_at = 3;
	google.protobuf.Timestamp updated_at = 4; 
}

message ExchangeReplies {
	message Result {
		string ticker = 1;
		string routing = 2;
		string name = 3;
		bool open = 4;
	}

	repeated Result results = 1;
	int64 total = 2;
}